"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBClientImpl = void 0;
const TypeDBOptions_1 = require("../api/connection/TypeDBOptions");
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
const RequestTransmitter_1 = require("../stream/RequestTransmitter");
const TypeDBSessionImpl_1 = require("./TypeDBSessionImpl");
var SESSION_ID_EXISTS = ErrorMessage_1.ErrorMessage.Client.SESSION_ID_EXISTS;
var ILLEGAL_CAST = ErrorMessage_1.ErrorMessage.Internal.ILLEGAL_CAST;
class TypeDBClientImpl {
    constructor() {
        this._requestTransmitter = new RequestTransmitter_1.RequestTransmitter();
        this._sessions = {};
        this._isOpen = true;
    }
    isOpen() {
        return this._isOpen;
    }
    async session(database, type, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const session = new TypeDBSessionImpl_1.TypeDBSessionImpl(database, type, options, this);
        await session.open();
        if (this._sessions[session.id])
            throw new TypeDBClientError_1.TypeDBClientError(SESSION_ID_EXISTS.message(session.id));
        this._sessions[session.id] = session;
        return session;
    }
    transmitter() {
        return this._requestTransmitter;
    }
    isCluster() {
        return false;
    }
    asCluster() {
        throw new TypeDBClientError_1.TypeDBClientError(ILLEGAL_CAST.message(this.constructor.toString(), "ClusterClient"));
    }
    async close() {
        if (this._isOpen) {
            this._isOpen = false;
            for (const session of Object.values(Object.values(this._sessions))) {
                await session.close();
            }
            this._requestTransmitter.close();
        }
    }
    closeSession(session) {
        delete this._sessions[session.id];
    }
}
exports.TypeDBClientImpl = TypeDBClientImpl;
