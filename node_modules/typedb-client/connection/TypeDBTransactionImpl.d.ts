import { Transaction } from "typedb-protocol/common/transaction_pb";
import { ConceptManager } from "../api/concept/ConceptManager";
import { TypeDBOptions } from "../api/connection/TypeDBOptions";
import { TransactionType, TypeDBTransaction } from "../api/connection/TypeDBTransaction";
import { LogicManager } from "../api/logic/LogicManager";
import { QueryManager } from "../api/query/QueryManager";
import { Stream } from "../common/util/Stream";
import { TypeDBSessionImpl } from "./TypeDBSessionImpl";
export declare class TypeDBTransactionImpl implements TypeDBTransaction.Extended {
    private readonly _session;
    private readonly _type;
    private readonly _options;
    private _bidirectionalStream;
    private _conceptManager;
    private _logicManager;
    private _queryManager;
    constructor(session: TypeDBSessionImpl, type: TransactionType, options: TypeDBOptions);
    open(): Promise<void>;
    close(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    get concepts(): ConceptManager;
    get logic(): LogicManager;
    get query(): QueryManager;
    get options(): TypeDBOptions;
    get type(): TransactionType;
    isOpen(): boolean;
    rpcExecute(request: Transaction.Req, batch?: boolean): Promise<Transaction.Res>;
    rpcStream(request: Transaction.Req): Stream<Transaction.ResPart>;
    private throwTransactionClosed;
}
