"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBSessionImpl = void 0;
const TypeDBOptions_1 = require("../api/connection/TypeDBOptions");
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const TypeDBTransactionImpl_1 = require("./TypeDBTransactionImpl");
var SESSION_CLOSED = ErrorMessage_1.ErrorMessage.Client.SESSION_CLOSED;
class TypeDBSessionImpl {
    constructor(database, type, options, client) {
        this._databaseName = database;
        this._type = type;
        this._options = options;
        this._client = client;
        this._isOpen = false;
        this._transactions = new Set();
    }
    async open() {
        const openReq = RequestBuilder_1.RequestBuilder.Session.openReq(this._databaseName, this._type.proto(), this._options.proto());
        this._database = await this._client.databases.get(this._databaseName);
        const start = (new Date()).getMilliseconds();
        const res = await this._client.stub().sessionOpen(openReq);
        const end = (new Date()).getMilliseconds();
        this._id = res.getSessionId_asB64();
        this._networkLatencyMillis = Math.max((end - start) - res.getServerDurationMillis(), 1);
        this._isOpen = true;
        this._pulse = setTimeout(() => this.pulse(), 5000);
    }
    async close() {
        if (this._isOpen) {
            this._isOpen = false;
            for (const tx of this._transactions) {
                await tx.close();
            }
            this._client.closeSession(this);
            clearTimeout(this._pulse);
            const req = RequestBuilder_1.RequestBuilder.Session.closeReq(this._id);
            await this._client.stub().sessionClose(req);
        }
    }
    closed(transaction) {
        this._transactions.delete(transaction);
    }
    async transaction(type, options) {
        if (!this.isOpen())
            throw new TypeDBClientError_1.TypeDBClientError(SESSION_CLOSED);
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const transaction = new TypeDBTransactionImpl_1.TypeDBTransactionImpl(this, type, options);
        await transaction.open();
        this._transactions.add(transaction);
        return transaction;
    }
    get database() {
        return this._database;
    }
    isOpen() {
        return this._isOpen;
    }
    get options() {
        return this._options;
    }
    get type() {
        return this._type;
    }
    get id() {
        return this._id;
    }
    get stub() {
        return this._client.stub();
    }
    get requestTransmitter() {
        return this._client.transmitter();
    }
    get networkLatency() {
        return this._networkLatencyMillis;
    }
    async pulse() {
        if (!this._isOpen)
            return;
        const pulse = RequestBuilder_1.RequestBuilder.Session.pulseReq(this._id);
        try {
            const isAlive = await this._client.stub().sessionPulse(pulse);
            if (!isAlive)
                this._isOpen = false;
            else
                this._pulse = setTimeout(() => this.pulse(), 5000);
        }
        catch (e) {
            this._isOpen = false;
        }
    }
}
exports.TypeDBSessionImpl = TypeDBSessionImpl;
