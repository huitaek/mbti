import { Database } from "../../api/connection/database/Database";
import { TypeDBClient } from "../../api/connection/TypeDBClient";
import { TypeDBCredential } from "../../api/connection/TypeDBCredential";
import { TypeDBClusterOptions } from "../../api/connection/TypeDBOptions";
import { SessionType } from "../../api/connection/TypeDBSession";
import { ClusterDatabaseManager } from "./ClusterDatabaseManager";
import { ClusterServerClient } from "./ClusterServerClient";
import { ClusterServerStub } from "./ClusterServerStub";
import { ClusterSession } from "./ClusterSession";
import { ClusterUserManager } from "./ClusterUserManager";
export declare class ClusterClient implements TypeDBClient.Cluster {
    private readonly _addresses;
    private readonly _credential;
    private _serverClients;
    private _userManager;
    private _databaseManagers;
    private _databases;
    private _isOpen;
    constructor(addresses: string[], credential: TypeDBCredential);
    open(): Promise<this>;
    isOpen(): boolean;
    get users(): ClusterUserManager;
    get databases(): ClusterDatabaseManager;
    clusterDatabases(): {
        [db: string]: Database.Cluster;
    };
    session(database: string, type: SessionType, options?: TypeDBClusterOptions): Promise<ClusterSession>;
    private sessionPrimaryReplica;
    private sessionAnyReplica;
    clusterServerClients(): {
        [serverAddress: string]: ClusterServerClient;
    };
    clusterServerClient(address: string): ClusterServerClient;
    clusterServerAddresses(): string[];
    stub(address: string): ClusterServerStub;
    isCluster(): boolean;
    asCluster(): TypeDBClient.Cluster;
    close(): Promise<void>;
    private fetchClusterServers;
}
