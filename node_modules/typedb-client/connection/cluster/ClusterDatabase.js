"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseReplica = exports.ClusterDatabase = void 0;
const dependencies_internal_1 = require("../../dependencies_internal");
const TypeDBDatabaseImpl_1 = require("../TypeDBDatabaseImpl");
class ClusterDatabase {
    constructor(client, database) {
        this._databases = {};
        const clusterDbMgr = client.databases;
        for (const address of Object.keys(clusterDbMgr.databaseManagers())) {
            const databaseManager = clusterDbMgr.databaseManagers()[address];
            this._databases[address] = new TypeDBDatabaseImpl_1.TypeDBDatabaseImpl(database, databaseManager.stub());
        }
        this._name = database;
        this._client = client;
        this._replicas = [];
    }
    static of(protoDB, client) {
        const database = protoDB.getName();
        const databaseClusterRPC = new ClusterDatabase(client, database);
        databaseClusterRPC.replicas.push(...protoDB.getReplicasList().map(rep => DatabaseReplica.of(rep, databaseClusterRPC)));
        console.info(`Discovered database cluster: ${databaseClusterRPC}`);
        return databaseClusterRPC;
    }
    get primaryReplica() {
        const primaryReplicas = this._replicas.filter(rep => rep.primary);
        if (primaryReplicas.length)
            return primaryReplicas.reduce((current, next) => next.term > current.term ? next : current);
        else
            return null;
    }
    get preferredReplica() {
        return this._replicas.find(rep => rep.preferred) || this._replicas[0];
    }
    get name() {
        return this._name;
    }
    async delete() {
        const deleteDbTask = new DeleteDatabaseFailsafeTask(this._client, this._name, this._databases);
        await deleteDbTask.runPrimaryReplica();
    }
    async schema() {
        return this._databases[Object.keys(this._databases)[0]].schema();
    }
    get replicas() {
        return this._replicas;
    }
    toString() {
        return this._name;
    }
}
exports.ClusterDatabase = ClusterDatabase;
class DatabaseReplica {
    constructor(database, address, term, isPrimary, isPreferred) {
        this._database = database;
        this._id = new ReplicaId(address, database.name);
        this._term = term;
        this._isPrimary = isPrimary;
        this._isPreferred = isPreferred;
    }
    static of(replica, database) {
        return new DatabaseReplica(database, replica.getAddress(), replica.getTerm(), replica.getPrimary(), replica.getPreferred());
    }
    get id() {
        return this._id;
    }
    get database() {
        return this._database;
    }
    get term() {
        return this._term;
    }
    get primary() {
        return this._isPrimary;
    }
    get preferred() {
        return this._isPreferred;
    }
    get address() {
        return this.id.address;
    }
    async delete() {
        await this._database.delete();
    }
    get name() {
        return this.toString();
    }
    schema() {
        return this._database.schema();
    }
    toString() {
        return `${this._id}:${this._isPrimary ? "P" : "S"}:${this._term}`;
    }
}
exports.DatabaseReplica = DatabaseReplica;
class ReplicaId {
    constructor(address, databaseName) {
        this._address = address;
        this._databaseName = databaseName;
    }
    get address() {
        return this._address;
    }
    toString() {
        return `${this._address}/${this._databaseName}`;
    }
}
class DeleteDatabaseFailsafeTask extends dependencies_internal_1.FailsafeTask {
    constructor(client, database, databases) {
        super(client, database);
        this._databases = databases;
    }
    async run(replica) {
        await this._databases[replica.address].delete();
    }
}
