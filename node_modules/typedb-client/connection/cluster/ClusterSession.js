"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterSession = void 0;
const TypeDBOptions_1 = require("../../api/connection/TypeDBOptions");
const FailsafeTask_1 = require("./FailsafeTask");
class ClusterSession {
    constructor(clusterClient, serverAddress) {
        this._clusterClient = clusterClient;
        this._clusterServerClient = clusterClient.clusterServerClient(serverAddress.toString());
    }
    get clusterServerClient() {
        return this._clusterServerClient;
    }
    set clusterServerClient(client) {
        this._clusterServerClient = client;
    }
    get typeDBSession() {
        return this._typeDBSession;
    }
    set typeDBSession(session) {
        this._typeDBSession = session;
    }
    async open(serverAddress, database, type, options) {
        console.info(`Opening a session to '${serverAddress}'`);
        this._typeDBSession = await this._clusterServerClient.session(database, type, options);
        this._options = options;
        return this;
    }
    transaction(type, options = TypeDBOptions_1.TypeDBOptions.cluster()) {
        if (options.readAnyReplica) {
            return this.transactionAnyReplica(type, options);
        }
        else {
            return this.transactionPrimaryReplica(type, options);
        }
    }
    get type() {
        return this._typeDBSession.type;
    }
    isOpen() {
        return this._typeDBSession.isOpen();
    }
    get options() {
        return this._options;
    }
    close() {
        return this._typeDBSession.close();
    }
    get database() {
        return this._typeDBSession.database;
    }
    clusterClient() {
        return this._clusterClient;
    }
    transactionPrimaryReplica(type, options) {
        return new TransactionFailsafeTask(this, type, options).runPrimaryReplica();
    }
    transactionAnyReplica(type, options) {
        return new TransactionFailsafeTask(this, type, options).runAnyReplica();
    }
}
exports.ClusterSession = ClusterSession;
class TransactionFailsafeTask extends FailsafeTask_1.FailsafeTask {
    constructor(clusterSession, type, options) {
        super(clusterSession.clusterClient(), clusterSession.database.name);
        this._clusterSession = clusterSession;
        this._type = type;
        this._options = options;
    }
    run(replica) {
        return this._clusterSession.typeDBSession.transaction(this._type, this._options);
    }
    async rerun(replica) {
        if (this._clusterSession.typeDBSession)
            await this._clusterSession.typeDBSession.close();
        this._clusterSession.clusterServerClient = this._clusterSession.clusterClient().clusterServerClient(replica.address);
        this._clusterSession.typeDBSession = await this._clusterSession.clusterServerClient.session(this.database, this._clusterSession.type, this._clusterSession.options);
        return await this._clusterSession.typeDBSession.transaction(this._type, this._options);
    }
}
