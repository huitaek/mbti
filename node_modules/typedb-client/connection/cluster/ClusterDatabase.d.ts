import { ClusterDatabase as ClusterDatabaseProto } from "typedb-protocol/cluster/cluster_database_pb";
import { Database } from "../../api/connection/database/Database";
import { ClusterClient } from "./ClusterClient";
export declare class ClusterDatabase implements Database.Cluster {
    private readonly _name;
    private readonly _databases;
    private readonly _client;
    private readonly _replicas;
    private constructor();
    static of(protoDB: ClusterDatabaseProto, client: ClusterClient): ClusterDatabase;
    get primaryReplica(): DatabaseReplica;
    get preferredReplica(): DatabaseReplica;
    get name(): string;
    delete(): Promise<void>;
    schema(): Promise<string>;
    get replicas(): DatabaseReplica[];
    toString(): string;
}
export declare class DatabaseReplica implements Database.Replica {
    private readonly _id;
    private readonly _database;
    private readonly _isPrimary;
    private readonly _isPreferred;
    private readonly _term;
    private constructor();
    static of(replica: ClusterDatabaseProto.Replica, database: ClusterDatabase): DatabaseReplica;
    get id(): ReplicaId;
    get database(): Database.Cluster;
    get term(): number;
    get primary(): boolean;
    get preferred(): boolean;
    get address(): string;
    delete(): Promise<void>;
    get name(): string;
    schema(): Promise<string>;
    toString(): string;
}
declare class ReplicaId {
    private readonly _address;
    private readonly _databaseName;
    constructor(address: string, databaseName: string);
    get address(): string;
    toString(): string;
}
export {};
