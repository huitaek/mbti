import { ClientDuplexStream } from "@grpc/grpc-js";
import { ClusterDatabaseManager } from "typedb-protocol/cluster/cluster_database_pb";
import { ServerManager } from "typedb-protocol/cluster/cluster_server_pb";
import { ClusterUser, ClusterUserManager } from "typedb-protocol/cluster/cluster_user_pb";
import { TypeDBClient } from "typedb-protocol/core/core_service_grpc_pb";
import { TypeDBCredential } from "../../api/connection/TypeDBCredential";
import { TypeDBStub } from "../../common/rpc/TypeDBStub";
import { CoreDatabase as CoreDatabaseProto, CoreDatabaseManager as CoreDatabaseMgrProto } from "typedb-protocol/core/core_database_pb";
import { TypeDBDatabaseImpl } from "../TypeDBDatabaseImpl";
import { Session } from "typedb-protocol/common/session_pb";
import * as common_transaction_pb from "typedb-protocol/common/transaction_pb";
export declare class ClusterServerStub extends TypeDBStub {
    private readonly _credential;
    private _token;
    private readonly _stub;
    private readonly _clusterStub;
    constructor(address: string, credential: TypeDBCredential);
    open(): Promise<void>;
    private createChannelCredentials;
    private createCallCredentials;
    serversAll(req: ServerManager.All.Req): Promise<ServerManager.All.Res>;
    usersAll(req: ClusterUserManager.All.Req): Promise<ClusterUserManager.All.Res>;
    usersContains(req: ClusterUserManager.Contains.Req): Promise<boolean>;
    userCreate(req: ClusterUserManager.Create.Req): Promise<void>;
    userPassword(req: ClusterUser.Password.Req): Promise<void>;
    userDelete(req: ClusterUser.Delete.Req): Promise<void>;
    databasesClusterGet(req: ClusterDatabaseManager.Get.Req): Promise<ClusterDatabaseManager.Get.Res>;
    databasesClusterAll(req: ClusterDatabaseManager.All.Req): Promise<ClusterDatabaseManager.All.Res>;
    databasesCreate(req: CoreDatabaseMgrProto.Create.Req): Promise<void>;
    databasesContains(req: CoreDatabaseMgrProto.Contains.Req): Promise<boolean>;
    databasesAll(req: CoreDatabaseMgrProto.All.Req): Promise<TypeDBDatabaseImpl[]>;
    databaseDelete(req: CoreDatabaseProto.Delete.Req): Promise<void>;
    databaseSchema(req: CoreDatabaseProto.Schema.Req): Promise<string>;
    sessionOpen(req: Session.Open.Req): Promise<Session.Open.Res>;
    sessionClose(req: Session.Close.Req): Promise<void>;
    sessionPulse(req: Session.Pulse.Req): Promise<boolean>;
    transaction(): Promise<ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>>;
    private mayRenewToken;
    private userToken;
    stub(): TypeDBClient;
    close(): void;
}
