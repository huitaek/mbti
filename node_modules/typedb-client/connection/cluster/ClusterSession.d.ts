import { Database } from "../../api/connection/database/Database";
import { TypeDBClusterOptions } from "../../api/connection/TypeDBOptions";
import { SessionType, TypeDBSession } from "../../api/connection/TypeDBSession";
import { TransactionType, TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { TypeDBSessionImpl } from "../TypeDBSessionImpl";
import { ClusterClient } from "./ClusterClient";
import { ClusterServerClient } from "./ClusterServerClient";
export declare class ClusterSession implements TypeDBSession {
    private readonly _clusterClient;
    private _options;
    constructor(clusterClient: ClusterClient, serverAddress: string);
    private _clusterServerClient;
    get clusterServerClient(): ClusterServerClient;
    set clusterServerClient(client: ClusterServerClient);
    private _typeDBSession;
    get typeDBSession(): TypeDBSessionImpl;
    set typeDBSession(session: TypeDBSessionImpl);
    open(serverAddress: string, database: string, type: SessionType, options: TypeDBClusterOptions): Promise<ClusterSession>;
    transaction(type: TransactionType, options?: TypeDBClusterOptions): Promise<TypeDBTransaction>;
    get type(): SessionType;
    isOpen(): boolean;
    get options(): TypeDBClusterOptions;
    close(): Promise<void>;
    get database(): Database;
    clusterClient(): ClusterClient;
    private transactionPrimaryReplica;
    private transactionAnyReplica;
}
