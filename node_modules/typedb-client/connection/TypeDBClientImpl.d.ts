import { TypeDBClient } from "../api/connection/TypeDBClient";
import { TypeDBOptions } from "../api/connection/TypeDBOptions";
import { SessionType } from "../api/connection/TypeDBSession";
import { TypeDBStub } from "../common/rpc/TypeDBStub";
import { RequestTransmitter } from "../stream/RequestTransmitter";
import { TypeDBDatabaseManagerImpl } from "./TypeDBDatabaseManagerImpl";
import { TypeDBSessionImpl } from "./TypeDBSessionImpl";
export declare abstract class TypeDBClientImpl implements TypeDBClient {
    private readonly _requestTransmitter;
    private readonly _sessions;
    private _isOpen;
    protected constructor();
    isOpen(): boolean;
    session(database: string, type: SessionType, options?: TypeDBOptions): Promise<TypeDBSessionImpl>;
    abstract get databases(): TypeDBDatabaseManagerImpl;
    abstract stub(): TypeDBStub;
    transmitter(): RequestTransmitter;
    isCluster(): boolean;
    asCluster(): TypeDBClient.Cluster;
    close(): Promise<void>;
    closeSession(session: TypeDBSessionImpl): void;
}
