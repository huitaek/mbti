import { Database } from "../api/connection/database/Database";
import { TypeDBOptions } from "../api/connection/TypeDBOptions";
import { SessionType, TypeDBSession } from "../api/connection/TypeDBSession";
import { TransactionType, TypeDBTransaction } from "../api/connection/TypeDBTransaction";
import { TypeDBStub } from "../common/rpc/TypeDBStub";
import { RequestTransmitter } from "../stream/RequestTransmitter";
import { TypeDBClientImpl } from "./TypeDBClientImpl";
export declare class TypeDBSessionImpl implements TypeDBSession {
    private readonly _databaseName;
    private readonly _type;
    private readonly _options;
    private readonly _client;
    private _id;
    private _database;
    private _isOpen;
    private _pulse;
    private _networkLatencyMillis;
    private _transactions;
    constructor(database: string, type: SessionType, options: TypeDBOptions, client: TypeDBClientImpl);
    open(): Promise<void>;
    close(): Promise<void>;
    closed(transaction: TypeDBTransaction.Extended): void;
    transaction(type: TransactionType, options?: TypeDBOptions): Promise<TypeDBTransaction>;
    get database(): Database;
    isOpen(): boolean;
    get options(): TypeDBOptions;
    get type(): SessionType;
    get id(): string;
    get stub(): TypeDBStub;
    get requestTransmitter(): RequestTransmitter;
    get networkLatency(): number;
    private pulse;
}
