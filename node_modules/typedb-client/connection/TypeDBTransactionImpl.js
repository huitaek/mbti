"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBTransactionImpl = void 0;
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const ConceptManagerImpl_1 = require("../concept/ConceptManagerImpl");
const LogicManagerImpl_1 = require("../logic/LogicManagerImpl");
const QueryManagerImpl_1 = require("../query/QueryManagerImpl");
const BidirectionalStream_1 = require("../stream/BidirectionalStream");
var TRANSACTION_CLOSED = ErrorMessage_1.ErrorMessage.Client.TRANSACTION_CLOSED;
var TRANSACTION_CLOSED_WITH_ERRORS = ErrorMessage_1.ErrorMessage.Client.TRANSACTION_CLOSED_WITH_ERRORS;
var ILLEGAL_STATE = ErrorMessage_1.ErrorMessage.Internal.ILLEGAL_STATE;
class TypeDBTransactionImpl {
    constructor(session, type, options) {
        this._session = session;
        this._type = type;
        this._options = options;
    }
    async open() {
        const rpcClient = this._session.stub;
        this._bidirectionalStream = new BidirectionalStream_1.BidirectionalStream(rpcClient, this._session.requestTransmitter);
        await this._bidirectionalStream.open();
        this._conceptManager = new ConceptManagerImpl_1.ConceptManagerImpl(this);
        this._logicManager = new LogicManagerImpl_1.LogicManagerImpl(this);
        this._queryManager = new QueryManagerImpl_1.QueryManagerImpl(this);
        const openReq = RequestBuilder_1.RequestBuilder.Transaction.openReq(this._session.id, this._type.proto(), this._options.proto(), this._session.networkLatency);
        await this.rpcExecute(openReq, false);
    }
    async close() {
        await this._bidirectionalStream.close();
        this._session.closed(this);
    }
    async commit() {
        const commitReq = RequestBuilder_1.RequestBuilder.Transaction.commitReq();
        try {
            await this.rpcExecute(commitReq, false);
        }
        finally {
            await this.close();
        }
    }
    async rollback() {
        const rollbackReq = RequestBuilder_1.RequestBuilder.Transaction.rollbackReq();
        await this.rpcExecute(rollbackReq, false);
    }
    get concepts() {
        return this._conceptManager;
    }
    get logic() {
        return this._logicManager;
    }
    get query() {
        return this._queryManager;
    }
    get options() {
        return this._options;
    }
    get type() {
        return this._type;
    }
    isOpen() {
        return this._bidirectionalStream.isOpen();
    }
    async rpcExecute(request, batch) {
        if (!this.isOpen())
            this.throwTransactionClosed();
        const useBatch = batch !== false;
        return this._bidirectionalStream.single(request, useBatch);
    }
    rpcStream(request) {
        if (!this.isOpen())
            this.throwTransactionClosed();
        return this._bidirectionalStream.stream(request);
    }
    throwTransactionClosed() {
        if (this.isOpen())
            throw new TypeDBClientError_1.TypeDBClientError(ILLEGAL_STATE);
        const error = this._bidirectionalStream.getError();
        if (!error)
            throw new TypeDBClientError_1.TypeDBClientError(TRANSACTION_CLOSED);
        else
            throw new TypeDBClientError_1.TypeDBClientError(TRANSACTION_CLOSED_WITH_ERRORS.message(error));
    }
}
exports.TypeDBTransactionImpl = TypeDBTransactionImpl;
