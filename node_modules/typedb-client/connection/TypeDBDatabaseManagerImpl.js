"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBDatabaseManagerImpl = void 0;
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const TypeDBDatabaseImpl_1 = require("./TypeDBDatabaseImpl");
class TypeDBDatabaseManagerImpl {
    constructor(client) {
        this._stub = client;
    }
    async get(name) {
        if (await this.contains(name)) {
            return new TypeDBDatabaseImpl_1.TypeDBDatabaseImpl(name, this._stub);
        }
        else
            throw new TypeDBClientError_1.TypeDBClientError(ErrorMessage_1.ErrorMessage.Client.DB_DOES_NOT_EXIST.message(name));
    }
    create(name) {
        if (!name)
            throw new TypeDBClientError_1.TypeDBClientError(ErrorMessage_1.ErrorMessage.Client.MISSING_DB_NAME);
        const req = RequestBuilder_1.RequestBuilder.Core.DatabaseManager.createReq(name);
        return this._stub.databasesCreate(req);
    }
    contains(name) {
        if (!name)
            throw new TypeDBClientError_1.TypeDBClientError(ErrorMessage_1.ErrorMessage.Client.MISSING_DB_NAME);
        const req = RequestBuilder_1.RequestBuilder.Core.DatabaseManager.containsReq(name);
        return this._stub.databasesContains(req);
    }
    all() {
        const req = RequestBuilder_1.RequestBuilder.Core.DatabaseManager.allReq();
        return this._stub.databasesAll(req);
    }
    stub() {
        return this._stub;
    }
}
exports.TypeDBDatabaseManagerImpl = TypeDBDatabaseManagerImpl;
