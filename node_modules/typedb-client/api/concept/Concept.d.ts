import { TypeDBTransaction } from "../connection/TypeDBTransaction";
import { Attribute } from "./thing/Attribute";
import { Entity } from "./thing/Entity";
import { Relation } from "./thing/Relation";
import { Thing } from "./thing/Thing";
import { AttributeType } from "./type/AttributeType";
import { EntityType } from "./type/EntityType";
import { RelationType } from "./type/RelationType";
import { RoleType } from "./type/RoleType";
import { ThingType } from "./type/ThingType";
import { Type } from "./type/Type";
export interface Concept {
    asRemote(transaction: TypeDBTransaction): Concept.Remote;
    isRemote(): boolean;
    isType(): boolean;
    isRoleType(): boolean;
    isThingType(): boolean;
    isEntityType(): boolean;
    isAttributeType(): boolean;
    isRelationType(): boolean;
    isThing(): boolean;
    isEntity(): boolean;
    isAttribute(): boolean;
    isRelation(): boolean;
    asType(): Type;
    asThingType(): ThingType;
    asEntityType(): EntityType;
    asAttributeType(): AttributeType;
    asRelationType(): RelationType;
    asRoleType(): RoleType;
    asThing(): Thing;
    asEntity(): Entity;
    asAttribute(): Attribute;
    asRelation(): Relation;
    equals(concept: Concept): boolean;
}
export declare namespace Concept {
    interface Remote extends Concept {
        delete(): Promise<void>;
        isDeleted(): Promise<boolean>;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
    }
}
