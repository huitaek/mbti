import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Concept } from "../Concept";
import { AttributeType } from "../type/AttributeType";
import { EntityType } from "../type/EntityType";
import { RelationType } from "../type/RelationType";
import { RoleType } from "../type/RoleType";
import { ThingType } from "../type/ThingType";
import { Type } from "../type/Type";
import { Attribute } from "./Attribute";
import { Entity } from "./Entity";
import { Relation } from "./Relation";
export interface Thing extends Concept {
    asRemote(transaction: TypeDBTransaction): Thing.Remote;
    readonly iid: string;
    readonly type: ThingType;
    readonly inferred: boolean;
}
export declare namespace Thing {
    interface Remote extends Thing, Concept.Remote {
        asRemote(transaction: TypeDBTransaction): Thing.Remote;
        setHas(attribute: Attribute): Promise<void>;
        unsetHas(attribute: Attribute): Promise<void>;
        getHas(onlyKey: boolean): Stream<Attribute>;
        getHas(attributeType: AttributeType.Boolean): Stream<Attribute.Boolean>;
        getHas(attributeType: AttributeType.Long): Stream<Attribute.Long>;
        getHas(attributeType: AttributeType.Double): Stream<Attribute.Double>;
        getHas(attributeType: AttributeType.String): Stream<Attribute.String>;
        getHas(attributeType: AttributeType.DateTime): Stream<Attribute.DateTime>;
        getHas(): Stream<Attribute>;
        getHas(attributeTypes: AttributeType[]): Stream<Attribute>;
        getPlaying(): Stream<RoleType>;
        getRelations(): Stream<Relation>;
        getRelations(roleTypes: RoleType[]): Stream<Relation>;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
    }
    function proto(thing: Thing): import("typedb-protocol/common/concept_pb").Thing;
}
