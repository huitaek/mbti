import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { AttributeType } from "../type/AttributeType";
import { EntityType } from "../type/EntityType";
import { RelationType } from "../type/RelationType";
import { RoleType } from "../type/RoleType";
import { ThingType } from "../type/ThingType";
import { Type } from "../type/Type";
import { Entity } from "./Entity";
import { Relation } from "./Relation";
import { Thing } from "./Thing";
export interface Attribute extends Thing {
    asRemote(transaction: TypeDBTransaction): Attribute.Remote;
    readonly type: AttributeType;
    readonly value: boolean | string | number | Date;
    isBoolean(): boolean;
    isLong(): boolean;
    isDouble(): boolean;
    isString(): boolean;
    isDateTime(): boolean;
    asBoolean(): Attribute.Boolean;
    asLong(): Attribute.Long;
    asDouble(): Attribute.Double;
    asString(): Attribute.String;
    asDateTime(): Attribute.DateTime;
}
export declare namespace Attribute {
    interface Remote extends Attribute, Thing.Remote {
        asRemote(transaction: TypeDBTransaction): Attribute.Remote;
        readonly type: AttributeType;
        getOwners(ownerType?: ThingType): Stream<Thing>;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        asBoolean(): Attribute.Boolean.Remote;
        asLong(): Attribute.Long.Remote;
        asDouble(): Attribute.Double.Remote;
        asString(): Attribute.String.Remote;
        asDateTime(): Attribute.DateTime.Remote;
    }
    interface Boolean extends Attribute {
        asRemote(transaction: TypeDBTransaction): Attribute.Boolean.Remote;
        readonly type: AttributeType.Boolean;
        readonly value: boolean;
    }
    namespace Boolean {
        interface Remote extends Attribute.Remote, Attribute.Boolean {
            asRemote(transaction: TypeDBTransaction): Attribute.Boolean.Remote;
            readonly type: AttributeType.Boolean;
            readonly value: boolean;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): Attribute.Boolean.Remote;
            asLong(): Attribute.Long.Remote;
            asDouble(): Attribute.Double.Remote;
            asString(): Attribute.String.Remote;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
    interface Long extends Attribute {
        asRemote(transaction: TypeDBTransaction): Attribute.Long.Remote;
        readonly type: AttributeType.Long;
        readonly value: number;
    }
    namespace Long {
        interface Remote extends Attribute.Remote, Attribute.Long {
            asRemote(transaction: TypeDBTransaction): Attribute.Long.Remote;
            readonly type: AttributeType.Long;
            readonly value: number;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): Attribute.Boolean.Remote;
            asLong(): Attribute.Long.Remote;
            asDouble(): Attribute.Double.Remote;
            asString(): Attribute.String.Remote;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
    interface Double extends Attribute {
        asRemote(transaction: TypeDBTransaction): Attribute.Double.Remote;
        readonly type: AttributeType.Double;
        readonly value: number;
    }
    namespace Double {
        interface Remote extends Attribute.Remote, Attribute.Double {
            asRemote(transaction: TypeDBTransaction): Attribute.Double.Remote;
            readonly type: AttributeType.Double;
            readonly value: number;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): Attribute.Boolean.Remote;
            asLong(): Attribute.Long.Remote;
            asDouble(): Attribute.Double.Remote;
            asString(): Attribute.String.Remote;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
    interface String extends Attribute {
        asRemote(transaction: TypeDBTransaction): Attribute.String.Remote;
        readonly type: AttributeType.String;
        readonly value: string;
    }
    namespace String {
        interface Remote extends Attribute.Remote, Attribute.String {
            asRemote(transaction: TypeDBTransaction): Attribute.String.Remote;
            readonly type: AttributeType.String;
            readonly value: string;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): Attribute.Boolean.Remote;
            asLong(): Attribute.Long.Remote;
            asDouble(): Attribute.Double.Remote;
            asString(): Attribute.String.Remote;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
    interface DateTime extends Attribute {
        asRemote(transaction: TypeDBTransaction): Attribute.DateTime.Remote;
        readonly type: AttributeType.DateTime;
        readonly value: Date;
    }
    namespace DateTime {
        interface Remote extends Attribute.Remote, Attribute.DateTime {
            asRemote(transaction: TypeDBTransaction): Attribute.DateTime.Remote;
            readonly type: AttributeType.DateTime;
            readonly value: Date;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): Attribute.Boolean.Remote;
            asLong(): Attribute.Long.Remote;
            asDouble(): Attribute.Double.Remote;
            asString(): Attribute.String.Remote;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
}
