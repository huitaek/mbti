import { AttributeType as AttributeTypeProto } from "typedb-protocol/common/concept_pb";
import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Attribute } from "../thing/Attribute";
import { Entity } from "../thing/Entity";
import { Relation } from "../thing/Relation";
import { Thing } from "../thing/Thing";
import { EntityType } from "./EntityType";
import { RelationType } from "./RelationType";
import { RoleType } from "./RoleType";
import { ThingType } from "./ThingType";
import { Type } from "./Type";
export interface AttributeType extends ThingType {
    readonly valueType: AttributeType.ValueType;
    isBoolean(): boolean;
    isLong(): boolean;
    isDouble(): boolean;
    isString(): boolean;
    isDateTime(): boolean;
    asBoolean(): AttributeType.Boolean;
    asLong(): AttributeType.Long;
    asDouble(): AttributeType.Double;
    asString(): AttributeType.String;
    asDateTime(): AttributeType.DateTime;
    asRemote(transaction: TypeDBTransaction): AttributeType.Remote;
}
export declare namespace AttributeType {
    interface Remote extends AttributeType, ThingType.Remote {
        setSupertype(type: AttributeType): Promise<void>;
        getSubtypes(): Stream<AttributeType>;
        getInstances(): Stream<Attribute>;
        getOwners(): Stream<ThingType>;
        getOwners(onlyKey: boolean): Stream<ThingType>;
        getOwnersExplicit(): Stream<ThingType>;
        getOwnersExplicit(onlyKey: boolean): Stream<ThingType>;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        asBoolean(): AttributeType.Boolean.Remote;
        asLong(): AttributeType.Long.Remote;
        asDouble(): AttributeType.Double.Remote;
        asString(): AttributeType.String.Remote;
        asDateTime(): AttributeType.DateTime.Remote;
        asRemote(transaction: TypeDBTransaction): AttributeType.Remote;
    }
    interface Boolean extends AttributeType {
        asRemote(transaction: TypeDBTransaction): AttributeType.Boolean.Remote;
    }
    namespace Boolean {
        interface Remote extends AttributeType.Boolean, AttributeType.Remote {
            asRemote(transaction: TypeDBTransaction): AttributeType.Boolean.Remote;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): AttributeType.Boolean.Remote;
            asLong(): AttributeType.Long.Remote;
            asDouble(): AttributeType.Double.Remote;
            asString(): AttributeType.String.Remote;
            asDateTime(): AttributeType.DateTime.Remote;
            setSupertype(type: Boolean): Promise<void>;
            getSubtypes(): Stream<Boolean>;
            getInstances(): Stream<Attribute.Boolean>;
            put(value: boolean): Promise<Attribute.Boolean>;
            get(value: boolean): Promise<Attribute.Boolean>;
        }
    }
    interface Long extends AttributeType {
        asRemote(transaction: TypeDBTransaction): AttributeType.Long.Remote;
    }
    namespace Long {
        interface Remote extends AttributeType.Long, AttributeType.Remote {
            asRemote(transaction: TypeDBTransaction): AttributeType.Long.Remote;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): AttributeType.Boolean.Remote;
            asLong(): AttributeType.Long.Remote;
            asDouble(): AttributeType.Double.Remote;
            asString(): AttributeType.String.Remote;
            asDateTime(): AttributeType.DateTime.Remote;
            setSupertype(type: Long): Promise<void>;
            getSubtypes(): Stream<Long>;
            getInstances(): Stream<Attribute.Long>;
            put(value: number): Promise<Attribute.Long>;
            get(value: number): Promise<Attribute.Long>;
        }
    }
    interface Double extends AttributeType {
        asRemote(transaction: TypeDBTransaction): AttributeType.Double.Remote;
    }
    namespace Double {
        interface Remote extends AttributeType.Double, AttributeType.Remote {
            asRemote(transaction: TypeDBTransaction): AttributeType.Double.Remote;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): AttributeType.Boolean.Remote;
            asLong(): AttributeType.Long.Remote;
            asDouble(): AttributeType.Double.Remote;
            asString(): AttributeType.String.Remote;
            asDateTime(): AttributeType.DateTime.Remote;
            setSupertype(type: Double): Promise<void>;
            getSubtypes(): Stream<Double>;
            getInstances(): Stream<Attribute.Double>;
            put(value: number): Promise<Attribute.Double>;
            get(value: number): Promise<Attribute.Double>;
        }
    }
    interface String extends AttributeType {
        asRemote(transaction: TypeDBTransaction): AttributeType.String.Remote;
    }
    namespace String {
        interface Remote extends AttributeType.String, AttributeType.Remote {
            asRemote(transaction: TypeDBTransaction): AttributeType.String.Remote;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): AttributeType.Boolean.Remote;
            asLong(): AttributeType.Long.Remote;
            asDouble(): AttributeType.Double.Remote;
            asString(): AttributeType.String.Remote;
            asDateTime(): AttributeType.DateTime.Remote;
            setSupertype(type: String): Promise<void>;
            getSubtypes(): Stream<String>;
            getInstances(): Stream<Attribute.String>;
            put(value: string): Promise<Attribute.String>;
            get(value: string): Promise<Attribute.String>;
            getRegex(): Promise<string>;
            setRegex(regex: string): Promise<void>;
        }
    }
    interface DateTime extends AttributeType {
        asRemote(transaction: TypeDBTransaction): AttributeType.DateTime.Remote;
    }
    namespace DateTime {
        interface Remote extends AttributeType.DateTime, AttributeType.Remote {
            asRemote(transaction: TypeDBTransaction): AttributeType.DateTime.Remote;
            asType(): Type.Remote;
            asThingType(): ThingType.Remote;
            asEntityType(): EntityType.Remote;
            asAttributeType(): AttributeType.Remote;
            asRelationType(): RelationType.Remote;
            asRoleType(): RoleType.Remote;
            asThing(): Thing.Remote;
            asEntity(): Entity.Remote;
            asAttribute(): Attribute.Remote;
            asRelation(): Relation.Remote;
            asBoolean(): AttributeType.Boolean.Remote;
            asLong(): AttributeType.Long.Remote;
            asDouble(): AttributeType.Double.Remote;
            asString(): AttributeType.String.Remote;
            asDateTime(): AttributeType.DateTime.Remote;
            setSupertype(type: DateTime): Promise<void>;
            getSubtypes(): Stream<DateTime>;
            getInstances(): Stream<Attribute.DateTime>;
            put(value: Date): Promise<Attribute.DateTime>;
            get(value: Date): Promise<Attribute.DateTime>;
        }
    }
    interface ValueType {
        isKeyable(): boolean;
        isWritable(): boolean;
        proto(): AttributeTypeProto.ValueType;
    }
    namespace ValueType {
        class Impl implements ValueType {
            private readonly _attrTypeProto;
            private readonly _name;
            constructor(type: AttributeTypeProto.ValueType, name: string);
            proto(): AttributeTypeProto.ValueType;
            isKeyable(): boolean;
            isWritable(): boolean;
            toString(): string;
        }
        export const OBJECT: Impl;
        export const BOOLEAN: Impl;
        export const LONG: Impl;
        export const DOUBLE: Impl;
        export const STRING: Impl;
        export const DATETIME: Impl;
        export {};
    }
}
