import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Attribute } from "../thing/Attribute";
import { Entity } from "../thing/Entity";
import { Relation } from "../thing/Relation";
import { Thing } from "../thing/Thing";
import { AttributeType } from "./AttributeType";
import { EntityType } from "./EntityType";
import { RelationType } from "./RelationType";
import { ThingType } from "./ThingType";
import { Type } from "./Type";
export interface RoleType extends Type {
    asRemote(transaction: TypeDBTransaction): RoleType.Remote;
}
export declare namespace RoleType {
    interface Remote extends RoleType, Type.Remote {
        asRemote(transaction: TypeDBTransaction): RoleType.Remote;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        getSupertype(): Promise<RoleType>;
        getSupertypes(): Stream<RoleType>;
        getSubtypes(): Stream<RoleType>;
        getRelationType(): Promise<RelationType>;
        getRelationTypes(): Stream<RelationType>;
        getPlayers(): Stream<ThingType>;
    }
    function proto(roleType: RoleType): import("typedb-protocol/common/concept_pb").Type;
}
