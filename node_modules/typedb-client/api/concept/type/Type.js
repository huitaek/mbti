"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Type = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const ErrorMessage_1 = require("../../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../../common/errors/TypeDBClientError");
var BAD_ENCODING = ErrorMessage_1.ErrorMessage.Concept.BAD_ENCODING;
var Type;
(function (Type) {
    function encoding(type) {
        if (type.isEntityType()) {
            return concept_pb_1.Type.Encoding.ENTITY_TYPE;
        }
        else if (type.isRelationType()) {
            return concept_pb_1.Type.Encoding.RELATION_TYPE;
        }
        else if (type.isAttributeType()) {
            return concept_pb_1.Type.Encoding.ATTRIBUTE_TYPE;
        }
        else if (type.isRoleType()) {
            return concept_pb_1.Type.Encoding.ROLE_TYPE;
        }
        else if (type.isThingType()) {
            return concept_pb_1.Type.Encoding.THING_TYPE;
        }
        else {
            throw new TypeDBClientError_1.TypeDBClientError(BAD_ENCODING);
        }
    }
    Type.encoding = encoding;
})(Type = exports.Type || (exports.Type = {}));
