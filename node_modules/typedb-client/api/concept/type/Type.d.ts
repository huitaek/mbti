import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Label } from "../../../common/Label";
import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Concept } from "../Concept";
import { Attribute } from "../thing/Attribute";
import { Entity } from "../thing/Entity";
import { Relation } from "../thing/Relation";
import { Thing } from "../thing/Thing";
import { AttributeType } from "./AttributeType";
import { EntityType } from "./EntityType";
import { RelationType } from "./RelationType";
import { RoleType } from "./RoleType";
import { ThingType } from "./ThingType";
export interface Type extends Concept {
    readonly label: Label;
    readonly root: boolean;
    asRemote(transaction: TypeDBTransaction): Type.Remote;
}
export declare namespace Type {
    interface Remote extends Type, Concept.Remote {
        asRemote(transaction: TypeDBTransaction): Type.Remote;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        setLabel(label: string): Promise<void>;
        isAbstract(): Promise<boolean>;
        getSupertype(): Promise<Type>;
        getSupertypes(): Stream<Type>;
        getSubtypes(): Stream<Type>;
    }
    function encoding(type: Type): TypeProto.Encoding;
}
