import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Attribute } from "../thing/Attribute";
import { Entity } from "../thing/Entity";
import { Relation } from "../thing/Relation";
import { Thing } from "../thing/Thing";
import { AttributeType } from "./AttributeType";
import { EntityType } from "./EntityType";
import { RelationType } from "./RelationType";
import { RoleType } from "./RoleType";
import { Type } from "./Type";
export interface ThingType extends Type {
    asRemote(transaction: TypeDBTransaction): ThingType.Remote;
}
export declare namespace ThingType {
    interface Remote extends ThingType, Type.Remote {
        asRemote(transaction: TypeDBTransaction): ThingType.Remote;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        getSupertype(): Promise<ThingType>;
        getSupertypes(): Stream<ThingType>;
        getSubtypes(): Stream<ThingType>;
        getInstances(): Stream<Thing>;
        setAbstract(): Promise<void>;
        unsetAbstract(): Promise<void>;
        setPlays(role: RoleType): Promise<void>;
        setPlays(role: RoleType, overriddenType: RoleType): Promise<void>;
        setOwns(attributeType: AttributeType): Promise<void>;
        setOwns(attributeType: AttributeType, isKey: boolean): Promise<void>;
        setOwns(attributeType: AttributeType, overriddenType: AttributeType): Promise<void>;
        setOwns(attributeType: AttributeType, overriddenType: AttributeType, isKey: boolean): Promise<void>;
        getPlays(): Stream<RoleType>;
        getPlaysExplicit(): Stream<RoleType>;
        getPlaysOverridden(role: RoleType): Promise<RoleType>;
        getOwns(): Stream<AttributeType>;
        getOwns(valueType: AttributeType.ValueType): Stream<AttributeType>;
        getOwns(keysOnly: boolean): Stream<AttributeType>;
        getOwns(valueType: AttributeType.ValueType, keysOnly: boolean): Stream<AttributeType>;
        getOwnsExplicit(): Stream<AttributeType>;
        getOwnsExplicit(valueType: AttributeType.ValueType): Stream<AttributeType>;
        getOwnsExplicit(keysOnly: boolean): Stream<AttributeType>;
        getOwnsExplicit(valueType: AttributeType.ValueType, keysOnly: boolean): Stream<AttributeType>;
        getOwnsOverridden(attributeType: AttributeType): Promise<AttributeType>;
        unsetPlays(role: RoleType): Promise<void>;
        unsetOwns(attributeType: AttributeType): Promise<void>;
    }
    function proto(thingType: ThingType): import("typedb-protocol/common/concept_pb").Type;
}
