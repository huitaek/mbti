"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeType = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
/* eslint @typescript-eslint/ban-types: "off" */
var AttributeType;
(function (AttributeType) {
    let ValueType;
    (function (ValueType) {
        class Impl {
            constructor(type, name) {
                this._attrTypeProto = type;
                this._name = name;
            }
            proto() {
                return this._attrTypeProto;
            }
            isKeyable() {
                return [concept_pb_1.AttributeType.ValueType.LONG, concept_pb_1.AttributeType.ValueType.STRING, concept_pb_1.AttributeType.ValueType.DATETIME].includes(this._attrTypeProto);
            }
            isWritable() {
                return this._attrTypeProto !== concept_pb_1.AttributeType.ValueType.OBJECT;
            }
            toString() {
                return "ValueType[" + this._name + "]";
            }
        }
        ValueType.OBJECT = new Impl(concept_pb_1.AttributeType.ValueType.OBJECT, "OBJECT");
        ValueType.BOOLEAN = new Impl(concept_pb_1.AttributeType.ValueType.BOOLEAN, "BOOLEAN");
        ValueType.LONG = new Impl(concept_pb_1.AttributeType.ValueType.LONG, "LONG");
        ValueType.DOUBLE = new Impl(concept_pb_1.AttributeType.ValueType.DOUBLE, "DOUBLE");
        ValueType.STRING = new Impl(concept_pb_1.AttributeType.ValueType.STRING, "STRING");
        ValueType.DATETIME = new Impl(concept_pb_1.AttributeType.ValueType.DATETIME, "DATETIME");
    })(ValueType = AttributeType.ValueType || (AttributeType.ValueType = {}));
})(AttributeType = exports.AttributeType || (exports.AttributeType = {}));
