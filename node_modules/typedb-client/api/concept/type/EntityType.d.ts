import { Stream } from "../../../common/util/Stream";
import { TypeDBTransaction } from "../../connection/TypeDBTransaction";
import { Attribute } from "../thing/Attribute";
import { Entity } from "../thing/Entity";
import { Relation } from "../thing/Relation";
import { Thing } from "../thing/Thing";
import { AttributeType } from "./AttributeType";
import { RelationType } from "./RelationType";
import { RoleType } from "./RoleType";
import { ThingType } from "./ThingType";
import { Type } from "./Type";
export interface EntityType extends ThingType {
    asRemote(transaction: TypeDBTransaction): EntityType.Remote;
}
export declare namespace EntityType {
    interface Remote extends EntityType, ThingType.Remote {
        asRemote(transaction: TypeDBTransaction): EntityType.Remote;
        asType(): Type.Remote;
        asThingType(): ThingType.Remote;
        asEntityType(): EntityType.Remote;
        asAttributeType(): AttributeType.Remote;
        asRelationType(): RelationType.Remote;
        asRoleType(): RoleType.Remote;
        asThing(): Thing.Remote;
        asEntity(): Entity.Remote;
        asAttribute(): Attribute.Remote;
        asRelation(): Relation.Remote;
        create(): Promise<Entity>;
        getInstances(): Stream<Entity>;
        getSubtypes(): Stream<EntityType>;
        setSupertype(superEntityType: EntityType): Promise<void>;
    }
}
