import { Options } from "typedb-protocol/common/options_pb";
declare namespace Opts {
    interface Core {
        infer?: boolean;
        traceInference?: boolean;
        explain?: boolean;
        parallel?: boolean;
        prefetchSize?: number;
        prefetch?: boolean;
        sessionIdleTimeoutMillis?: number;
        transactionTimeoutMillis?: number;
        schemaLockAcquireTimeoutMillis?: number;
    }
    interface Cluster extends Core {
        readAnyReplica?: boolean;
    }
    function proto(options: TypeDBOptions): Options;
}
export declare class TypeDBOptions implements Opts.Core {
    private _infer;
    private _traceInference;
    private _explain;
    private _parallel;
    private _prefetchSize;
    private _prefetch;
    private _sessionIdleTimeoutMillis;
    private _transactionTimeoutMillis;
    private _schemaLockAcquireTimeoutMillis;
    constructor(obj?: {
        [K in keyof Opts.Core]: Opts.Core[K];
    });
    isCluster(): boolean;
    proto(): Options;
    get infer(): boolean;
    set infer(value: boolean);
    get traceInference(): boolean;
    set traceInference(value: boolean);
    get explain(): boolean;
    set explain(value: boolean);
    get parallel(): boolean;
    set parallel(value: boolean);
    get prefetch(): boolean;
    set prefetch(value: boolean);
    get prefetchSize(): number;
    set prefetchSize(value: number);
    get sessionIdleTimeoutMillis(): number;
    set sessionIdleTimeoutMillis(millis: number);
    get transactionTimeoutMillis(): number;
    set transactionTimeoutMillis(millis: number);
    get schemaLockAcquireTimeoutMillis(): number;
    set schemaLockAcquireTimeoutMillis(value: number);
}
export declare class TypeDBClusterOptions extends TypeDBOptions implements Opts.Cluster {
    private _readAnyReplica;
    constructor(obj?: {
        [K in keyof Opts.Cluster]: Opts.Cluster[K];
    });
    isCluster(): boolean;
    get readAnyReplica(): boolean;
    set readAnyReplica(value: boolean);
}
export declare namespace TypeDBOptions {
    function core(options?: {
        [K in keyof Opts.Core]: Opts.Core[K];
    }): TypeDBOptions;
    function cluster(options?: {
        [K in keyof Opts.Cluster]: Opts.Cluster[K];
    }): TypeDBClusterOptions;
}
export {};
