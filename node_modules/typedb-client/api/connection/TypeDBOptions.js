"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBClusterOptions = exports.TypeDBOptions = void 0;
const options_pb_1 = require("typedb-protocol/common/options_pb");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
var NEGATIVE_VALUE_NOT_ALLOWED = ErrorMessage_1.ErrorMessage.Client.NEGATIVE_VALUE_NOT_ALLOWED;
var Opts;
(function (Opts) {
    function proto(options) {
        const optionsProto = new options_pb_1.Options();
        if (options) {
            if (options.infer != null)
                optionsProto.setInfer(options.infer);
            if (options.traceInference != null)
                optionsProto.setTraceInference(options.traceInference);
            if (options.explain != null)
                optionsProto.setExplain(options.explain);
            if (options.parallel != null)
                optionsProto.setParallel(options.parallel);
            if (options.prefetchSize != null)
                optionsProto.setPrefetchSize(options.prefetchSize);
            if (options.prefetch != null)
                optionsProto.setPrefetch(options.prefetch);
            if (options.sessionIdleTimeoutMillis != null)
                optionsProto.setSessionIdleTimeoutMillis(options.sessionIdleTimeoutMillis);
            if (options.transactionTimeoutMillis != null)
                optionsProto.setTransactionTimeoutMillis(options.transactionTimeoutMillis);
            if (options.schemaLockAcquireTimeoutMillis != null)
                optionsProto.setSchemaLockAcquireTimeoutMillis(options.schemaLockAcquireTimeoutMillis);
            if (options.isCluster()) {
                const clusterOptions = options;
                if (clusterOptions.readAnyReplica != null)
                    optionsProto.setReadAnyReplica(clusterOptions.readAnyReplica);
            }
        }
        return optionsProto;
    }
    Opts.proto = proto;
})(Opts || (Opts = {}));
class TypeDBOptions {
    constructor(obj = {}) {
        Object.assign(this, obj);
    }
    isCluster() {
        return false;
    }
    proto() {
        return Opts.proto(this);
    }
    get infer() {
        return this._infer;
    }
    set infer(value) {
        this._infer = value;
    }
    get traceInference() {
        return this._traceInference;
    }
    set traceInference(value) {
        this._traceInference = value;
    }
    get explain() {
        return this._explain;
    }
    set explain(value) {
        this._explain = value;
    }
    get parallel() {
        return this._parallel;
    }
    set parallel(value) {
        this._parallel = value;
    }
    get prefetch() {
        return this._prefetch;
    }
    set prefetch(value) {
        this._prefetch = value;
    }
    get prefetchSize() {
        return this._prefetchSize;
    }
    set prefetchSize(value) {
        if (value < 1) {
            throw new TypeDBClientError_1.TypeDBClientError(NEGATIVE_VALUE_NOT_ALLOWED.message(value));
        }
        this._prefetchSize = value;
    }
    get sessionIdleTimeoutMillis() {
        return this._sessionIdleTimeoutMillis;
    }
    set sessionIdleTimeoutMillis(millis) {
        if (millis < 1) {
            throw new TypeDBClientError_1.TypeDBClientError(NEGATIVE_VALUE_NOT_ALLOWED.message(millis));
        }
        this._sessionIdleTimeoutMillis = millis;
    }
    get transactionTimeoutMillis() {
        return this._transactionTimeoutMillis;
    }
    set transactionTimeoutMillis(millis) {
        if (millis < 1) {
            throw new TypeDBClientError_1.TypeDBClientError(NEGATIVE_VALUE_NOT_ALLOWED.message(millis));
        }
        this._transactionTimeoutMillis = millis;
    }
    get schemaLockAcquireTimeoutMillis() {
        return this._schemaLockAcquireTimeoutMillis;
    }
    set schemaLockAcquireTimeoutMillis(value) {
        if (value < 1) {
            throw new TypeDBClientError_1.TypeDBClientError(NEGATIVE_VALUE_NOT_ALLOWED.message(value));
        }
        this._schemaLockAcquireTimeoutMillis = value;
    }
}
exports.TypeDBOptions = TypeDBOptions;
class TypeDBClusterOptions extends TypeDBOptions {
    constructor(obj = {}) {
        super(obj);
    }
    isCluster() {
        return true;
    }
    get readAnyReplica() {
        return this._readAnyReplica;
    }
    set readAnyReplica(value) {
        this._readAnyReplica = value;
    }
}
exports.TypeDBClusterOptions = TypeDBClusterOptions;
(function (TypeDBOptions) {
    function core(options = {}) {
        return new TypeDBOptions(options);
    }
    TypeDBOptions.core = core;
    function cluster(options = {}) {
        return new TypeDBClusterOptions(options);
    }
    TypeDBOptions.cluster = cluster;
})(TypeDBOptions = exports.TypeDBOptions || (exports.TypeDBOptions = {}));
