import { Session } from "typedb-protocol/common/session_pb";
import { Database } from "./database/Database";
import { TypeDBOptions } from "./TypeDBOptions";
import { TransactionType, TypeDBTransaction } from "./TypeDBTransaction";
export interface TypeDBSession {
    isOpen(): boolean;
    readonly type: SessionType;
    readonly database: Database;
    readonly options: TypeDBOptions;
    transaction(type: TransactionType, options?: TypeDBOptions): Promise<TypeDBTransaction>;
    close(): Promise<void>;
}
export interface SessionType {
    proto(): Session.Type;
    isData(): boolean;
    isSchema(): boolean;
}
export declare namespace SessionType {
    class SessionTypeImpl implements SessionType {
        private readonly _type;
        constructor(type: Session.Type);
        proto(): Session.Type;
        isData(): boolean;
        isSchema(): boolean;
    }
    export const DATA: SessionTypeImpl;
    export const SCHEMA: SessionTypeImpl;
    export {};
}
