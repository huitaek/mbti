import { Transaction } from "typedb-protocol/common/transaction_pb";
import { Stream } from "../../common/util/Stream";
import { ConceptManager } from "../concept/ConceptManager";
import { LogicManager } from "../logic/LogicManager";
import { QueryManager } from "../query/QueryManager";
import { TypeDBOptions } from "./TypeDBOptions";
export interface TypeDBTransaction {
    isOpen(): boolean;
    readonly type: TransactionType;
    readonly options: TypeDBOptions;
    readonly concepts: ConceptManager;
    readonly logic: LogicManager;
    readonly query: QueryManager;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    close(): Promise<void>;
}
export interface TransactionType {
    proto(): Transaction.Type;
    isRead(): boolean;
    isWrite(): boolean;
}
export declare namespace TransactionType {
    class TransactionTypeImpl implements TransactionType {
        private readonly _type;
        constructor(type: Transaction.Type);
        proto(): Transaction.Type;
        isRead(): boolean;
        isWrite(): boolean;
    }
    export const READ: TransactionTypeImpl;
    export const WRITE: TransactionTypeImpl;
    export {};
}
export declare namespace TypeDBTransaction {
    interface Extended extends TypeDBTransaction {
        rpcExecute(request: Transaction.Req, batch?: boolean): Promise<Transaction.Res>;
        rpcStream(request: Transaction.Req): Stream<Transaction.ResPart>;
    }
}
