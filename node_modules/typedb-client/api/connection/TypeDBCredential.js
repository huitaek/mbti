"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBCredential = void 0;
const fs = __importStar(require("fs"));
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
var CLUSTER_INVALID_ROOT_CA_PATH = ErrorMessage_1.ErrorMessage.Client.CLUSTER_INVALID_ROOT_CA_PATH;
class TypeDBCredential {
    constructor(username, password, tlsRootCAPath) {
        this._username = username;
        this._password = password;
        if (tlsRootCAPath != null && !fs.existsSync(tlsRootCAPath)) {
            throw new TypeDBClientError_1.TypeDBClientError(CLUSTER_INVALID_ROOT_CA_PATH.message(tlsRootCAPath));
        }
        this._tlsRootCAPath = tlsRootCAPath;
    }
    get username() {
        return this._username;
    }
    get password() {
        return this._password;
    }
    get tlsRootCAPath() {
        return this._tlsRootCAPath;
    }
}
exports.TypeDBCredential = TypeDBCredential;
