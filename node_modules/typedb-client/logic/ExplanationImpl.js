"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplanationImpl = void 0;
const ConceptMapImpl_1 = require("../concept/answer/ConceptMapImpl");
const RuleImpl_1 = require("./RuleImpl");
class ExplanationImpl {
    constructor(rule, condition, conclusion, variableMapping) {
        this._rule = rule;
        this._condition = condition;
        this._conclusion = conclusion;
        this._variableMapping = variableMapping;
    }
    get rule() {
        return this._rule;
    }
    get conclusion() {
        return this._conclusion;
    }
    get condition() {
        return this._condition;
    }
    get variableMapping() {
        return this._variableMapping;
    }
}
exports.ExplanationImpl = ExplanationImpl;
(function (ExplanationImpl) {
    function of(proto) {
        const varMapping = new Map();
        proto.getVarMappingMap().forEach((vars, key) => varMapping.set(key, new Set(vars.getVarsList())));
        return new ExplanationImpl(RuleImpl_1.RuleImpl.of(proto.getRule()), ConceptMapImpl_1.ConceptMapImpl.of(proto.getCondition()), ConceptMapImpl_1.ConceptMapImpl.of(proto.getConclusion()), varMapping);
    }
    ExplanationImpl.of = of;
})(ExplanationImpl = exports.ExplanationImpl || (exports.ExplanationImpl = {}));
