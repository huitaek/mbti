"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogicManagerImpl = void 0;
const logic_pb_1 = require("typedb-protocol/common/logic_pb");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const Stream_1 = require("../common/util/Stream");
const RuleImpl_1 = require("./RuleImpl");
class LogicManagerImpl {
    constructor(transaction) {
        this._transaction = transaction;
    }
    async getRule(label) {
        const request = RequestBuilder_1.RequestBuilder.LogicManager.getRuleReq(label);
        const response = await this.execute(request);
        const ruleResponse = response.getGetRuleRes();
        switch (ruleResponse.getResCase()) {
            case logic_pb_1.LogicManager.GetRule.Res.ResCase.RULE:
                return RuleImpl_1.RuleImpl.of(ruleResponse.getRule());
            case logic_pb_1.LogicManager.GetRule.Res.ResCase.RES_NOT_SET:
            default:
                return null;
        }
    }
    getRules() {
        const request = RequestBuilder_1.RequestBuilder.LogicManager.getRulesReq();
        return this.stream(request).flatMap((resPart) => Stream_1.Stream.array(resPart.getGetRulesResPart().getRulesList()).map((ruleProto) => RuleImpl_1.RuleImpl.of(ruleProto)));
    }
    async putRule(label, when, then) {
        const request = RequestBuilder_1.RequestBuilder.LogicManager.putRuleReq(label, when, then);
        const response = await this.execute(request);
        const ruleResponse = response.getPutRuleRes();
        return RuleImpl_1.RuleImpl.of(ruleResponse.getRule());
    }
    execute(request) {
        return this._transaction.rpcExecute(request).then((res) => res.getLogicManagerRes());
    }
    stream(request) {
        return this._transaction.rpcStream(request).map((res) => res.getLogicManagerResPart());
    }
}
exports.LogicManagerImpl = LogicManagerImpl;
