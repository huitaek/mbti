"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleImpl = void 0;
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
var deleteReq = RequestBuilder_1.RequestBuilder.Rule.deleteReq;
var setLabelReq = RequestBuilder_1.RequestBuilder.Rule.setLabelReq;
class RuleImpl {
    constructor(label, when, then) {
        this._label = label;
        this._when = when;
        this._then = then;
    }
    asRemote(transaction) {
        return new RuleImpl.Remote(transaction, this._label, this._when, this._then);
    }
    get label() {
        return this._label;
    }
    get when() {
        return this._when;
    }
    get then() {
        return this._then;
    }
    isRemote() {
        return false;
    }
    toString() {
        return "Rule[" + this._label + "]";
    }
}
exports.RuleImpl = RuleImpl;
(function (RuleImpl) {
    class Remote extends RuleImpl {
        constructor(transaction, label, when, then) {
            super(label, when, then);
            this._transaction = transaction;
        }
        async delete() {
            await this._transaction.rpcExecute(deleteReq(this._label));
        }
        async isDeleted() {
            return !(await this._transaction.logic.getRule(this._label));
        }
        async setLabel(label) {
            await this._transaction.rpcExecute(setLabelReq(this._label, label));
            this._label = label;
        }
        isRemote() {
            return true;
        }
        toString() {
            return "Rule[" + this._label + "]";
        }
    }
    RuleImpl.Remote = Remote;
    function of(ruleProto) {
        return new RuleImpl(ruleProto.getLabel(), ruleProto.getWhen(), ruleProto.getThen());
    }
    RuleImpl.of = of;
})(RuleImpl = exports.RuleImpl || (exports.RuleImpl = {}));
