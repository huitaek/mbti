import { Rule as RuleProto } from "typedb-protocol/common/logic_pb";
import { TypeDBTransaction } from "../api/connection/TypeDBTransaction";
import { RemoteRule, Rule } from "../api/logic/Rule";
export declare class RuleImpl implements Rule {
    protected readonly _when: string;
    protected readonly _then: string;
    protected _label: string;
    constructor(label: string, when: string, then: string);
    asRemote(transaction: TypeDBTransaction): RemoteRule;
    get label(): string;
    get when(): string;
    get then(): string;
    isRemote(): boolean;
    toString(): string;
}
export declare namespace RuleImpl {
    class Remote extends RuleImpl implements RemoteRule {
        private _transaction;
        constructor(transaction: TypeDBTransaction.Extended, label: string, when: string, then: string);
        delete(): Promise<void>;
        isDeleted(): Promise<boolean>;
        setLabel(label: string): Promise<void>;
        isRemote(): boolean;
        toString(): string;
    }
    function of(ruleProto: RuleProto): RuleImpl;
}
