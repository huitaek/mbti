import { ConceptMap } from "../api/answer/ConceptMap";
import { ConceptMapGroup } from "../api/answer/ConceptMapGroup";
import { Numeric } from "../api/answer/Numeric";
import { NumericGroup } from "../api/answer/NumericGroup";
import { TypeDBOptions } from "../api/connection/TypeDBOptions";
import { TypeDBTransaction } from "../api/connection/TypeDBTransaction";
import { Explanation } from "../api/logic/Explanation";
import { QueryManager } from "../api/query/QueryManager";
import { Stream } from "../common/util/Stream";
export declare class QueryManagerImpl implements QueryManager {
    private _transaction;
    constructor(transaction: TypeDBTransaction.Extended);
    match(query: string, options?: TypeDBOptions): Stream<ConceptMap>;
    matchAggregate(query: string, options?: TypeDBOptions): Promise<Numeric>;
    matchGroup(query: string, options?: TypeDBOptions): Stream<ConceptMapGroup>;
    matchGroupAggregate(query: string, options?: TypeDBOptions): Stream<NumericGroup>;
    insert(query: string, options?: TypeDBOptions): Stream<ConceptMap>;
    delete(query: string, options?: TypeDBOptions): Promise<void>;
    update(query: string, options?: TypeDBOptions): Stream<ConceptMap>;
    define(query: string, options?: TypeDBOptions): Promise<void>;
    undefine(query: string, options?: TypeDBOptions): Promise<void>;
    explain(explainable: ConceptMap.Explainable, options?: TypeDBOptions): Stream<Explanation>;
    private query;
    private stream;
}
