"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryManagerImpl = void 0;
const TypeDBOptions_1 = require("../api/connection/TypeDBOptions");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const Stream_1 = require("../common/util/Stream");
const ConceptMapGroupImpl_1 = require("../concept/answer/ConceptMapGroupImpl");
const ConceptMapImpl_1 = require("../concept/answer/ConceptMapImpl");
const NumericGroupImpl_1 = require("../concept/answer/NumericGroupImpl");
const NumericImpl_1 = require("../concept/answer/NumericImpl");
const ExplanationImpl_1 = require("../logic/ExplanationImpl");
class QueryManagerImpl {
    constructor(transaction) {
        this._transaction = transaction;
    }
    match(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.matchReq(query, options.proto());
        return this.stream(request).flatMap((queryResPart) => Stream_1.Stream.array(queryResPart.getMatchResPart().getAnswersList())
            .map((conceptMapProto) => ConceptMapImpl_1.ConceptMapImpl.of(conceptMapProto)));
    }
    matchAggregate(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.matchAggregateReq(query, options.proto());
        return this.query(request).then((res) => NumericImpl_1.NumericImpl.of(res.getMatchAggregateRes().getAnswer()));
    }
    matchGroup(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.matchGroupReq(query, options.proto());
        return this.stream(request).flatMap((queryResPart) => Stream_1.Stream.array(queryResPart.getMatchGroupResPart().getAnswersList())
            .map((conceptMapGroupProto) => ConceptMapGroupImpl_1.ConceptMapGroupImpl.of(conceptMapGroupProto)));
    }
    matchGroupAggregate(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.matchGroupAggregateReq(query, options.proto());
        return this.stream(request).flatMap((queryResPart) => Stream_1.Stream.array(queryResPart.getMatchGroupAggregateResPart().getAnswersList())
            .map((numericGroupArray) => NumericGroupImpl_1.NumericGroupImpl.of(numericGroupArray)));
    }
    insert(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.insertReq(query, options.proto());
        return this.stream(request).flatMap((queryResPart) => Stream_1.Stream.array(queryResPart.getInsertResPart().getAnswersList())
            .map((conceptMapProto) => ConceptMapImpl_1.ConceptMapImpl.of(conceptMapProto)));
    }
    delete(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.deleteReq(query, options.proto());
        return this.query(request).then(() => null);
    }
    update(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.updateReq(query, options.proto());
        return this.stream(request).flatMap((queryResPart) => Stream_1.Stream.array(queryResPart.getUpdateResPart().getAnswersList())
            .map((conceptMapProto) => ConceptMapImpl_1.ConceptMapImpl.of(conceptMapProto)));
    }
    define(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.defineReq(query, options.proto());
        return this.query(request).then(() => null);
    }
    undefine(query, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.undefineReq(query, options.proto());
        return this.query(request).then(() => null);
    }
    explain(explainable, options) {
        if (!options)
            options = TypeDBOptions_1.TypeDBOptions.core();
        const request = RequestBuilder_1.RequestBuilder.QueryManager.explainReq(explainable.id, options.proto());
        return this.stream(request)
            .flatMap((resPart) => Stream_1.Stream.array(resPart.getExplainResPart().getExplanationsList()))
            .map((explanationProto) => ExplanationImpl_1.ExplanationImpl.of(explanationProto));
    }
    query(req) {
        return this._transaction.rpcExecute(req).then((res) => res.getQueryManagerRes());
    }
    stream(req) {
        return this._transaction.rpcStream(req).map((res) => {
            return res.getQueryManagerResPart();
        });
    }
}
exports.QueryManagerImpl = QueryManagerImpl;
