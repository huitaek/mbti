"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseCollector = void 0;
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
const BlockingQueue_1 = require("../common/util/BlockingQueue");
class ResponseCollector {
    constructor() {
        this._response_queues = {};
    }
    queue(uuid) {
        const queue = new ResponseCollector.ResponseQueue();
        this._response_queues[uuid] = queue;
        return queue;
    }
    get(uuid) {
        return this._response_queues[uuid];
    }
    remove(requestId) {
        delete this._response_queues[requestId];
    }
    close(error) {
        Object.values(this._response_queues).forEach(collector => collector.close(error));
    }
}
exports.ResponseCollector = ResponseCollector;
(function (ResponseCollector) {
    var TRANSACTION_CLOSED = ErrorMessage_1.ErrorMessage.Client.TRANSACTION_CLOSED;
    var ILLEGAL_STATE = ErrorMessage_1.ErrorMessage.Internal.ILLEGAL_STATE;
    class ResponseQueue {
        constructor() {
            this._queue = new BlockingQueue_1.BlockingQueue();
        }
        async take() {
            const element = await this._queue.take();
            if (element.isValue())
                return element.value;
            else if (element.isDone()) {
                if (element.hasError()) {
                    throw new TypeDBClientError_1.TypeDBClientError(element.error);
                }
                else {
                    throw new TypeDBClientError_1.TypeDBClientError(TRANSACTION_CLOSED);
                }
            }
            else
                throw new TypeDBClientError_1.TypeDBClientError(ILLEGAL_STATE);
        }
        put(element) {
            this._queue.add(new Value(element));
        }
        close(error) {
            this._queue.add(new Done(error));
        }
    }
    ResponseCollector.ResponseQueue = ResponseQueue;
    class QueueElement {
        isValue() {
            return false;
        }
        isDone() {
            return false;
        }
    }
    class Value extends QueueElement {
        constructor(value) {
            super();
            this._value = value;
        }
        get value() {
            return this._value;
        }
        isValue() {
            return true;
        }
    }
    class Done extends QueueElement {
        constructor(error) {
            super();
            this._error = error;
        }
        hasError() {
            return this._error != null;
        }
        get error() {
            return this._error;
        }
        isDone() {
            return true;
        }
    }
})(ResponseCollector = exports.ResponseCollector || (exports.ResponseCollector = {}));
