import { ClientDuplexStream } from "@grpc/grpc-js";
import { Transaction } from "typedb-protocol/common/transaction_pb";
import { TypeDBStub } from "../common/rpc/TypeDBStub";
import { Stream } from "../common/util/Stream";
import { BatchDispatcher, RequestTransmitter } from "./RequestTransmitter";
export declare class BidirectionalStream {
    private readonly _requestTransmitter;
    private _dispatcher;
    private readonly _responseCollector;
    private readonly _responsePartCollector;
    private _stub;
    private _isOpen;
    private _error;
    constructor(stub: TypeDBStub, requestTransmitter: RequestTransmitter);
    open(): Promise<void>;
    single(request: Transaction.Req, batch: boolean): Promise<Transaction.Res>;
    stream(request: Transaction.Req): Stream<Transaction.ResPart>;
    isOpen(): boolean;
    close(error?: Error | string): Promise<void>;
    registerObserver(transactionStream: ClientDuplexStream<Transaction.Client, Transaction.Server>): void;
    private collectRes;
    private collectResPart;
    dispatcher(): BatchDispatcher;
    getError(): Error | string;
}
