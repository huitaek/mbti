import { ConceptManager } from "../api/concept/ConceptManager";
import { Thing } from "../api/concept/thing/Thing";
import { AttributeType } from "../api/concept/type/AttributeType";
import { EntityType } from "../api/concept/type/EntityType";
import { RelationType } from "../api/concept/type/RelationType";
import { ThingType } from "../api/concept/type/ThingType";
import { TypeDBTransaction } from "../api/connection/TypeDBTransaction";
export declare class ConceptManagerImpl implements ConceptManager {
    private _transaction;
    constructor(client: TypeDBTransaction.Extended);
    getRootThingType(): Promise<ThingType>;
    getRootEntityType(): Promise<EntityType>;
    getRootRelationType(): Promise<RelationType>;
    getRootAttributeType(): Promise<AttributeType>;
    getThingType(label: string): Promise<ThingType>;
    getEntityType(label: string): Promise<EntityType>;
    getRelationType(label: string): Promise<RelationType>;
    getAttributeType(label: string): Promise<AttributeType>;
    getThing(iid: string): Promise<Thing>;
    putEntityType(label: string): Promise<EntityType>;
    putRelationType(label: string): Promise<RelationType>;
    putAttributeType(label: string, valueType: AttributeType.ValueType): Promise<AttributeType>;
    private execute;
}
