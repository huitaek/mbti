"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericImpl = void 0;
const answer_pb_1 = require("typedb-protocol/common/answer_pb");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
var ILLEGAL_CAST = ErrorMessage_1.ErrorMessage.Internal.ILLEGAL_CAST;
var BAD_ANSWER_TYPE = ErrorMessage_1.ErrorMessage.Query.BAD_ANSWER_TYPE;
class NumericImpl {
    constructor(value) {
        this._value = value;
    }
    asNumber() {
        if (this.isNumber())
            return this._value;
        else
            throw new TypeDBClientError_1.TypeDBClientError(ILLEGAL_CAST.message("NaN", "number"));
    }
    isNaN() {
        return !this.isNumber();
    }
    isNumber() {
        return this._value != null;
    }
    toString() {
        return this.isNumber() ? `${this.asNumber()}` : 'NaN';
    }
}
exports.NumericImpl = NumericImpl;
(function (NumericImpl) {
    function of(numericProto) {
        switch (numericProto.getValueCase()) {
            case answer_pb_1.Numeric.ValueCase.NAN:
                return new NumericImpl(null);
            case answer_pb_1.Numeric.ValueCase.DOUBLE_VALUE:
                return new NumericImpl(numericProto.getDoubleValue());
            case answer_pb_1.Numeric.ValueCase.LONG_VALUE:
                return new NumericImpl(numericProto.getLongValue());
            case answer_pb_1.Numeric.ValueCase.VALUE_NOT_SET:
            default:
                throw new TypeDBClientError_1.TypeDBClientError(BAD_ANSWER_TYPE.message(numericProto.getValueCase()));
        }
    }
    NumericImpl.of = of;
})(NumericImpl = exports.NumericImpl || (exports.NumericImpl = {}));
