import { ConceptMap as ConceptMapProto } from "typedb-protocol/common/answer_pb";
import { ConceptMap } from "../../api/answer/ConceptMap";
import { Concept } from "../../api/concept/Concept";
export declare class ConceptMapImpl implements ConceptMap {
    private readonly _concepts;
    private readonly _explainables;
    constructor(concepts: Map<string, Concept>, explainables: ConceptMap.Explainables);
    concepts(): IterableIterator<Concept>;
    get(variable: string): Concept;
    get map(): Map<string, Concept>;
    get explainables(): ConceptMap.Explainables;
}
export declare namespace ConceptMapImpl {
    function of(proto: ConceptMapProto): ConceptMap;
    class ExplainablesImpl implements ConceptMap.Explainables {
        private readonly _relations;
        private readonly _attributes;
        private readonly _ownerships;
        constructor(relations: Map<string, ConceptMap.Explainable>, attributes: Map<string, ConceptMap.Explainable>, ownerships: Map<[string, string], ConceptMap.Explainable>);
        relation(variable: string): ConceptMap.Explainable;
        attribute(variable: string): ConceptMap.Explainable;
        ownership(owner: string, attribute: string): ConceptMap.Explainable;
        get relations(): Map<string, ConceptMap.Explainable>;
        get attributes(): Map<string, ConceptMap.Explainable>;
        get ownerships(): Map<[string, string], ConceptMap.Explainable>;
    }
    class ExplainableImpl implements ConceptMap.Explainable {
        private readonly _conjunction;
        private readonly _id;
        constructor(conjunction: string, id: number);
        get conjunction(): string;
        get id(): number;
    }
}
