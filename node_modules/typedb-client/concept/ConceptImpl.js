"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConceptImpl = void 0;
const ErrorMessage_1 = require("../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../common/errors/TypeDBClientError");
var INVALID_CONCEPT_CASTING = ErrorMessage_1.ErrorMessage.Concept.INVALID_CONCEPT_CASTING;
class ConceptImpl {
    isRemote() {
        return false;
    }
    isType() {
        return false;
    }
    isRoleType() {
        return false;
    }
    isThingType() {
        return false;
    }
    isEntityType() {
        return false;
    }
    isAttributeType() {
        return false;
    }
    isRelationType() {
        return false;
    }
    isThing() {
        return false;
    }
    isEntity() {
        return false;
    }
    isAttribute() {
        return false;
    }
    isRelation() {
        return false;
    }
    asAttribute() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute"));
    }
    asAttributeType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType"));
    }
    asEntity() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Entity"));
    }
    asEntityType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "EntityType"));
    }
    asRelation() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Relation"));
    }
    asRelationType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "RelationType"));
    }
    asRoleType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "RoleType"));
    }
    asThing() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Thing"));
    }
    asThingType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "ThingType"));
    }
    asType() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Type"));
    }
}
exports.ConceptImpl = ConceptImpl;
(function (ConceptImpl) {
    class Remote extends ConceptImpl {
        constructor(transaction, ..._) {
            super();
            if (!transaction)
                throw new TypeDBClientError_1.TypeDBClientError(ErrorMessage_1.ErrorMessage.Concept.MISSING_TRANSACTION);
            this._transaction = transaction;
        }
        get transaction() {
            return this._transaction;
        }
        asAttribute() {
            return super.asAttribute();
        }
        asAttributeType() {
            return super.asAttributeType();
        }
        asEntity() {
            return super.asEntity();
        }
        asEntityType() {
            return super.asEntityType();
        }
        asRelation() {
            return super.asRelation();
        }
        asRelationType() {
            return super.asRelationType();
        }
        asRoleType() {
            return super.asRoleType();
        }
        asThing() {
            return super.asThing();
        }
        asThingType() {
            return super.asThingType();
        }
        asType() {
            return super.asType();
        }
    }
    ConceptImpl.Remote = Remote;
})(ConceptImpl = exports.ConceptImpl || (exports.ConceptImpl = {}));
