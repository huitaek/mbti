"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConceptManagerImpl = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const RequestBuilder_1 = require("../common/rpc/RequestBuilder");
const dependencies_internal_1 = require("../dependencies_internal");
class ConceptManagerImpl {
    constructor(client) {
        this._transaction = client;
    }
    async getRootThingType() {
        return this.getThingType("thing");
    }
    async getRootEntityType() {
        return this.getEntityType("entity");
    }
    async getRootRelationType() {
        return this.getRelationType("relation");
    }
    async getRootAttributeType() {
        return this.getAttributeType("attribute");
    }
    async getThingType(label) {
        const request = RequestBuilder_1.RequestBuilder.ConceptManager.getThingTypeReq(label);
        const response = await this.execute(request);
        if (response.getGetThingTypeRes().getResCase() == concept_pb_1.ConceptManager.GetThingType.Res.ResCase.THING_TYPE) {
            return dependencies_internal_1.ThingTypeImpl.of(response.getGetThingTypeRes().getThingType());
        }
        else {
            return null;
        }
    }
    async getEntityType(label) {
        const type = await this.getThingType(label);
        if (type === null || type === void 0 ? void 0 : type.isEntityType())
            return type.asEntityType();
        else
            return null;
    }
    async getRelationType(label) {
        const type = await this.getThingType(label);
        if (type === null || type === void 0 ? void 0 : type.isRelationType())
            return type.asRelationType();
        else
            return null;
    }
    async getAttributeType(label) {
        const type = await this.getThingType(label);
        if (type === null || type === void 0 ? void 0 : type.isAttributeType())
            return type.asAttributeType();
        else
            return null;
    }
    async getThing(iid) {
        const request = RequestBuilder_1.RequestBuilder.ConceptManager.getThingReq(iid);
        const response = await this.execute(request);
        if (response.getGetThingRes().getResCase() === concept_pb_1.ConceptManager.GetThing.Res.ResCase.THING) {
            return dependencies_internal_1.ThingImpl.of(response.getGetThingRes().getThing());
        }
        else {
            return null;
        }
    }
    async putEntityType(label) {
        const request = RequestBuilder_1.RequestBuilder.ConceptManager.putEntityTypeReq(label);
        const response = await this.execute(request);
        return dependencies_internal_1.EntityTypeImpl.of(response.getPutEntityTypeRes().getEntityType());
    }
    async putRelationType(label) {
        const request = RequestBuilder_1.RequestBuilder.ConceptManager.putRelationTypeReq(label);
        const response = await this.execute(request);
        return dependencies_internal_1.RelationTypeImpl.of(response.getPutRelationTypeRes().getRelationType());
    }
    async putAttributeType(label, valueType) {
        const request = RequestBuilder_1.RequestBuilder.ConceptManager.putAttributeTypeReq(label, valueType.proto());
        const response = await this.execute(request);
        return dependencies_internal_1.AttributeTypeImpl.of(response.getPutAttributeTypeRes().getAttributeType());
    }
    execute(request) {
        return this._transaction.rpcExecute(request).then((res) => res.getConceptManagerRes());
    }
}
exports.ConceptManagerImpl = ConceptManagerImpl;
