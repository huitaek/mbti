import { Thing as ThingProto } from "typedb-protocol/common/concept_pb";
import { Relation } from "../../api/concept/thing/Relation";
import { Thing } from "../../api/concept/thing/Thing";
import { RelationType } from "../../api/concept/type/RelationType";
import { RoleType } from "../../api/concept/type/RoleType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Stream } from "../../common/util/Stream";
import { ThingImpl } from "../../dependencies_internal";
export declare class RelationImpl extends ThingImpl implements Relation {
    private readonly _type;
    constructor(iid: string, inferred: boolean, type: RelationType);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): Relation.Remote;
    get type(): RelationType;
    isRelation(): boolean;
    asRelation(): Relation;
}
export declare namespace RelationImpl {
    function of(thingProto: ThingProto): RelationImpl;
    class Remote extends ThingImpl.Remote implements Relation.Remote {
        private _type;
        constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: RelationType);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Relation.Remote;
        get type(): RelationType;
        isRelation(): boolean;
        asRelation(): Relation.Remote;
        addPlayer(roleType: RoleType, player: Thing): Promise<void>;
        getPlayers(roleTypes?: RoleType[]): Stream<Thing>;
        getPlayersByRoleType(): Promise<Map<RoleType, Thing[]>>;
        removePlayer(roleType: RoleType, player: Thing): Promise<void>;
        getRelating(): Stream<RoleType>;
        private findRole;
    }
}
