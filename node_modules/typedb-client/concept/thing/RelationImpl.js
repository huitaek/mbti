"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationImpl = void 0;
const Thing_1 = require("../../api/concept/thing/Thing");
const RoleType_1 = require("../../api/concept/type/RoleType");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Bytes_1 = require("../../common/util/Bytes");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
class RelationImpl extends dependencies_internal_1.ThingImpl {
    constructor(iid, inferred, type) {
        super(iid, inferred);
        this._type = type;
    }
    get className() {
        return "Relation";
    }
    asRemote(transaction) {
        return new RelationImpl.Remote(transaction, this.iid, this.inferred, this.type);
    }
    get type() {
        return this._type;
    }
    isRelation() {
        return true;
    }
    asRelation() {
        return this;
    }
}
exports.RelationImpl = RelationImpl;
(function (RelationImpl) {
    function of(thingProto) {
        if (!thingProto)
            return null;
        const iid = Bytes_1.Bytes.bytesToHexString(thingProto.getIid_asU8());
        return new RelationImpl(iid, thingProto.getInferred(), dependencies_internal_1.RelationTypeImpl.of(thingProto.getType()));
    }
    RelationImpl.of = of;
    class Remote extends dependencies_internal_1.ThingImpl.Remote {
        constructor(transaction, iid, inferred, type) {
            super(transaction, iid, inferred);
            this._type = type;
        }
        get className() {
            return "Relation";
        }
        asRemote(transaction) {
            return new RelationImpl.Remote(transaction, this.iid, this.inferred, this.type);
        }
        get type() {
            return this._type;
        }
        isRelation() {
            return true;
        }
        asRelation() {
            return this;
        }
        async addPlayer(roleType, player) {
            const request = RequestBuilder_1.RequestBuilder.Thing.Relation.addPlayerReq(this.iid, RoleType_1.RoleType.proto(roleType), Thing_1.Thing.proto(player));
            await this.execute(request);
        }
        getPlayers(roleTypes) {
            if (!roleTypes)
                roleTypes = [];
            const roleTypesProtos = roleTypes.map((roleType) => RoleType_1.RoleType.proto(roleType));
            const request = RequestBuilder_1.RequestBuilder.Thing.Relation.getPlayersReq(this.iid, roleTypesProtos);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getRelationGetPlayersResPart().getThingsList()))
                .map((thingProto) => dependencies_internal_1.ThingImpl.of(thingProto));
        }
        async getPlayersByRoleType() {
            const request = RequestBuilder_1.RequestBuilder.Thing.Relation.getPlayersByRoleTypeReq(this.iid);
            const rolePlayersMap = new Map();
            await this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getRelationGetPlayersByRoleTypeResPart().getRoleTypesWithPlayersList()))
                .forEach((roleTypeWithPlayerList) => {
                const role = dependencies_internal_1.RoleTypeImpl.of(roleTypeWithPlayerList.getRoleType());
                const player = dependencies_internal_1.ThingImpl.of(roleTypeWithPlayerList.getPlayer());
                let key = this.findRole(rolePlayersMap, role);
                if (key == null) {
                    rolePlayersMap.set(role, []);
                    key = role;
                }
                rolePlayersMap.get(key).push(player);
            });
            return rolePlayersMap;
        }
        async removePlayer(roleType, player) {
            const request = RequestBuilder_1.RequestBuilder.Thing.Relation.removePlayerReq(this.iid, RoleType_1.RoleType.proto(roleType), Thing_1.Thing.proto(player));
            await this.execute(request);
        }
        getRelating() {
            const request = RequestBuilder_1.RequestBuilder.Thing.Relation.getRelatingReq(this.iid);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getRelationGetRelatingResPart().getRoleTypesList()))
                .map((roleTypeProto) => dependencies_internal_1.RoleTypeImpl.of(roleTypeProto));
        }
        findRole(map, role) {
            const iter = map.keys();
            let next = iter.next();
            while (!next.done) {
                const roleType = next.value;
                if (roleType.label.scopedName === role.label.scopedName) {
                    return roleType;
                }
                next = iter.next();
            }
            return null;
        }
    }
    RelationImpl.Remote = Remote;
})(RelationImpl = exports.RelationImpl || (exports.RelationImpl = {}));
