import { Thing as ThingProto } from "typedb-protocol/common/concept_pb";
import { Entity } from "../../api/concept/thing/Entity";
import { EntityType } from "../../api/concept/type/EntityType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { ThingImpl } from "../../dependencies_internal";
export declare class EntityImpl extends ThingImpl implements Entity {
    private readonly _type;
    constructor(iid: string, inferred: boolean, type: EntityType);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): Entity.Remote;
    get type(): EntityType;
    isEntity(): boolean;
    asEntity(): Entity;
}
export declare namespace EntityImpl {
    function of(thingProto: ThingProto): Entity;
    class Remote extends ThingImpl.Remote implements Entity.Remote {
        private readonly _type;
        constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: EntityType);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Entity.Remote;
        get type(): EntityType;
        isEntity(): boolean;
        asEntity(): Entity.Remote;
    }
}
