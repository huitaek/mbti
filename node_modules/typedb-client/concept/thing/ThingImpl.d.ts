import { Thing as ThingProto } from "typedb-protocol/common/concept_pb";
import { Transaction as TransactionProto } from "typedb-protocol/common/transaction_pb";
import { Concept } from "../../api/concept/Concept";
import { Attribute } from "../../api/concept/thing/Attribute";
import { Relation } from "../../api/concept/thing/Relation";
import { Thing } from "../../api/concept/thing/Thing";
import { AttributeType } from "../../api/concept/type/AttributeType";
import { RoleType } from "../../api/concept/type/RoleType";
import { ThingType } from "../../api/concept/type/ThingType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Stream } from "../../common/util/Stream";
import { ConceptImpl } from "../../dependencies_internal";
export declare abstract class ThingImpl extends ConceptImpl implements Thing {
    private readonly _iid;
    private readonly _inferred;
    protected constructor(iid: string, inferred: boolean);
    abstract asRemote(transaction: TypeDBTransaction): Thing.Remote;
    equals(concept: Concept): boolean;
    toString(): string;
    get iid(): string;
    abstract get type(): ThingType;
    get inferred(): boolean;
    isThing(): boolean;
    asThing(): Thing;
}
export declare namespace ThingImpl {
    abstract class Remote extends ConceptImpl.Remote implements Thing.Remote {
        private readonly _iid;
        private readonly _inferred;
        protected constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, ..._: any);
        abstract asRemote(transaction: TypeDBTransaction): Thing.Remote;
        equals(concept: Concept): boolean;
        toString(): string;
        get iid(): string;
        abstract get type(): ThingType;
        get inferred(): boolean;
        isThing(): boolean;
        asThing(): Thing.Remote;
        delete(): Promise<void>;
        getHas(): Stream<Attribute>;
        getHas(onlyKey: boolean): Stream<Attribute>;
        getHas(attributeType: AttributeType.Boolean): Stream<Attribute.Boolean>;
        getHas(attributeType: AttributeType.Long): Stream<Attribute.Long>;
        getHas(attributeType: AttributeType.Double): Stream<Attribute.Double>;
        getHas(attributeType: AttributeType.String): Stream<Attribute.String>;
        getHas(attributeType: AttributeType.DateTime): Stream<Attribute.DateTime>;
        getHas(attributeTypes: AttributeType[]): Stream<Attribute>;
        getPlaying(): Stream<RoleType>;
        getRelations(roleTypes?: RoleType[]): Stream<Relation>;
        isDeleted(): Promise<boolean>;
        setHas(attribute: Attribute): Promise<void>;
        unsetHas(attribute: Attribute): Promise<void>;
        protected execute(request: TransactionProto.Req): Promise<ThingProto.Res>;
        protected stream(request: TransactionProto.Req): Stream<ThingProto.ResPart>;
    }
    function of(thingProto: ThingProto): import("../..").Entity | Attribute;
}
