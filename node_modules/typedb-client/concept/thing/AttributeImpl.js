"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeImpl = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const ThingType_1 = require("../../api/concept/type/ThingType");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Bytes_1 = require("../../common/util/Bytes");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
var BAD_VALUE_TYPE = ErrorMessage_1.ErrorMessage.Concept.BAD_VALUE_TYPE;
var INVALID_CONCEPT_CASTING = ErrorMessage_1.ErrorMessage.Concept.INVALID_CONCEPT_CASTING;
class AttributeImpl extends dependencies_internal_1.ThingImpl {
    constructor(iid, inferred, type) {
        super(iid, inferred);
        this._type = type;
    }
    isAttribute() {
        return true;
    }
    get type() {
        return this._type;
    }
    isBoolean() {
        return false;
    }
    isDateTime() {
        return false;
    }
    isDouble() {
        return false;
    }
    isLong() {
        return false;
    }
    isString() {
        return false;
    }
    asAttribute() {
        return this;
    }
    asBoolean() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Boolean"));
    }
    asLong() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Long"));
    }
    asDouble() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Double"));
    }
    asString() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.String"));
    }
    asDateTime() {
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.DateTime"));
    }
}
exports.AttributeImpl = AttributeImpl;
(function (AttributeImpl) {
    function of(thingProto) {
        if (!thingProto)
            return null;
        const attrType = dependencies_internal_1.AttributeTypeImpl.of(thingProto.getType());
        const iid = Bytes_1.Bytes.bytesToHexString(thingProto.getIid_asU8());
        const inferred = thingProto.getInferred();
        switch (thingProto.getType().getValueType()) {
            case concept_pb_1.AttributeType.ValueType.BOOLEAN:
                return new AttributeImpl.Boolean(iid, inferred, attrType.asBoolean(), thingProto.getValue().getBoolean());
            case concept_pb_1.AttributeType.ValueType.LONG:
                return new AttributeImpl.Long(iid, inferred, attrType.asLong(), thingProto.getValue().getLong());
            case concept_pb_1.AttributeType.ValueType.DOUBLE:
                return new AttributeImpl.Double(iid, inferred, attrType.asDouble(), thingProto.getValue().getDouble());
            case concept_pb_1.AttributeType.ValueType.STRING:
                return new AttributeImpl.String(iid, inferred, attrType.asString(), thingProto.getValue().getString());
            case concept_pb_1.AttributeType.ValueType.DATETIME:
                return new AttributeImpl.DateTime(iid, inferred, attrType.asDateTime(), new Date(thingProto.getValue().getDateTime()));
            default:
                throw new TypeDBClientError_1.TypeDBClientError(BAD_VALUE_TYPE.message(thingProto.getType().getValueType()));
        }
    }
    AttributeImpl.of = of;
    class Remote extends dependencies_internal_1.ThingImpl.Remote {
        constructor(transaction, iid, inferred, type, ..._) {
            super(transaction, iid, inferred);
            this._type = type;
        }
        get type() {
            return this._type;
        }
        getOwners(ownerType) {
            let request;
            if (!ownerType) {
                request = RequestBuilder_1.RequestBuilder.Thing.Attribute.getOwnersReq(this.iid);
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Thing.Attribute.getOwnersByTypeReq(this.iid, ThingType_1.ThingType.proto(ownerType));
            }
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getAttributeGetOwnersResPart().getThingsList()))
                .map((thingProto) => dependencies_internal_1.ThingImpl.of(thingProto));
        }
        isAttribute() {
            return true;
        }
        isBoolean() {
            return false;
        }
        isDateTime() {
            return false;
        }
        isDouble() {
            return false;
        }
        isLong() {
            return false;
        }
        isString() {
            return false;
        }
        asAttribute() {
            return this;
        }
        asBoolean() {
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Boolean"));
        }
        asLong() {
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Long"));
        }
        asDouble() {
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.Double"));
        }
        asString() {
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.String"));
        }
        asDateTime() {
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "Attribute.DateTime"));
        }
    }
    AttributeImpl.Remote = Remote;
    class Boolean extends AttributeImpl {
        constructor(iid, inferred, type, value) {
            super(iid, inferred, type);
            this._value = value;
        }
        get className() {
            return "Attribute.Boolean";
        }
        asRemote(transaction) {
            return new AttributeImpl.Boolean.Remote(transaction, this.iid, this.inferred, this.type, this.value);
        }
        get type() {
            return super.type.asBoolean();
        }
        get value() {
            return this._value;
        }
        isBoolean() {
            return true;
        }
        asBoolean() {
            return this;
        }
    }
    AttributeImpl.Boolean = Boolean;
    (function (Boolean) {
        class Remote extends AttributeImpl.Remote {
            constructor(transaction, iid, inferred, type, value) {
                super(transaction, iid, inferred, type);
                this._value = value;
            }
            get className() {
                return "Attribute.Boolean";
            }
            asRemote(transaction) {
                return new AttributeImpl.Boolean.Remote(transaction, this.iid, this.inferred, this.type, this.value);
            }
            get type() {
                return super.type.asBoolean();
            }
            get value() {
                return this._value;
            }
            isBoolean() {
                return true;
            }
            asBoolean() {
                return this;
            }
        }
        Boolean.Remote = Remote;
    })(Boolean = AttributeImpl.Boolean || (AttributeImpl.Boolean = {}));
    class Long extends AttributeImpl {
        constructor(iid, inferred, type, value) {
            super(iid, inferred, type);
            this._value = value;
        }
        get className() {
            return "Attribute.Long";
        }
        asRemote(transaction) {
            return new AttributeImpl.Long.Remote(transaction, this.iid, this.inferred, this.type, this.value);
        }
        get type() {
            return super.type.asLong();
        }
        get value() {
            return this._value;
        }
        isLong() {
            return true;
        }
        asLong() {
            return this;
        }
    }
    AttributeImpl.Long = Long;
    (function (Long) {
        class Remote extends AttributeImpl.Remote {
            constructor(transaction, iid, inferred, type, value) {
                super(transaction, iid, inferred, type);
                this._value = value;
            }
            get className() {
                return "Attribute.Long";
            }
            asRemote(transaction) {
                return new AttributeImpl.Long.Remote(transaction, this.iid, this.inferred, this.type, this.value);
            }
            get type() {
                return super.type.asLong();
            }
            get value() {
                return this._value;
            }
            isLong() {
                return true;
            }
            asLong() {
                return this;
            }
        }
        Long.Remote = Remote;
    })(Long = AttributeImpl.Long || (AttributeImpl.Long = {}));
    class Double extends AttributeImpl {
        constructor(iid, inferred, type, value) {
            super(iid, inferred, type);
            this._value = value;
        }
        get className() {
            return "Attribute.Double";
        }
        asRemote(transaction) {
            return new AttributeImpl.Double.Remote(transaction, this.iid, this.inferred, this.type, this.value);
        }
        get type() {
            return super.type.asDouble();
        }
        get value() {
            return this._value;
        }
        isDouble() {
            return true;
        }
        asDouble() {
            return this;
        }
    }
    AttributeImpl.Double = Double;
    (function (Double) {
        class Remote extends AttributeImpl.Remote {
            constructor(transaction, iid, inferred, type, value) {
                super(transaction, iid, inferred, type);
                this._value = value;
            }
            get className() {
                return "Attribute.Double";
            }
            asRemote(transaction) {
                return new AttributeImpl.Double.Remote(transaction, this.iid, this.inferred, this.type, this.value);
            }
            get type() {
                return super.type.asDouble();
            }
            get value() {
                return this._value;
            }
            isDouble() {
                return true;
            }
            asDouble() {
                return this;
            }
        }
        Double.Remote = Remote;
    })(Double = AttributeImpl.Double || (AttributeImpl.Double = {}));
    class String extends AttributeImpl {
        constructor(iid, inferred, type, value) {
            super(iid, inferred, type);
            this._value = value;
        }
        get className() {
            return "Attribute.String";
        }
        asRemote(transaction) {
            return new AttributeImpl.String.Remote(transaction, this.iid, this.inferred, this.type, this.value);
        }
        get type() {
            return super.type.asString();
        }
        get value() {
            return this._value;
        }
        isString() {
            return true;
        }
        asString() {
            return this;
        }
    }
    AttributeImpl.String = String;
    (function (String) {
        class Remote extends AttributeImpl.Remote {
            constructor(transaction, iid, inferred, type, value) {
                super(transaction, iid, inferred, type);
                this._value = value;
            }
            get className() {
                return "Attribute.String";
            }
            asRemote(transaction) {
                return new AttributeImpl.String.Remote(transaction, this.iid, this.inferred, this.type, this.value);
            }
            get type() {
                return super.type.asString();
            }
            get value() {
                return this._value;
            }
            isString() {
                return true;
            }
            asString() {
                return this;
            }
        }
        String.Remote = Remote;
    })(String = AttributeImpl.String || (AttributeImpl.String = {}));
    class DateTime extends AttributeImpl {
        constructor(iid, inferred, type, value) {
            super(iid, inferred, type);
            this._value = value;
        }
        get className() {
            return "Attribute.DateTime";
        }
        asRemote(transaction) {
            return new AttributeImpl.DateTime.Remote(transaction, this.iid, this.inferred, this.type, this.value);
        }
        get type() {
            return super.type.asDateTime();
        }
        get value() {
            return this._value;
        }
        isDateTime() {
            return true;
        }
        asDateTime() {
            return this;
        }
    }
    AttributeImpl.DateTime = DateTime;
    (function (DateTime) {
        class Remote extends AttributeImpl.Remote {
            constructor(transaction, iid, inferred, type, value) {
                super(transaction, iid, inferred, type);
                this._value = value;
            }
            get className() {
                return "Attribute.DateTime.Remote";
            }
            asRemote(transaction) {
                return new AttributeImpl.DateTime.Remote(transaction, this.iid, this.inferred, this.type, this.value);
            }
            get type() {
                return super.type.asDateTime();
            }
            get value() {
                return this._value;
            }
            isDateTime() {
                return true;
            }
            asDateTime() {
                return this;
            }
        }
        DateTime.Remote = Remote;
    })(DateTime = AttributeImpl.DateTime || (AttributeImpl.DateTime = {}));
})(AttributeImpl = exports.AttributeImpl || (exports.AttributeImpl = {}));
