"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityImpl = void 0;
const Bytes_1 = require("../../common/util/Bytes");
const dependencies_internal_1 = require("../../dependencies_internal");
class EntityImpl extends dependencies_internal_1.ThingImpl {
    constructor(iid, inferred, type) {
        super(iid, inferred);
        this._type = type;
    }
    get className() {
        return "Entity";
    }
    asRemote(transaction) {
        return new EntityImpl.Remote(transaction, this.iid, this.inferred, this.type);
    }
    get type() {
        return this._type;
    }
    isEntity() {
        return true;
    }
    asEntity() {
        return this;
    }
}
exports.EntityImpl = EntityImpl;
(function (EntityImpl) {
    function of(thingProto) {
        if (!thingProto)
            return null;
        const iid = Bytes_1.Bytes.bytesToHexString(thingProto.getIid_asU8());
        return new EntityImpl(iid, thingProto.getInferred(), dependencies_internal_1.EntityTypeImpl.of(thingProto.getType()));
    }
    EntityImpl.of = of;
    class Remote extends dependencies_internal_1.ThingImpl.Remote {
        constructor(transaction, iid, inferred, type) {
            super(transaction, iid, inferred);
            this._type = type;
        }
        get className() {
            return "Entity";
        }
        asRemote(transaction) {
            return new EntityImpl.Remote(transaction, this.iid, this.inferred, this.type);
        }
        get type() {
            return this._type;
        }
        isEntity() {
            return true;
        }
        asEntity() {
            return this;
        }
    }
    EntityImpl.Remote = Remote;
})(EntityImpl = exports.EntityImpl || (exports.EntityImpl = {}));
