import { Thing as ThingProto } from "typedb-protocol/common/concept_pb";
import { Attribute } from "../../api/concept/thing/Attribute";
import { Thing } from "../../api/concept/thing/Thing";
import { AttributeType } from "../../api/concept/type/AttributeType";
import { ThingType } from "../../api/concept/type/ThingType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Stream } from "../../common/util/Stream";
import { ThingImpl } from "../../dependencies_internal";
export declare abstract class AttributeImpl extends ThingImpl implements Attribute {
    private readonly _type;
    protected constructor(iid: string, inferred: boolean, type: AttributeType);
    abstract asRemote(transaction: TypeDBTransaction): Attribute.Remote;
    isAttribute(): boolean;
    get type(): AttributeType;
    abstract get value(): boolean | string | number | Date;
    isBoolean(): boolean;
    isDateTime(): boolean;
    isDouble(): boolean;
    isLong(): boolean;
    isString(): boolean;
    asAttribute(): Attribute;
    asBoolean(): Attribute.Boolean;
    asLong(): Attribute.Long;
    asDouble(): Attribute.Double;
    asString(): Attribute.String;
    asDateTime(): Attribute.DateTime;
}
export declare namespace AttributeImpl {
    function of(thingProto: ThingProto): Attribute;
    abstract class Remote extends ThingImpl.Remote implements Attribute.Remote {
        private readonly _type;
        protected constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType, ..._: any);
        abstract asRemote(transaction: TypeDBTransaction): Attribute.Remote;
        get type(): AttributeType;
        abstract get value(): boolean | string | number | Date;
        getOwners(ownerType?: ThingType): Stream<Thing>;
        isAttribute(): boolean;
        isBoolean(): boolean;
        isDateTime(): boolean;
        isDouble(): boolean;
        isLong(): boolean;
        isString(): boolean;
        asAttribute(): Attribute.Remote;
        asBoolean(): Attribute.Boolean.Remote;
        asLong(): Attribute.Long.Remote;
        asDouble(): Attribute.Double.Remote;
        asString(): Attribute.String.Remote;
        asDateTime(): Attribute.DateTime.Remote;
    }
    class Boolean extends AttributeImpl implements Attribute.Boolean {
        private readonly _value;
        constructor(iid: string, inferred: boolean, type: AttributeType.Boolean, value: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Attribute.Boolean.Remote;
        get type(): AttributeType.Boolean;
        get value(): boolean;
        isBoolean(): boolean;
        asBoolean(): Attribute.Boolean;
    }
    namespace Boolean {
        class Remote extends AttributeImpl.Remote implements Attribute.Boolean.Remote {
            private readonly _value;
            constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType.Boolean, value: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): Attribute.Boolean.Remote;
            get type(): AttributeType.Boolean;
            get value(): boolean;
            isBoolean(): boolean;
            asBoolean(): Attribute.Boolean.Remote;
        }
    }
    class Long extends AttributeImpl implements Attribute.Long {
        private readonly _value;
        constructor(iid: string, inferred: boolean, type: AttributeType.Long, value: number);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Attribute.Long.Remote;
        get type(): AttributeType.Long;
        get value(): number;
        isLong(): boolean;
        asLong(): Attribute.Long;
    }
    namespace Long {
        class Remote extends AttributeImpl.Remote implements Attribute.Long.Remote {
            private readonly _value;
            constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType.Long, value: number);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): Attribute.Long.Remote;
            get type(): AttributeType.Long;
            get value(): number;
            isLong(): boolean;
            asLong(): Attribute.Long.Remote;
        }
    }
    class Double extends AttributeImpl implements Attribute.Double {
        private readonly _value;
        constructor(iid: string, inferred: boolean, type: AttributeType.Double, value: number);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Attribute.Double.Remote;
        get type(): AttributeType.Double;
        get value(): number;
        isDouble(): boolean;
        asDouble(): Attribute.Double;
    }
    namespace Double {
        class Remote extends AttributeImpl.Remote implements Attribute.Double.Remote {
            private readonly _value;
            constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType.Double, value: number);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): Attribute.Double.Remote;
            get type(): AttributeType.Double;
            get value(): number;
            isDouble(): boolean;
            asDouble(): Attribute.Double.Remote;
        }
    }
    class String extends AttributeImpl implements Attribute.String {
        private _value;
        constructor(iid: string, inferred: boolean, type: AttributeType.String, value: string);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Attribute.String.Remote;
        get type(): AttributeType.String;
        get value(): string;
        isString(): boolean;
        asString(): Attribute.String;
    }
    namespace String {
        class Remote extends AttributeImpl.Remote implements Attribute.String.Remote {
            private readonly _value;
            constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType.String, value: string);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): Attribute.String.Remote;
            get type(): AttributeType.String;
            get value(): string;
            isString(): boolean;
            asString(): Attribute.String.Remote;
        }
    }
    class DateTime extends AttributeImpl implements Attribute.DateTime {
        private readonly _value;
        constructor(iid: string, inferred: boolean, type: AttributeType.DateTime, value: Date);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): Attribute.DateTime.Remote;
        get type(): AttributeType.DateTime;
        get value(): Date;
        isDateTime(): boolean;
        asDateTime(): Attribute.DateTime;
    }
    namespace DateTime {
        class Remote extends AttributeImpl.Remote implements Attribute.DateTime.Remote {
            private readonly _value;
            constructor(transaction: TypeDBTransaction.Extended, iid: string, inferred: boolean, type: AttributeType.DateTime, value: Date);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): Attribute.DateTime.Remote;
            get type(): AttributeType.DateTime;
            get value(): Date;
            isDateTime(): boolean;
            asDateTime(): Attribute.DateTime.Remote;
        }
    }
}
