"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeTypeImpl = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const AttributeType_1 = require("../../api/concept/type/AttributeType");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
var BAD_VALUE_TYPE = ErrorMessage_1.ErrorMessage.Concept.BAD_VALUE_TYPE;
var INVALID_CONCEPT_CASTING = ErrorMessage_1.ErrorMessage.Concept.INVALID_CONCEPT_CASTING;
class AttributeTypeImpl extends dependencies_internal_1.ThingTypeImpl {
    constructor(name, root) {
        super(name, root);
    }
    get className() {
        return "AttributeType";
    }
    asRemote(transaction) {
        return new AttributeTypeImpl.Remote(transaction, this.label, this.root);
    }
    get valueType() {
        return AttributeType_1.AttributeType.ValueType.OBJECT;
    }
    isAttributeType() {
        return true;
    }
    asAttributeType() {
        return this;
    }
    isBoolean() {
        return false;
    }
    isDateTime() {
        return false;
    }
    isDouble() {
        return false;
    }
    isLong() {
        return false;
    }
    isString() {
        return false;
    }
    asBoolean() {
        if (this.root) {
            return new AttributeTypeImpl.Boolean(this.label.name, this.root);
        }
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Boolean"));
    }
    asLong() {
        if (this.root) {
            return new AttributeTypeImpl.Long(this.label.name, this.root);
        }
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Long"));
    }
    asDouble() {
        if (this.root) {
            return new AttributeTypeImpl.Double(this.label.name, this.root);
        }
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Double"));
    }
    asString() {
        if (this.root) {
            return new AttributeTypeImpl.String(this.label.name, this.root);
        }
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.String"));
    }
    asDateTime() {
        if (this.root) {
            return new AttributeTypeImpl.DateTime(this.label.name, this.root);
        }
        throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.DateTime"));
    }
}
exports.AttributeTypeImpl = AttributeTypeImpl;
(function (AttributeTypeImpl) {
    function of(attributeTypeProto) {
        if (!attributeTypeProto)
            return null;
        switch (attributeTypeProto.getValueType()) {
            case concept_pb_1.AttributeType.ValueType.BOOLEAN:
                return new AttributeTypeImpl.Boolean(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            case concept_pb_1.AttributeType.ValueType.LONG:
                return new AttributeTypeImpl.Long(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            case concept_pb_1.AttributeType.ValueType.DOUBLE:
                return new AttributeTypeImpl.Double(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            case concept_pb_1.AttributeType.ValueType.STRING:
                return new AttributeTypeImpl.String(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            case concept_pb_1.AttributeType.ValueType.DATETIME:
                return new AttributeTypeImpl.DateTime(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            case concept_pb_1.AttributeType.ValueType.OBJECT:
                return new AttributeTypeImpl(attributeTypeProto.getLabel(), attributeTypeProto.getRoot());
            default:
                throw new TypeDBClientError_1.TypeDBClientError(BAD_VALUE_TYPE.message(attributeTypeProto.getValueType()));
        }
    }
    AttributeTypeImpl.of = of;
    class Remote extends dependencies_internal_1.ThingTypeImpl.Remote {
        constructor(transaction, label, root) {
            super(transaction, label, root);
        }
        get className() {
            return "AttributeType";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.OBJECT;
        }
        isAttributeType() {
            return true;
        }
        asAttributeType() {
            return this;
        }
        isBoolean() {
            return false;
        }
        isDateTime() {
            return false;
        }
        isDouble() {
            return false;
        }
        isLong() {
            return false;
        }
        isString() {
            return false;
        }
        asBoolean() {
            if (this.root) {
                return new AttributeTypeImpl.Boolean.Remote(this.transaction, this.label, this.root);
            }
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Boolean"));
        }
        asLong() {
            if (this.root) {
                return new AttributeTypeImpl.Long.Remote(this.transaction, this.label, this.root);
            }
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Long"));
        }
        asDouble() {
            if (this.root) {
                return new AttributeTypeImpl.Double.Remote(this.transaction, this.label, this.root);
            }
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.Double"));
        }
        asString() {
            if (this.root) {
                return new AttributeTypeImpl.String.Remote(this.transaction, this.label, this.root);
            }
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.String"));
        }
        asDateTime() {
            if (this.root) {
                return new AttributeTypeImpl.DateTime.Remote(this.transaction, this.label, this.root);
            }
            throw new TypeDBClientError_1.TypeDBClientError(INVALID_CONCEPT_CASTING.message(this.className, "AttributeType.DateTime"));
        }
        setSupertype(type) {
            return super.setSupertype(type);
        }
        getSubtypes() {
            return super.getSupertypes();
        }
        getInstances() {
            return super.getInstances();
        }
        getOwners(onlyKey) {
            const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.getOwnersReq(this.label, !!onlyKey);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getAttributeTypeGetOwnersResPart().getThingTypesList()))
                .map((thingTypeProto) => dependencies_internal_1.ThingTypeImpl.of(thingTypeProto));
        }
        getOwnersExplicit(onlyKey) {
            const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.getOwnersExplicitReq(this.label, !!onlyKey);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getAttributeTypeGetOwnersExplicitResPart().getThingTypesList()))
                .map((thingTypeProto) => dependencies_internal_1.ThingTypeImpl.of(thingTypeProto));
        }
        getImpl(valueProto) {
            const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.getReq(this.label, valueProto);
            return this.execute(request)
                .then((attrProto) => dependencies_internal_1.AttributeImpl.of(attrProto.getAttributeTypeGetRes().getAttribute()));
        }
    }
    AttributeTypeImpl.Remote = Remote;
    class Boolean extends AttributeTypeImpl {
        constructor(label, root) {
            super(label, root);
        }
        get className() {
            return "AttributeType.Boolean";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.Boolean.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.BOOLEAN;
        }
        isBoolean() {
            return true;
        }
        asBoolean() {
            return this;
        }
    }
    AttributeTypeImpl.Boolean = Boolean;
    (function (Boolean) {
        class Remote extends AttributeTypeImpl.Remote {
            constructor(transaction, label, root) {
                super(transaction, label, root);
            }
            get className() {
                return "AttributeType.Boolean";
            }
            asRemote(transaction) {
                return new AttributeTypeImpl.Boolean.Remote(transaction, this.label, this.root);
            }
            get valueType() {
                return AttributeType_1.AttributeType.ValueType.BOOLEAN;
            }
            isBoolean() {
                return true;
            }
            asBoolean() {
                return this;
            }
            async get(value) {
                return await super.getImpl(RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueBooleanReq(value));
            }
            getInstances() {
                return super.getInstances();
            }
            getSubtypes() {
                return super.getSubtypes();
            }
            async put(value) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.putReq(this.label, RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueBooleanReq(value));
                return await this.execute(request).then((res) => dependencies_internal_1.AttributeImpl.of(res.getAttributeTypePutRes().getAttribute()));
            }
        }
        Boolean.Remote = Remote;
    })(Boolean = AttributeTypeImpl.Boolean || (AttributeTypeImpl.Boolean = {}));
    class Long extends AttributeTypeImpl {
        constructor(label, root) {
            super(label, root);
        }
        get className() {
            return "AttributeType.Long";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.Long.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.LONG;
        }
        isLong() {
            return true;
        }
        asLong() {
            return this;
        }
    }
    AttributeTypeImpl.Long = Long;
    (function (Long) {
        class Remote extends AttributeTypeImpl.Remote {
            constructor(transaction, label, root) {
                super(transaction, label, root);
            }
            get className() {
                return "AttributeType.Long";
            }
            asRemote(transaction) {
                return new AttributeTypeImpl.Long.Remote(transaction, this.label, this.root);
            }
            get valueType() {
                return AttributeType_1.AttributeType.ValueType.LONG;
            }
            isLong() {
                return true;
            }
            asLong() {
                return this;
            }
            getInstances() {
                return super.getInstances();
            }
            getSubtypes() {
                return super.getSubtypes();
            }
            async get(value) {
                return await super.getImpl(RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueLongReq(value));
            }
            async put(value) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.putReq(this.label, RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueLongReq(value));
                return await this.execute(request).then((res) => dependencies_internal_1.AttributeImpl.of(res.getAttributeTypePutRes().getAttribute()));
            }
        }
        Long.Remote = Remote;
    })(Long = AttributeTypeImpl.Long || (AttributeTypeImpl.Long = {}));
    class Double extends AttributeTypeImpl {
        constructor(label, root) {
            super(label, root);
        }
        get className() {
            return "AttributeType.Double";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.Double.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.DOUBLE;
        }
        isDouble() {
            return true;
        }
        asDouble() {
            return this;
        }
    }
    AttributeTypeImpl.Double = Double;
    (function (Double) {
        class Remote extends AttributeTypeImpl.Remote {
            constructor(transaction, label, root) {
                super(transaction, label, root);
            }
            get className() {
                return "AttributeType.Double";
            }
            asRemote(transaction) {
                return new AttributeTypeImpl.Double.Remote(transaction, this.label, this.root);
            }
            get valueType() {
                return AttributeType_1.AttributeType.ValueType.DOUBLE;
            }
            isDouble() {
                return true;
            }
            asDouble() {
                return this;
            }
            getInstances() {
                return super.getInstances();
            }
            getSubtypes() {
                return super.getSubtypes();
            }
            async get(value) {
                return await super.getImpl(RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueDoubleReq(value));
            }
            async put(value) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.putReq(this.label, RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueDoubleReq(value));
                return await this.execute(request).then((res) => dependencies_internal_1.AttributeImpl.of(res.getAttributeTypePutRes().getAttribute()));
            }
        }
        Double.Remote = Remote;
    })(Double = AttributeTypeImpl.Double || (AttributeTypeImpl.Double = {}));
    class String extends AttributeTypeImpl {
        constructor(label, root) {
            super(label, root);
        }
        get className() {
            return "AttributeType.String";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.String.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.STRING;
        }
        isString() {
            return true;
        }
        asString() {
            return this;
        }
    }
    AttributeTypeImpl.String = String;
    (function (String) {
        class Remote extends AttributeTypeImpl.Remote {
            constructor(transaction, label, root) {
                super(transaction, label, root);
            }
            get className() {
                return "AttributeType.String";
            }
            asRemote(transaction) {
                return new AttributeTypeImpl.String.Remote(transaction, this.label, this.root);
            }
            get valueType() {
                return AttributeType_1.AttributeType.ValueType.STRING;
            }
            isString() {
                return true;
            }
            asString() {
                return this;
            }
            getInstances() {
                return super.getInstances();
            }
            getSubtypes() {
                return super.getSubtypes();
            }
            async get(value) {
                return await super.getImpl(RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueStringReq(value));
            }
            async put(value) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.putReq(this.label, RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueStringReq(value));
                return await this.execute(request).then((res) => dependencies_internal_1.AttributeImpl.of(res.getAttributeTypePutRes().getAttribute()));
            }
            async getRegex() {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.getRegexReq(this.label);
                return await this.execute(request).then((res) => res.getAttributeTypeGetRegexRes().getRegex());
            }
            async setRegex(regex) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.setRegexReq(this.label, regex);
                await this.execute(request);
            }
        }
        String.Remote = Remote;
    })(String = AttributeTypeImpl.String || (AttributeTypeImpl.String = {}));
    class DateTime extends AttributeTypeImpl {
        constructor(label, root) {
            super(label, root);
        }
        get className() {
            return "AttributeType.DateTime";
        }
        asRemote(transaction) {
            return new AttributeTypeImpl.DateTime.Remote(transaction, this.label, this.root);
        }
        get valueType() {
            return AttributeType_1.AttributeType.ValueType.DATETIME;
        }
        isDateTime() {
            return true;
        }
        asDateTime() {
            return this;
        }
    }
    AttributeTypeImpl.DateTime = DateTime;
    (function (DateTime) {
        class Remote extends AttributeTypeImpl.Remote {
            constructor(transaction, label, root) {
                super(transaction, label, root);
            }
            get className() {
                return "AttributeType.DateTime";
            }
            asRemote(transaction) {
                return new AttributeTypeImpl.DateTime.Remote(transaction, this.label, this.root);
            }
            get valueType() {
                return AttributeType_1.AttributeType.ValueType.DATETIME;
            }
            isDateTime() {
                return true;
            }
            asDateTime() {
                return this;
            }
            getInstances() {
                return super.getInstances();
            }
            getSubtypes() {
                return super.getSubtypes();
            }
            async get(value) {
                return await super.getImpl(RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueDateTimeReq(value));
            }
            async put(value) {
                const request = RequestBuilder_1.RequestBuilder.Type.AttributeType.putReq(this.label, RequestBuilder_1.RequestBuilder.Thing.Attribute.attributeValueDateTimeReq(value));
                return await this.execute(request).then((res) => dependencies_internal_1.AttributeImpl.of(res.getAttributeTypePutRes().getAttribute()));
            }
        }
        DateTime.Remote = Remote;
    })(DateTime = AttributeTypeImpl.DateTime || (AttributeTypeImpl.DateTime = {}));
})(AttributeTypeImpl = exports.AttributeTypeImpl || (exports.AttributeTypeImpl = {}));
