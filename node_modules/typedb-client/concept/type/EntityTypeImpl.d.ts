import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Entity } from "../../api/concept/thing/Entity";
import { EntityType } from "../../api/concept/type/EntityType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { ThingTypeImpl } from "../../dependencies_internal";
export declare class EntityTypeImpl extends ThingTypeImpl implements EntityType {
    constructor(name: string, root: boolean);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): EntityType.Remote;
    isEntityType(): boolean;
    asEntityType(): EntityType;
}
export declare namespace EntityTypeImpl {
    function of(entityTypeProto: TypeProto): EntityTypeImpl;
    class Remote extends ThingTypeImpl.Remote implements EntityType.Remote {
        constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): EntityType.Remote;
        isEntityType(): boolean;
        asEntityType(): EntityType.Remote;
        create(): Promise<Entity>;
        setSupertype(superEntityType: EntityType): Promise<void>;
        getInstances(): Stream<Entity>;
        getSubtypes(): Stream<EntityType>;
    }
}
