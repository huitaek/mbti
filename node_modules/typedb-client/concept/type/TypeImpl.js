"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeImpl = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
const Label_1 = require("../../common/Label");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
var MISSING_LABEL = ErrorMessage_1.ErrorMessage.Concept.MISSING_LABEL;
class TypeImpl extends dependencies_internal_1.ConceptImpl {
    constructor(label, root) {
        super();
        if (!label)
            throw new TypeDBClientError_1.TypeDBClientError(MISSING_LABEL);
        this._label = label;
        this._root = root;
    }
    get root() {
        return this._root;
    }
    get label() {
        return this._label;
    }
    isType() {
        return true;
    }
    asType() {
        return this;
    }
    equals(concept) {
        if (!concept.isType())
            return false;
        return concept.asType().label.equals(this.label);
    }
    toString() {
        return `${this.className}[label:${this._label}]`;
    }
}
exports.TypeImpl = TypeImpl;
(function (TypeImpl) {
    function of(typeProto) {
        if (!typeProto)
            return null;
        switch (typeProto.getEncoding()) {
            case concept_pb_1.Type.Encoding.ROLE_TYPE:
                return dependencies_internal_1.RoleTypeImpl.of(typeProto);
            default:
                return dependencies_internal_1.ThingTypeImpl.of(typeProto);
        }
    }
    TypeImpl.of = of;
    class Remote extends dependencies_internal_1.ConceptImpl.Remote {
        constructor(transaction, label, root) {
            super(transaction);
            if (!label)
                throw new TypeDBClientError_1.TypeDBClientError(ErrorMessage_1.ErrorMessage.Concept.MISSING_LABEL);
            this._label = label;
            this._root = root;
        }
        get root() {
            return this._root;
        }
        get label() {
            return this._label;
        }
        isType() {
            return true;
        }
        asType() {
            return this;
        }
        equals(concept) {
            if (!concept.isType())
                return false;
            return concept.asType().label.equals(this.label);
        }
        toString() {
            return `${this.className}[label:${this._label}]`;
        }
        async delete() {
            const request = RequestBuilder_1.RequestBuilder.Type.deleteReq(this._label);
            await this.execute(request);
        }
        getSubtypes() {
            const request = RequestBuilder_1.RequestBuilder.Type.getSubtypesReq(this._label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getTypeGetSubtypesResPart().getTypesList()))
                .map((typeProto) => of(typeProto));
        }
        getSupertype() {
            const request = RequestBuilder_1.RequestBuilder.Type.getSupertypeReq(this._label);
            return this.execute(request).then((res) => of(res.getTypeGetSupertypeRes().getType()));
        }
        getSupertypes() {
            const request = RequestBuilder_1.RequestBuilder.Type.getSupertypesReq(this._label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getTypeGetSupertypesResPart().getTypesList()))
                .map((typeProto) => of(typeProto));
        }
        async setLabel(label) {
            const request = RequestBuilder_1.RequestBuilder.Type.setLabelReq(this._label, label);
            await this.execute(request);
            this._label = new Label_1.Label(this.label.scope, label);
        }
        async isAbstract() {
            const request = RequestBuilder_1.RequestBuilder.Type.isAbstractReq(this._label);
            return this.execute(request).then((res) => res.getTypeIsAbstractRes().getAbstract());
        }
        async execute(request) {
            return (await this.transaction.rpcExecute(request, false)).getTypeRes();
        }
        stream(request) {
            const resPartStream = this.transaction.rpcStream(request);
            return resPartStream.map((res) => res.getTypeResPart());
        }
    }
    TypeImpl.Remote = Remote;
})(TypeImpl = exports.TypeImpl || (exports.TypeImpl = {}));
