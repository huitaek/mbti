"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThingTypeImpl = void 0;
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const RoleType_1 = require("../../api/concept/type/RoleType");
const ThingType_1 = require("../../api/concept/type/ThingType");
const ErrorMessage_1 = require("../../common/errors/ErrorMessage");
const TypeDBClientError_1 = require("../../common/errors/TypeDBClientError");
const Label_1 = require("../../common/Label");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
var BAD_ENCODING = ErrorMessage_1.ErrorMessage.Concept.BAD_ENCODING;
class ThingTypeImpl extends dependencies_internal_1.TypeImpl {
    constructor(name, root) {
        super(Label_1.Label.of(name), root);
    }
    get className() {
        return "ThingType";
    }
    asRemote(transaction) {
        return new ThingTypeImpl.Remote(transaction, this.label, this.root);
    }
    isThingType() {
        return true;
    }
    asThingType() {
        return this;
    }
}
exports.ThingTypeImpl = ThingTypeImpl;
(function (ThingTypeImpl) {
    function of(thingTypeProto) {
        if (!thingTypeProto)
            return null;
        switch (thingTypeProto.getEncoding()) {
            case concept_pb_1.Type.Encoding.ENTITY_TYPE:
                return dependencies_internal_1.EntityTypeImpl.of(thingTypeProto);
            case concept_pb_1.Type.Encoding.RELATION_TYPE:
                return dependencies_internal_1.RelationTypeImpl.of(thingTypeProto);
            case concept_pb_1.Type.Encoding.ATTRIBUTE_TYPE:
                return dependencies_internal_1.AttributeTypeImpl.of(thingTypeProto);
            case concept_pb_1.Type.Encoding.THING_TYPE:
                return new ThingTypeImpl(thingTypeProto.getLabel(), thingTypeProto.getRoot());
            default:
                throw new TypeDBClientError_1.TypeDBClientError(BAD_ENCODING.message(thingTypeProto.getEncoding()));
        }
    }
    ThingTypeImpl.of = of;
    class Remote extends dependencies_internal_1.TypeImpl.Remote {
        constructor(transaction, label, root) {
            super(transaction, label, root);
        }
        get className() {
            return "ThingType";
        }
        asRemote(transaction) {
            return new ThingTypeImpl.Remote(transaction, this.label, this.root);
        }
        isThingType() {
            return true;
        }
        asThingType() {
            return this;
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getInstances() {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.getInstancesReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getThingTypeGetInstancesResPart().getThingsList()))
                .map((thingProto) => dependencies_internal_1.ThingImpl.of(thingProto));
        }
        getOwns(valueTypeOrKeysOnly, keysOnly) {
            let request;
            if (!valueTypeOrKeysOnly) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsReq(this.label, false);
            }
            else if (typeof valueTypeOrKeysOnly === "boolean") {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsReq(this.label, valueTypeOrKeysOnly);
            }
            else if (!keysOnly) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsByTypeReq(this.label, valueTypeOrKeysOnly.proto(), false);
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsByTypeReq(this.label, valueTypeOrKeysOnly.proto(), keysOnly);
            }
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getThingTypeGetOwnsResPart().getAttributeTypesList()))
                .map((attributeTypeProto) => dependencies_internal_1.AttributeTypeImpl.of(attributeTypeProto));
        }
        getOwnsExplicit(valueTypeOrKeysOnly, keysOnly) {
            let request;
            if (!valueTypeOrKeysOnly) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsExplicitReq(this.label, false);
            }
            else if (typeof valueTypeOrKeysOnly === "boolean") {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsExplicitReq(this.label, valueTypeOrKeysOnly);
            }
            else if (!keysOnly) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsExplicitByTypeReq(this.label, valueTypeOrKeysOnly.proto(), false);
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsExplicitByTypeReq(this.label, valueTypeOrKeysOnly.proto(), keysOnly);
            }
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getThingTypeGetOwnsExplicitResPart().getAttributeTypesList()))
                .map((attributeTypeProto) => dependencies_internal_1.AttributeTypeImpl.of(attributeTypeProto));
        }
        async getOwnsOverridden(attributeType) {
            const req = RequestBuilder_1.RequestBuilder.Type.ThingType.getOwnsOverriddenReq(this.label, ThingType_1.ThingType.proto(attributeType));
            return this.execute(req)
                .then((res) => dependencies_internal_1.AttributeTypeImpl.of(res.getThingTypeGetOwnsOverriddenRes().getAttributeType()));
        }
        async setOwns(attributeType, overriddenTypeOrIsKey, isKey) {
            let request;
            if (!overriddenTypeOrIsKey) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setOwnsReq(this.label, ThingType_1.ThingType.proto(attributeType), false);
            }
            else if (typeof overriddenTypeOrIsKey === "boolean") {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setOwnsReq(this.label, ThingType_1.ThingType.proto(attributeType), overriddenTypeOrIsKey);
            }
            else if (!isKey) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setOwnsOverriddenReq(this.label, ThingType_1.ThingType.proto(attributeType), ThingType_1.ThingType.proto(overriddenTypeOrIsKey), false);
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setOwnsOverriddenReq(this.label, ThingType_1.ThingType.proto(attributeType), ThingType_1.ThingType.proto(overriddenTypeOrIsKey), isKey);
            }
            await this.execute(request);
        }
        async unsetOwns(attributeType) {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.unsetOwnsReq(this.label, ThingType_1.ThingType.proto(attributeType));
            await this.execute(request);
        }
        getPlays() {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.getPlaysReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getThingTypeGetPlaysResPart().getRoleTypesList()))
                .map((roleProto) => dependencies_internal_1.RoleTypeImpl.of(roleProto));
        }
        getPlaysExplicit() {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.getPlaysExplicitReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getThingTypeGetPlaysExplicitResPart().getRoleTypesList()))
                .map((roleProto) => dependencies_internal_1.RoleTypeImpl.of(roleProto));
        }
        async getPlaysOverridden(role) {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.getPlaysOverriddenReq(this.label);
            return this.execute(request)
                .then((res) => dependencies_internal_1.RoleTypeImpl.of(res.getThingTypeGetPlaysOverriddenRes().getRoleType()));
        }
        async setPlays(role, overriddenType) {
            let request;
            if (!overriddenType) {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setPlaysReq(this.label, RoleType_1.RoleType.proto(role));
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Type.ThingType.setPlaysOverriddenReq(this.label, RoleType_1.RoleType.proto(role), RoleType_1.RoleType.proto(overriddenType));
            }
            await this.execute(request);
        }
        async unsetPlays(role) {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.unsetPlaysReq(this.label, RoleType_1.RoleType.proto(role));
            await this.execute(request);
        }
        async setAbstract() {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.setAbstractReq(this.label);
            await this.execute(request);
        }
        async unsetAbstract() {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.unsetAbstractReq(this.label);
            await this.execute(request);
        }
        async isDeleted() {
            return (await this.transaction.concepts.getThingType(this.label.name)) != null;
        }
        async setSupertype(thingType) {
            const request = RequestBuilder_1.RequestBuilder.Type.ThingType.setSupertypeReq(this.label, ThingType_1.ThingType.proto(thingType));
            await this.execute(request);
        }
    }
    ThingTypeImpl.Remote = Remote;
})(ThingTypeImpl = exports.ThingTypeImpl || (exports.ThingTypeImpl = {}));
