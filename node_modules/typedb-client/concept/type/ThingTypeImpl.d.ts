import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Thing } from "../../api/concept/thing/Thing";
import { AttributeType } from "../../api/concept/type/AttributeType";
import { RoleType } from "../../api/concept/type/RoleType";
import { ThingType } from "../../api/concept/type/ThingType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { TypeImpl } from "../../dependencies_internal";
export declare class ThingTypeImpl extends TypeImpl implements ThingType {
    constructor(name: string, root: boolean);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): ThingType.Remote;
    isThingType(): boolean;
    asThingType(): ThingType;
}
export declare namespace ThingTypeImpl {
    function of(thingTypeProto: TypeProto): AttributeType | ThingTypeImpl;
    class Remote extends TypeImpl.Remote implements ThingType.Remote {
        constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): ThingType.Remote;
        isThingType(): boolean;
        asThingType(): ThingType.Remote;
        getSubtypes(): Stream<ThingType>;
        getSupertype(): Promise<ThingType>;
        getSupertypes(): Stream<ThingType>;
        getInstances(): Stream<Thing>;
        getOwns(): Stream<AttributeType>;
        getOwns(valueType: AttributeType.ValueType): Stream<AttributeType>;
        getOwns(keysOnly: boolean): Stream<AttributeType>;
        getOwns(valueType: AttributeType.ValueType, keysOnly: boolean): Stream<AttributeType>;
        getOwnsExplicit(): Stream<AttributeType>;
        getOwnsExplicit(valueType: AttributeType.ValueType): Stream<AttributeType>;
        getOwnsExplicit(keysOnly: boolean): Stream<AttributeType>;
        getOwnsExplicit(valueType: AttributeType.ValueType, keysOnly: boolean): Stream<AttributeType>;
        getOwnsOverridden(attributeType: AttributeType): Promise<AttributeType>;
        setOwns(attributeType: AttributeType): Promise<void>;
        setOwns(attributeType: AttributeType, isKey: boolean): Promise<void>;
        setOwns(attributeType: AttributeType, overriddenType: AttributeType): Promise<void>;
        unsetOwns(attributeType: AttributeType): Promise<void>;
        getPlays(): Stream<RoleType>;
        getPlaysExplicit(): Stream<RoleType>;
        getPlaysOverridden(role: RoleType): Promise<RoleType>;
        setPlays(role: RoleType): Promise<void>;
        unsetPlays(role: RoleType): Promise<void>;
        setAbstract(): Promise<void>;
        unsetAbstract(): Promise<void>;
        isDeleted(): Promise<boolean>;
        protected setSupertype(thingType: ThingType): Promise<void>;
    }
}
