"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleTypeImpl = void 0;
const Label_1 = require("../../common/Label");
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
class RoleTypeImpl extends dependencies_internal_1.TypeImpl {
    constructor(scope, label, root) {
        super(Label_1.Label.scoped(scope, label), root);
    }
    get className() {
        return "RoleType";
    }
    asRemote(transaction) {
        return new RoleTypeImpl.Remote(transaction, this.label, this.root);
    }
    isRoleType() {
        return true;
    }
    asRoleType() {
        return this;
    }
}
exports.RoleTypeImpl = RoleTypeImpl;
(function (RoleTypeImpl) {
    function of(typeProto) {
        if (!typeProto)
            return null;
        return new RoleTypeImpl(typeProto.getScope(), typeProto.getLabel(), typeProto.getRoot());
    }
    RoleTypeImpl.of = of;
    class Remote extends dependencies_internal_1.TypeImpl.Remote {
        constructor(transaction, label, root) {
            super(transaction, label, root);
        }
        get className() {
            return "RoleType";
        }
        asRemote(transaction) {
            return new RoleTypeImpl.Remote(transaction, this.label, this.root);
        }
        isRoleType() {
            return true;
        }
        asRoleType() {
            return this;
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        getSupertype() {
            return super.getSupertype();
        }
        getSupertypes() {
            return super.getSupertypes();
        }
        getRelationType() {
            return this.transaction.concepts.getRelationType(this.label.scope);
        }
        getRelationTypes() {
            const request = RequestBuilder_1.RequestBuilder.Type.RoleType.getRelationTypesReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getRoleTypeGetRelationTypesResPart().getRelationTypesList()))
                .map((res) => dependencies_internal_1.RelationTypeImpl.of(res));
        }
        getPlayers() {
            const request = RequestBuilder_1.RequestBuilder.Type.RoleType.getPlayersReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => Stream_1.Stream.array(resPart.getRoleTypeGetPlayersResPart().getThingTypesList()))
                .map((thing) => dependencies_internal_1.ThingTypeImpl.of(thing));
        }
        async isDeleted() {
            const relationType = await this.getRelationType();
            return !(relationType) || (!(await relationType.asRemote(this.transaction).getRelates(this.label.name)));
        }
    }
    RoleTypeImpl.Remote = Remote;
})(RoleTypeImpl = exports.RoleTypeImpl || (exports.RoleTypeImpl = {}));
