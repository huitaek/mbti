import { Attribute as AttributeProto, Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Attribute } from "../../api/concept/thing/Attribute";
import { AttributeType } from "../../api/concept/type/AttributeType";
import { ThingType } from "../../api/concept/type/ThingType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { ThingTypeImpl } from "../../dependencies_internal";
export declare class AttributeTypeImpl extends ThingTypeImpl implements AttributeType {
    constructor(name: string, root: boolean);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): AttributeType.Remote;
    get valueType(): AttributeType.ValueType;
    isAttributeType(): boolean;
    asAttributeType(): AttributeType;
    isBoolean(): boolean;
    isDateTime(): boolean;
    isDouble(): boolean;
    isLong(): boolean;
    isString(): boolean;
    asBoolean(): AttributeType.Boolean;
    asLong(): AttributeType.Long;
    asDouble(): AttributeType.Double;
    asString(): AttributeType.String;
    asDateTime(): AttributeType.DateTime;
}
export declare namespace AttributeTypeImpl {
    function of(attributeTypeProto: TypeProto): AttributeType;
    class Remote extends ThingTypeImpl.Remote implements AttributeType.Remote {
        constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.Remote;
        get valueType(): AttributeType.ValueType;
        isAttributeType(): boolean;
        asAttributeType(): AttributeType.Remote;
        isBoolean(): boolean;
        isDateTime(): boolean;
        isDouble(): boolean;
        isLong(): boolean;
        isString(): boolean;
        asBoolean(): AttributeType.Boolean.Remote;
        asLong(): AttributeType.Long.Remote;
        asDouble(): AttributeType.Double.Remote;
        asString(): AttributeType.String.Remote;
        asDateTime(): AttributeType.DateTime.Remote;
        setSupertype(type: AttributeType): Promise<void>;
        getSubtypes(): Stream<AttributeType>;
        getInstances(): Stream<Attribute>;
        getOwners(onlyKey?: boolean): Stream<ThingType>;
        getOwnersExplicit(onlyKey?: boolean): Stream<ThingType>;
        protected getImpl(valueProto: AttributeProto.Value): Promise<Attribute>;
    }
    class Boolean extends AttributeTypeImpl implements AttributeType.Boolean {
        constructor(label: string, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.Boolean.Remote;
        get valueType(): AttributeType.ValueType;
        isBoolean(): boolean;
        asBoolean(): AttributeType.Boolean;
    }
    namespace Boolean {
        class Remote extends AttributeTypeImpl.Remote implements AttributeType.Boolean.Remote {
            constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): AttributeType.Boolean.Remote;
            get valueType(): AttributeType.ValueType;
            isBoolean(): boolean;
            asBoolean(): AttributeType.Boolean.Remote;
            get(value: boolean): Promise<Attribute.Boolean>;
            getInstances(): Stream<Attribute.Boolean>;
            getSubtypes(): Stream<AttributeType.Boolean.Remote>;
            put(value: boolean): Promise<Attribute.Boolean>;
        }
    }
    class Long extends AttributeTypeImpl implements AttributeType.Long {
        constructor(label: string, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.Long.Remote;
        get valueType(): AttributeType.ValueType;
        isLong(): boolean;
        asLong(): AttributeType.Long;
    }
    namespace Long {
        class Remote extends AttributeTypeImpl.Remote implements AttributeType.Long.Remote {
            constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): AttributeType.Long.Remote;
            get valueType(): AttributeType.ValueType;
            isLong(): boolean;
            asLong(): AttributeType.Long.Remote;
            getInstances(): Stream<Attribute.Long>;
            getSubtypes(): Stream<AttributeType.Long.Remote>;
            get(value: number): Promise<Attribute.Long>;
            put(value: number): Promise<Attribute.Long>;
        }
    }
    class Double extends AttributeTypeImpl implements AttributeType.Double {
        constructor(label: string, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.Double.Remote;
        get valueType(): AttributeType.ValueType;
        isDouble(): boolean;
        asDouble(): AttributeType.Double;
    }
    namespace Double {
        class Remote extends AttributeTypeImpl.Remote implements AttributeType.Double.Remote {
            constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): AttributeType.Double.Remote;
            get valueType(): AttributeType.ValueType;
            isDouble(): boolean;
            asDouble(): AttributeType.Double.Remote;
            getInstances(): Stream<Attribute.Double>;
            getSubtypes(): Stream<AttributeType.Double.Remote>;
            get(value: number): Promise<Attribute.Double>;
            put(value: number): Promise<Attribute.Double>;
        }
    }
    class String extends AttributeTypeImpl implements AttributeType.String {
        constructor(label: string, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.String.Remote;
        get valueType(): AttributeType.ValueType;
        isString(): boolean;
        asString(): AttributeType.String;
    }
    namespace String {
        class Remote extends AttributeTypeImpl.Remote implements AttributeType.String.Remote {
            constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): AttributeType.String.Remote;
            get valueType(): AttributeType.ValueType;
            isString(): boolean;
            asString(): AttributeType.String.Remote;
            getInstances(): Stream<Attribute.String>;
            getSubtypes(): Stream<AttributeType.String.Remote>;
            get(value: string): Promise<Attribute.String>;
            put(value: string): Promise<Attribute.String>;
            getRegex(): Promise<string>;
            setRegex(regex: string): Promise<void>;
        }
    }
    class DateTime extends AttributeTypeImpl implements AttributeType.DateTime {
        constructor(label: string, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): AttributeType.DateTime.Remote;
        get valueType(): AttributeType.ValueType;
        isDateTime(): boolean;
        asDateTime(): AttributeType.DateTime;
    }
    namespace DateTime {
        class Remote extends AttributeTypeImpl.Remote implements AttributeType.DateTime.Remote {
            constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
            protected get className(): string;
            asRemote(transaction: TypeDBTransaction): AttributeType.DateTime.Remote;
            get valueType(): AttributeType.ValueType;
            isDateTime(): boolean;
            asDateTime(): AttributeType.DateTime.Remote;
            getInstances(): Stream<Attribute.DateTime>;
            getSubtypes(): Stream<AttributeType.DateTime.Remote>;
            get(value: Date): Promise<Attribute.DateTime>;
            put(value: Date): Promise<Attribute.DateTime>;
        }
    }
}
