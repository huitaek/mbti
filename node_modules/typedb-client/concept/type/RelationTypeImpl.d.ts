import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Relation } from "../../api/concept/thing/Relation";
import { RelationType } from "../../api/concept/type/RelationType";
import { RoleType } from "../../api/concept/type/RoleType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { ThingTypeImpl } from "../../dependencies_internal";
export declare class RelationTypeImpl extends ThingTypeImpl implements RelationType {
    constructor(label: string, root: boolean);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): RelationType.Remote;
    isRelationType(): boolean;
    asRelationType(): RelationType;
}
export declare namespace RelationTypeImpl {
    function of(relationTypeProto: TypeProto): RelationTypeImpl;
    class Remote extends ThingTypeImpl.Remote implements RelationType.Remote {
        constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): RelationType.Remote;
        isRelationType(): boolean;
        asRelationType(): RelationType.Remote;
        create(): Promise<Relation>;
        getSubtypes(): Stream<RelationType>;
        setSupertype(relationType: RelationType): Promise<void>;
        getInstances(): Stream<Relation>;
        getRelates(): Stream<RoleType>;
        getRelates(roleLabel: string): Promise<RoleType>;
        getRelatesExplicit(): Stream<RoleType>;
        getRelatesOverridden(roleLabel: string): Promise<RoleType>;
        setRelates(roleLabel: string, overriddenLabel?: string): Promise<void>;
        unsetRelates(roleLabel: string): Promise<void>;
    }
}
