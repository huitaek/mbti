"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationTypeImpl = void 0;
const RequestBuilder_1 = require("../../common/rpc/RequestBuilder");
const Stream_1 = require("../../common/util/Stream");
const dependencies_internal_1 = require("../../dependencies_internal");
class RelationTypeImpl extends dependencies_internal_1.ThingTypeImpl {
    constructor(label, root) {
        super(label, root);
    }
    get className() {
        return "RelationType";
    }
    asRemote(transaction) {
        return new RelationTypeImpl.Remote(transaction, this.label, this.root);
    }
    isRelationType() {
        return true;
    }
    asRelationType() {
        return this;
    }
}
exports.RelationTypeImpl = RelationTypeImpl;
(function (RelationTypeImpl) {
    function of(relationTypeProto) {
        if (!relationTypeProto)
            return null;
        return new RelationTypeImpl(relationTypeProto.getLabel(), relationTypeProto.getRoot());
    }
    RelationTypeImpl.of = of;
    class Remote extends dependencies_internal_1.ThingTypeImpl.Remote {
        constructor(transaction, label, root) {
            super(transaction, label, root);
        }
        get className() {
            return "RelationType";
        }
        asRemote(transaction) {
            return new RelationTypeImpl.Remote(transaction, this.label, this.root);
        }
        isRelationType() {
            return true;
        }
        asRelationType() {
            return this;
        }
        async create() {
            const request = RequestBuilder_1.RequestBuilder.Type.RelationType.createReq(this.label);
            return this.execute(request).then((res) => dependencies_internal_1.RelationImpl.of(res.getRelationTypeCreateRes().getRelation()));
        }
        getSubtypes() {
            return super.getSubtypes();
        }
        setSupertype(relationType) {
            return super.setSupertype(relationType);
        }
        getInstances() {
            return super.getInstances();
        }
        getRelates(roleLabel) {
            if (roleLabel) {
                const request = RequestBuilder_1.RequestBuilder.Type.RelationType.getRelatesByRoleReq(this.label, roleLabel);
                return this.execute(request)
                    .then((res) => dependencies_internal_1.RoleTypeImpl.of(res.getRelationTypeGetRelatesForRoleLabelRes().getRoleType()));
            }
            else {
                const request = RequestBuilder_1.RequestBuilder.Type.RelationType.getRelatesReq(this.label);
                return this.stream(request)
                    .flatMap((resPart) => {
                    return Stream_1.Stream.array(resPart.getRelationTypeGetRelatesResPart().getRoleTypesList());
                })
                    .map((roleProto) => {
                    return dependencies_internal_1.RoleTypeImpl.of(roleProto);
                });
            }
        }
        getRelatesExplicit() {
            const request = RequestBuilder_1.RequestBuilder.Type.RelationType.getRelatesExplicitReq(this.label);
            return this.stream(request)
                .flatMap((resPart) => {
                return Stream_1.Stream.array(resPart.getRelationTypeGetRelatesExplicitResPart().getRoleTypesList());
            })
                .map((roleProto) => {
                return dependencies_internal_1.RoleTypeImpl.of(roleProto);
            });
        }
        async getRelatesOverridden(roleLabel) {
            const request = RequestBuilder_1.RequestBuilder.Type.RelationType.getRelatesOverridden(this.label, roleLabel);
            return this.execute(request)
                .then((res) => dependencies_internal_1.RoleTypeImpl.of(res.getRelationTypeGetRelatesOverriddenRes().getRoleType()));
        }
        async setRelates(roleLabel, overriddenLabel) {
            let request;
            if (overriddenLabel) {
                request = RequestBuilder_1.RequestBuilder.Type.RelationType.setRelatesOverriddenReq(this.label, roleLabel, overriddenLabel);
            }
            else {
                request = RequestBuilder_1.RequestBuilder.Type.RelationType.setRelatesReq(this.label, roleLabel);
            }
            await this.execute(request);
        }
        async unsetRelates(roleLabel) {
            const request = RequestBuilder_1.RequestBuilder.Type.RelationType.unsetRelatesReq(this.label, roleLabel);
            await this.execute(request);
        }
    }
    RelationTypeImpl.Remote = Remote;
})(RelationTypeImpl = exports.RelationTypeImpl || (exports.RelationTypeImpl = {}));
