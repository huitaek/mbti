import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { RelationType } from "../../api/concept/type/RelationType";
import { RoleType } from "../../api/concept/type/RoleType";
import { ThingType } from "../../api/concept/type/ThingType";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { TypeImpl } from "../../dependencies_internal";
export declare class RoleTypeImpl extends TypeImpl implements RoleType {
    constructor(scope: string, label: string, root: boolean);
    protected get className(): string;
    asRemote(transaction: TypeDBTransaction): RoleType.Remote;
    isRoleType(): boolean;
    asRoleType(): RoleType;
}
export declare namespace RoleTypeImpl {
    function of(typeProto: TypeProto): RoleTypeImpl;
    class Remote extends TypeImpl.Remote implements RoleType.Remote {
        constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        protected get className(): string;
        asRemote(transaction: TypeDBTransaction): RoleType.Remote;
        isRoleType(): boolean;
        asRoleType(): RoleType.Remote;
        getSubtypes(): Stream<RoleType>;
        getSupertype(): Promise<RoleType>;
        getSupertypes(): Stream<RoleType>;
        getRelationType(): Promise<RelationType>;
        getRelationTypes(): Stream<RelationType>;
        getPlayers(): Stream<ThingType>;
        isDeleted(): Promise<boolean>;
    }
}
