import { Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { Transaction as TransactionProto } from "typedb-protocol/common/transaction_pb";
import { Concept } from "../../api/concept/Concept";
import { Type } from "../../api/concept/type/Type";
import { TypeDBTransaction } from "../../api/connection/TypeDBTransaction";
import { Label } from "../../common/Label";
import { Stream } from "../../common/util/Stream";
import { ConceptImpl, RoleTypeImpl, ThingTypeImpl } from "../../dependencies_internal";
export declare abstract class TypeImpl extends ConceptImpl implements Type {
    private readonly _label;
    private readonly _root;
    protected constructor(label: Label, root: boolean);
    abstract asRemote(transaction: TypeDBTransaction): Type.Remote;
    get root(): boolean;
    get label(): Label;
    isType(): boolean;
    asType(): Type;
    equals(concept: Concept): boolean;
    toString(): string;
}
export declare namespace TypeImpl {
    function of(typeProto: TypeProto): import("../..").AttributeType | RoleTypeImpl | ThingTypeImpl;
    abstract class Remote extends ConceptImpl.Remote implements Type.Remote {
        private _label;
        private readonly _root;
        protected constructor(transaction: TypeDBTransaction.Extended, label: Label, root: boolean);
        abstract asRemote(transaction: TypeDBTransaction): Type.Remote;
        get root(): boolean;
        get label(): Label;
        isType(): boolean;
        asType(): Type.Remote;
        equals(concept: Concept): boolean;
        toString(): string;
        delete(): Promise<void>;
        getSubtypes(): Stream<Type>;
        getSupertype(): Promise<Type>;
        getSupertypes(): Stream<Type>;
        setLabel(label: string): Promise<void>;
        isAbstract(): Promise<boolean>;
        protected execute(request: TransactionProto.Req): Promise<TypeProto.Res>;
        protected stream(request: TransactionProto.Req): Stream<TypeProto.ResPart>;
    }
}
