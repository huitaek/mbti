"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBClientError = void 0;
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const ErrorMessage_1 = require("./ErrorMessage");
var CLUSTER_REPLICA_NOT_PRIMARY = ErrorMessage_1.ErrorMessage.Client.CLUSTER_REPLICA_NOT_PRIMARY;
var CLUSTER_TOKEN_CREDENTIAL_INVALID = ErrorMessage_1.ErrorMessage.Client.CLUSTER_TOKEN_CREDENTIAL_INVALID;
var UNABLE_TO_CONNECT = ErrorMessage_1.ErrorMessage.Client.UNABLE_TO_CONNECT;
function isReplicaNotPrimaryError(e) {
    return e.message.includes("[RPL01]");
}
function isTokenCredentialInvalidError(e) {
    return e.message.includes("[CLS08]");
}
function isServiceError(e) {
    return "code" in e;
}
class TypeDBClientError extends Error {
    constructor(error) {
        if (typeof error === "string")
            super(error);
        else if (error instanceof ErrorMessage_1.ErrorMessage) {
            super(error.toString());
            this._messageTemplate = error;
        }
        // TODO: clean this up once we have our own error protocol
        else if (isServiceError(error)) {
            if ([constants_1.Status.UNAVAILABLE, constants_1.Status.UNKNOWN, constants_1.Status.CANCELLED].includes(error.code) || error.message.includes("Received RST_STREAM")) {
                super(UNABLE_TO_CONNECT.message());
                this._messageTemplate = UNABLE_TO_CONNECT;
            }
            else if (isReplicaNotPrimaryError(error)) {
                super(CLUSTER_REPLICA_NOT_PRIMARY.message());
                this._messageTemplate = CLUSTER_REPLICA_NOT_PRIMARY;
            }
            else if (isTokenCredentialInvalidError(error)) {
                super(CLUSTER_TOKEN_CREDENTIAL_INVALID.message());
                this._messageTemplate = CLUSTER_TOKEN_CREDENTIAL_INVALID;
            }
            else if (error.code === constants_1.Status.INTERNAL)
                super(error.details);
            else
                super(error.toString());
        }
        else
            super(error.toString());
        this.name = "TypeDBClientError"; // Required to correctly report error type in default throw
    }
    get messageTemplate() {
        return this._messageTemplate;
    }
}
exports.TypeDBClientError = TypeDBClientError;
