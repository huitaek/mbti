"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestBuilder = void 0;
const cluster_database_pb_1 = require("typedb-protocol/cluster/cluster_database_pb");
const cluster_server_pb_1 = require("typedb-protocol/cluster/cluster_server_pb");
const cluster_user_pb_1 = require("typedb-protocol/cluster/cluster_user_pb");
const concept_pb_1 = require("typedb-protocol/common/concept_pb");
const logic_pb_1 = require("typedb-protocol/common/logic_pb");
const query_pb_1 = require("typedb-protocol/common/query_pb");
const session_pb_1 = require("typedb-protocol/common/session_pb");
const transaction_pb_1 = require("typedb-protocol/common/transaction_pb");
const core_database_pb_1 = require("typedb-protocol/core/core_database_pb");
const uuid = __importStar(require("uuid"));
const Bytes_1 = require("../util/Bytes");
/* eslint no-inner-declarations: "off" */
var RequestBuilder;
(function (RequestBuilder) {
    let Core;
    (function (Core) {
        let DatabaseManager;
        (function (DatabaseManager) {
            function createReq(name) {
                return new core_database_pb_1.CoreDatabaseManager.Create.Req().setName(name);
            }
            DatabaseManager.createReq = createReq;
            function containsReq(name) {
                return new core_database_pb_1.CoreDatabaseManager.Contains.Req().setName(name);
            }
            DatabaseManager.containsReq = containsReq;
            function allReq() {
                return new core_database_pb_1.CoreDatabaseManager.All.Req();
            }
            DatabaseManager.allReq = allReq;
        })(DatabaseManager = Core.DatabaseManager || (Core.DatabaseManager = {}));
        let Database;
        (function (Database) {
            function schemaReq(name) {
                return new core_database_pb_1.CoreDatabase.Schema.Req().setName(name);
            }
            Database.schemaReq = schemaReq;
            function deleteReq(name) {
                return new core_database_pb_1.CoreDatabase.Delete.Req().setName(name);
            }
            Database.deleteReq = deleteReq;
        })(Database = Core.Database || (Core.Database = {}));
    })(Core = RequestBuilder.Core || (RequestBuilder.Core = {}));
    let Cluster;
    (function (Cluster) {
        let ServerManager;
        (function (ServerManager) {
            function allReq() {
                return new cluster_server_pb_1.ServerManager.All.Req();
            }
            ServerManager.allReq = allReq;
        })(ServerManager = Cluster.ServerManager || (Cluster.ServerManager = {}));
        let UserManager;
        (function (UserManager) {
            function containsReq(name) {
                return new cluster_user_pb_1.ClusterUserManager.Contains.Req().setUsername(name);
            }
            UserManager.containsReq = containsReq;
            function createReq(name, password) {
                return new cluster_user_pb_1.ClusterUserManager.Create.Req().setUsername(name).setPassword(password);
            }
            UserManager.createReq = createReq;
            function allReq() {
                return new cluster_user_pb_1.ClusterUserManager.All.Req();
            }
            UserManager.allReq = allReq;
        })(UserManager = Cluster.UserManager || (Cluster.UserManager = {}));
        let User;
        (function (User) {
            function passwordReq(name, password) {
                return new cluster_user_pb_1.ClusterUser.Password.Req().setUsername(name).setPassword(password);
            }
            User.passwordReq = passwordReq;
            function tokenReq(username) {
                return new cluster_user_pb_1.ClusterUser.Token.Req().setUsername(username);
            }
            User.tokenReq = tokenReq;
            function deleteReq(name) {
                return new cluster_user_pb_1.ClusterUser.Delete.Req().setUsername(name);
            }
            User.deleteReq = deleteReq;
        })(User = Cluster.User || (Cluster.User = {}));
        let DatabaseManager;
        (function (DatabaseManager) {
            function getReq(name) {
                return new cluster_database_pb_1.ClusterDatabaseManager.Get.Req().setName(name);
            }
            DatabaseManager.getReq = getReq;
            function allReq() {
                return new cluster_database_pb_1.ClusterDatabaseManager.All.Req();
            }
            DatabaseManager.allReq = allReq;
        })(DatabaseManager = Cluster.DatabaseManager || (Cluster.DatabaseManager = {}));
    })(Cluster = RequestBuilder.Cluster || (RequestBuilder.Cluster = {}));
    let Session;
    (function (Session) {
        function openReq(database, type, options) {
            return new session_pb_1.Session.Open.Req().setDatabase(database).setType(type).setOptions(options);
        }
        Session.openReq = openReq;
        function closeReq(id) {
            return new session_pb_1.Session.Close.Req().setSessionId(id);
        }
        Session.closeReq = closeReq;
        function pulseReq(id) {
            return new session_pb_1.Session.Pulse.Req().setSessionId(id);
        }
        Session.pulseReq = pulseReq;
    })(Session = RequestBuilder.Session || (RequestBuilder.Session = {}));
    let Transaction;
    (function (Transaction) {
        function clientReq(reqs) {
            return new transaction_pb_1.Transaction.Client().setReqsList(reqs);
        }
        Transaction.clientReq = clientReq;
        function openReq(sessionId, type, options, latencyMillis) {
            return new transaction_pb_1.Transaction.Req().setOpenReq(new transaction_pb_1.Transaction.Open.Req().setSessionId(sessionId).setType(type).setOptions(options).setNetworkLatencyMillis(latencyMillis));
        }
        Transaction.openReq = openReq;
        function commitReq() {
            return new transaction_pb_1.Transaction.Req().setCommitReq(new transaction_pb_1.Transaction.Commit.Req());
        }
        Transaction.commitReq = commitReq;
        function rollbackReq() {
            return new transaction_pb_1.Transaction.Req().setRollbackReq(new transaction_pb_1.Transaction.Rollback.Req());
        }
        Transaction.rollbackReq = rollbackReq;
        function streamReq(requestId) {
            return new transaction_pb_1.Transaction.Req().setReqId(uuid.parse(requestId)).setStreamReq(new transaction_pb_1.Transaction.Stream.Req());
        }
        Transaction.streamReq = streamReq;
    })(Transaction = RequestBuilder.Transaction || (RequestBuilder.Transaction = {}));
    let LogicManager;
    (function (LogicManager) {
        function logicManagerReq(logicReq) {
            return new transaction_pb_1.Transaction.Req().setLogicManagerReq(logicReq);
        }
        LogicManager.logicManagerReq = logicManagerReq;
        function putRuleReq(label, when, then) {
            return logicManagerReq(new logic_pb_1.LogicManager.Req().setPutRuleReq(new logic_pb_1.LogicManager.PutRule.Req().setLabel(label).setWhen(when).setThen(then)));
        }
        LogicManager.putRuleReq = putRuleReq;
        function getRuleReq(label) {
            return logicManagerReq(new logic_pb_1.LogicManager.Req().setGetRuleReq(new logic_pb_1.LogicManager.GetRule.Req().setLabel(label)));
        }
        LogicManager.getRuleReq = getRuleReq;
        function getRulesReq() {
            return logicManagerReq(new logic_pb_1.LogicManager.Req().setGetRulesReq(new logic_pb_1.LogicManager.GetRules()));
        }
        LogicManager.getRulesReq = getRulesReq;
    })(LogicManager = RequestBuilder.LogicManager || (RequestBuilder.LogicManager = {}));
    let Rule;
    (function (Rule) {
        function ruleReq(request) {
            return new transaction_pb_1.Transaction.Req().setRuleReq(request);
        }
        Rule.ruleReq = ruleReq;
        function setLabelReq(currentLabel, newLabel) {
            return ruleReq(new logic_pb_1.Rule.Req().setLabel(currentLabel).setRuleSetLabelReq(new logic_pb_1.Rule.SetLabel.Req().setLabel(newLabel)));
        }
        Rule.setLabelReq = setLabelReq;
        function deleteReq(label) {
            return ruleReq(new logic_pb_1.Rule.Req().setLabel(label).setRuleDeleteReq(new logic_pb_1.Rule.Delete.Req()));
        }
        Rule.deleteReq = deleteReq;
    })(Rule = RequestBuilder.Rule || (RequestBuilder.Rule = {}));
    let QueryManager;
    (function (QueryManager) {
        function queryManagerReq(queryReq, options) {
            return new transaction_pb_1.Transaction.Req().setQueryManagerReq(queryReq.setOptions(options));
        }
        function defineReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setDefineReq(new query_pb_1.QueryManager.Define.Req().setQuery(query)), options);
        }
        QueryManager.defineReq = defineReq;
        function undefineReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setUndefineReq(new query_pb_1.QueryManager.Undefine.Req().setQuery(query)), options);
        }
        QueryManager.undefineReq = undefineReq;
        function matchReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setMatchReq(new query_pb_1.QueryManager.Match.Req().setQuery(query)), options);
        }
        QueryManager.matchReq = matchReq;
        function matchAggregateReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setMatchAggregateReq(new query_pb_1.QueryManager.MatchAggregate.Req().setQuery(query)), options);
        }
        QueryManager.matchAggregateReq = matchAggregateReq;
        function matchGroupReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setMatchGroupReq(new query_pb_1.QueryManager.MatchGroup.Req().setQuery(query)), options);
        }
        QueryManager.matchGroupReq = matchGroupReq;
        function matchGroupAggregateReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setMatchGroupAggregateReq(new query_pb_1.QueryManager.MatchGroupAggregate.Req().setQuery(query)), options);
        }
        QueryManager.matchGroupAggregateReq = matchGroupAggregateReq;
        function insertReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setInsertReq(new query_pb_1.QueryManager.Insert.Req().setQuery(query)), options);
        }
        QueryManager.insertReq = insertReq;
        function deleteReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setDeleteReq(new query_pb_1.QueryManager.Delete.Req().setQuery(query)), options);
        }
        QueryManager.deleteReq = deleteReq;
        function updateReq(query, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setUpdateReq(new query_pb_1.QueryManager.Update.Req().setQuery(query)), options);
        }
        QueryManager.updateReq = updateReq;
        function explainReq(id, options) {
            return queryManagerReq(new query_pb_1.QueryManager.Req().setExplainReq(new query_pb_1.QueryManager.Explain.Req().setExplainableId(id)), options);
        }
        QueryManager.explainReq = explainReq;
    })(QueryManager = RequestBuilder.QueryManager || (RequestBuilder.QueryManager = {}));
    let ConceptManager;
    (function (ConceptManager) {
        function conceptManagerReq(req) {
            return new transaction_pb_1.Transaction.Req().setConceptManagerReq(req);
        }
        function putEntityTypeReq(label) {
            return conceptManagerReq(new concept_pb_1.ConceptManager.Req().setPutEntityTypeReq(new concept_pb_1.ConceptManager.PutEntityType.Req().setLabel(label)));
        }
        ConceptManager.putEntityTypeReq = putEntityTypeReq;
        function putRelationTypeReq(label) {
            return conceptManagerReq(new concept_pb_1.ConceptManager.Req().setPutRelationTypeReq(new concept_pb_1.ConceptManager.PutRelationType.Req().setLabel(label)));
        }
        ConceptManager.putRelationTypeReq = putRelationTypeReq;
        function putAttributeTypeReq(label, valueType) {
            return conceptManagerReq(new concept_pb_1.ConceptManager.Req().setPutAttributeTypeReq(new concept_pb_1.ConceptManager.PutAttributeType.Req().setLabel(label).setValueType(valueType)));
        }
        ConceptManager.putAttributeTypeReq = putAttributeTypeReq;
        function getThingTypeReq(label) {
            return conceptManagerReq(new concept_pb_1.ConceptManager.Req().setGetThingTypeReq(new concept_pb_1.ConceptManager.GetThingType.Req().setLabel(label)));
        }
        ConceptManager.getThingTypeReq = getThingTypeReq;
        function getThingReq(iid) {
            return conceptManagerReq(new concept_pb_1.ConceptManager.Req().setGetThingReq(new concept_pb_1.ConceptManager.GetThing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid))));
        }
        ConceptManager.getThingReq = getThingReq;
    })(ConceptManager = RequestBuilder.ConceptManager || (RequestBuilder.ConceptManager = {}));
    let Type;
    (function (Type) {
        function typeReq(req) {
            return new transaction_pb_1.Transaction.Req().setTypeReq(req);
        }
        function newReqBuilder(label) {
            const builder = new concept_pb_1.Type.Req().setLabel(label.name);
            if (label.scope)
                builder.setScope(label.scope);
            return builder;
        }
        function isAbstractReq(label) {
            return typeReq(newReqBuilder(label).setTypeIsAbstractReq(new concept_pb_1.Type.IsAbstract.Req()));
        }
        Type.isAbstractReq = isAbstractReq;
        function setLabelReq(label, newLabel) {
            return typeReq(newReqBuilder(label).setTypeSetLabelReq(new concept_pb_1.Type.SetLabel.Req().setLabel(newLabel)));
        }
        Type.setLabelReq = setLabelReq;
        function getSupertypesReq(label) {
            return typeReq(newReqBuilder(label).setTypeGetSupertypesReq(new concept_pb_1.Type.GetSupertypes.Req()));
        }
        Type.getSupertypesReq = getSupertypesReq;
        function getSubtypesReq(label) {
            return typeReq(newReqBuilder(label).setTypeGetSubtypesReq(new concept_pb_1.Type.GetSubtypes.Req()));
        }
        Type.getSubtypesReq = getSubtypesReq;
        function getSupertypeReq(label) {
            return typeReq(newReqBuilder(label).setTypeGetSupertypeReq(new concept_pb_1.Type.GetSupertype.Req()));
        }
        Type.getSupertypeReq = getSupertypeReq;
        function deleteReq(label) {
            return typeReq(newReqBuilder(label).setTypeDeleteReq(new concept_pb_1.Type.Delete.Req()));
        }
        Type.deleteReq = deleteReq;
        let RoleType;
        (function (RoleType) {
            function protoRoleType(label, encoding) {
                return new concept_pb_1.Type().setScope(label.scope).setLabel(label.name).setEncoding(encoding);
            }
            RoleType.protoRoleType = protoRoleType;
            function getRelationTypesReq(label) {
                return typeReq(newReqBuilder(label).setRoleTypeGetRelationTypesReq(new concept_pb_1.RoleType.GetRelationTypes.Req()));
            }
            RoleType.getRelationTypesReq = getRelationTypesReq;
            function getPlayersReq(label) {
                return typeReq(newReqBuilder(label).setRoleTypeGetPlayersReq(new concept_pb_1.RoleType.GetPlayers.Req()));
            }
            RoleType.getPlayersReq = getPlayersReq;
        })(RoleType = Type.RoleType || (Type.RoleType = {}));
        let ThingType;
        (function (ThingType) {
            function protoThingType(label, encoding) {
                return new concept_pb_1.Type().setLabel(label.name).setEncoding(encoding);
            }
            ThingType.protoThingType = protoThingType;
            function setAbstractReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeSetAbstractReq(new concept_pb_1.ThingType.SetAbstract.Req()));
            }
            ThingType.setAbstractReq = setAbstractReq;
            function unsetAbstractReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeUnsetAbstractReq(new concept_pb_1.ThingType.UnsetAbstract.Req()));
            }
            ThingType.unsetAbstractReq = unsetAbstractReq;
            function setSupertypeReq(label, supertype) {
                return typeReq(newReqBuilder(label).setTypeSetSupertypeReq(new concept_pb_1.Type.SetSupertype.Req().setType(supertype)));
            }
            ThingType.setSupertypeReq = setSupertypeReq;
            function getPlaysReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeGetPlaysReq(new concept_pb_1.ThingType.GetPlays.Req()));
            }
            ThingType.getPlaysReq = getPlaysReq;
            function getPlaysExplicitReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeGetPlaysExplicitReq(new concept_pb_1.ThingType.GetPlaysExplicit.Req()));
            }
            ThingType.getPlaysExplicitReq = getPlaysExplicitReq;
            function getPlaysOverriddenReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeGetPlaysOverriddenReq(new concept_pb_1.ThingType.GetPlaysOverridden.Req()));
            }
            ThingType.getPlaysOverriddenReq = getPlaysOverriddenReq;
            function setPlaysReq(label, roleType) {
                return typeReq(newReqBuilder(label).setThingTypeSetPlaysReq(new concept_pb_1.ThingType.SetPlays.Req().setRoleType(roleType)));
            }
            ThingType.setPlaysReq = setPlaysReq;
            function setPlaysOverriddenReq(label, roleType, overriddenRoleType) {
                return typeReq(newReqBuilder(label).setThingTypeSetPlaysReq(new concept_pb_1.ThingType.SetPlays.Req().setRoleType(roleType)
                    .setOverriddenType(overriddenRoleType)));
            }
            ThingType.setPlaysOverriddenReq = setPlaysOverriddenReq;
            function unsetPlaysReq(label, roleType) {
                return typeReq(newReqBuilder(label).setThingTypeUnsetPlaysReq(new concept_pb_1.ThingType.UnsetPlays.Req().setRoleType(roleType)));
            }
            ThingType.unsetPlaysReq = unsetPlaysReq;
            function getOwnsReq(label, keysOnly) {
                return typeReq(newReqBuilder(label).setThingTypeGetOwnsReq(new concept_pb_1.ThingType.GetOwns.Req().setKeysOnly(keysOnly)));
            }
            ThingType.getOwnsReq = getOwnsReq;
            function getOwnsByTypeReq(label, valueType, keysOnly) {
                return typeReq(newReqBuilder(label).setThingTypeGetOwnsReq(new concept_pb_1.ThingType.GetOwns.Req().setKeysOnly(keysOnly)
                    .setValueType(valueType)));
            }
            ThingType.getOwnsByTypeReq = getOwnsByTypeReq;
            function getOwnsExplicitReq(label, keysOnly) {
                return typeReq(newReqBuilder(label).setThingTypeGetOwnsExplicitReq(new concept_pb_1.ThingType.GetOwnsExplicit.Req().setKeysOnly(keysOnly)));
            }
            ThingType.getOwnsExplicitReq = getOwnsExplicitReq;
            function getOwnsExplicitByTypeReq(label, valueType, keysOnly) {
                return typeReq(newReqBuilder(label).setThingTypeGetOwnsExplicitReq(new concept_pb_1.ThingType.GetOwnsExplicit.Req().setKeysOnly(keysOnly)
                    .setValueType(valueType)));
            }
            ThingType.getOwnsExplicitByTypeReq = getOwnsExplicitByTypeReq;
            function setOwnsReq(label, attributeType, isKey) {
                return typeReq(newReqBuilder(label).setThingTypeSetOwnsReq(new concept_pb_1.ThingType.SetOwns.Req()
                    .setAttributeType(attributeType)
                    .setIsKey(isKey)));
            }
            ThingType.setOwnsReq = setOwnsReq;
            function setOwnsOverriddenReq(label, attributeType, overriddenType, isKey) {
                return typeReq(newReqBuilder(label).setThingTypeSetOwnsReq(new concept_pb_1.ThingType.SetOwns.Req()
                    .setAttributeType(attributeType)
                    .setOverriddenType(overriddenType)
                    .setIsKey(isKey)));
            }
            ThingType.setOwnsOverriddenReq = setOwnsOverriddenReq;
            function unsetOwnsReq(label, attributeType) {
                return typeReq(newReqBuilder(label).setThingTypeUnsetOwnsReq(new concept_pb_1.ThingType.UnsetOwns.Req().setAttributeType(attributeType)));
            }
            ThingType.unsetOwnsReq = unsetOwnsReq;
            function getInstancesReq(label) {
                return typeReq(newReqBuilder(label).setThingTypeGetInstancesReq(new concept_pb_1.ThingType.GetInstances.Req()));
            }
            ThingType.getInstancesReq = getInstancesReq;
            function getOwnsOverriddenReq(label, attributeType) {
                return typeReq(newReqBuilder(label).setThingTypeGetOwnsOverriddenReq(new concept_pb_1.ThingType.GetOwnsOverridden.Req().setAttributeType(attributeType)));
            }
            ThingType.getOwnsOverriddenReq = getOwnsOverriddenReq;
        })(ThingType = Type.ThingType || (Type.ThingType = {}));
        let EntityType;
        (function (EntityType) {
            function createReq(label) {
                return typeReq(newReqBuilder(label).setEntityTypeCreateReq(new concept_pb_1.EntityType.Create.Req()));
            }
            EntityType.createReq = createReq;
        })(EntityType = Type.EntityType || (Type.EntityType = {}));
        let RelationType;
        (function (RelationType) {
            function createReq(label) {
                return typeReq(newReqBuilder(label).setRelationTypeCreateReq(new concept_pb_1.RelationType.Create.Req()));
            }
            RelationType.createReq = createReq;
            function getRelatesReq(label) {
                return typeReq(newReqBuilder(label).setRelationTypeGetRelatesReq(new concept_pb_1.RelationType.GetRelates.Req()));
            }
            RelationType.getRelatesReq = getRelatesReq;
            function getRelatesExplicitReq(label) {
                return typeReq(newReqBuilder(label).setRelationTypeGetRelatesExplicitReq(new concept_pb_1.RelationType.GetRelatesExplicit.Req()));
            }
            RelationType.getRelatesExplicitReq = getRelatesExplicitReq;
            function getRelatesByRoleReq(label, roleLabel) {
                return typeReq(newReqBuilder(label).setRelationTypeGetRelatesForRoleLabelReq(new concept_pb_1.RelationType.GetRelatesForRoleLabel.Req().setLabel(roleLabel)));
            }
            RelationType.getRelatesByRoleReq = getRelatesByRoleReq;
            function getRelatesOverridden(label, roleLabel) {
                return typeReq(newReqBuilder(label).setRelationTypeGetRelatesOverriddenReq(new concept_pb_1.RelationType.GetRelatesOverridden.Req().setLabel(roleLabel)));
            }
            RelationType.getRelatesOverridden = getRelatesOverridden;
            function setRelatesReq(label, roleLabel) {
                return typeReq(newReqBuilder(label).setRelationTypeSetRelatesReq(new concept_pb_1.RelationType.SetRelates.Req().setLabel(roleLabel)));
            }
            RelationType.setRelatesReq = setRelatesReq;
            function setRelatesOverriddenReq(label, roleLabel, overriddenLabel) {
                return typeReq(newReqBuilder(label).setRelationTypeSetRelatesReq(new concept_pb_1.RelationType.SetRelates.Req().setLabel(roleLabel)
                    .setOverriddenLabel(overriddenLabel)));
            }
            RelationType.setRelatesOverriddenReq = setRelatesOverriddenReq;
            function unsetRelatesReq(label, roleLabel) {
                return typeReq(newReqBuilder(label).setRelationTypeUnsetRelatesReq(new concept_pb_1.RelationType.UnsetRelates.Req().setLabel(roleLabel)));
            }
            RelationType.unsetRelatesReq = unsetRelatesReq;
        })(RelationType = Type.RelationType || (Type.RelationType = {}));
        let AttributeType;
        (function (AttributeType) {
            function getOwnersReq(label, onlyKey) {
                return typeReq(newReqBuilder(label).setAttributeTypeGetOwnersReq(new concept_pb_1.AttributeType.GetOwners.Req().setOnlyKey(onlyKey)));
            }
            AttributeType.getOwnersReq = getOwnersReq;
            function getOwnersExplicitReq(label, onlyKey) {
                return typeReq(newReqBuilder(label).setAttributeTypeGetOwnersExplicitReq(new concept_pb_1.AttributeType.GetOwnersExplicit.Req().setOnlyKey(onlyKey)));
            }
            AttributeType.getOwnersExplicitReq = getOwnersExplicitReq;
            function putReq(label, value) {
                return typeReq(newReqBuilder(label).setAttributeTypePutReq(new concept_pb_1.AttributeType.Put.Req().setValue(value)));
            }
            AttributeType.putReq = putReq;
            function getReq(label, value) {
                return typeReq(newReqBuilder(label).setAttributeTypeGetReq(new concept_pb_1.AttributeType.Get.Req().setValue(value)));
            }
            AttributeType.getReq = getReq;
            function getRegexReq(label) {
                return typeReq(newReqBuilder(label).setAttributeTypeGetRegexReq(new concept_pb_1.AttributeType.GetRegex.Req()));
            }
            AttributeType.getRegexReq = getRegexReq;
            function setRegexReq(label, regex) {
                return typeReq(newReqBuilder(label).setAttributeTypeSetRegexReq(new concept_pb_1.AttributeType.SetRegex.Req().setRegex(regex)));
            }
            AttributeType.setRegexReq = setRegexReq;
        })(AttributeType = Type.AttributeType || (Type.AttributeType = {}));
    })(Type = RequestBuilder.Type || (RequestBuilder.Type = {}));
    let Thing;
    (function (Thing) {
        function thingReq(req) {
            return new transaction_pb_1.Transaction.Req().setThingReq(req);
        }
        function protoThing(iid) {
            return new concept_pb_1.Thing().setIid(Bytes_1.Bytes.hexStringToBytes(iid));
        }
        Thing.protoThing = protoThing;
        function getHasReq(iid, onlyKey) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingGetHasReq(new concept_pb_1.Thing.GetHas.Req().setKeysOnly(onlyKey)));
        }
        Thing.getHasReq = getHasReq;
        function getHasByTypeReq(iid, attributeTypes) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingGetHasReq(new concept_pb_1.Thing.GetHas.Req().setAttributeTypesList(attributeTypes)));
        }
        Thing.getHasByTypeReq = getHasByTypeReq;
        function setHasReq(iid, attribute) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingSetHasReq(new concept_pb_1.Thing.SetHas.Req().setAttribute(attribute)));
        }
        Thing.setHasReq = setHasReq;
        function unsetHasReq(iid, attribute) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingUnsetHasReq(new concept_pb_1.Thing.UnsetHas.Req().setAttribute(attribute)));
        }
        Thing.unsetHasReq = unsetHasReq;
        function getPlayingReq(iid) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingGetPlayingReq(new concept_pb_1.Thing.GetPlaying.Req()));
        }
        Thing.getPlayingReq = getPlayingReq;
        function getRelationsReq(iid, roleTypes) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingGetRelationsReq(new concept_pb_1.Thing.GetRelations.Req().setRoleTypesList(roleTypes)));
        }
        Thing.getRelationsReq = getRelationsReq;
        function deleteReq(iid) {
            return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setThingDeleteReq(new concept_pb_1.Thing.Delete.Req()));
        }
        Thing.deleteReq = deleteReq;
        let Relation;
        (function (Relation) {
            function addPlayerReq(iid, roleType, player) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setRelationAddPlayerReq(new concept_pb_1.Relation.AddPlayer.Req().setRoleType(roleType).setPlayer(player)));
            }
            Relation.addPlayerReq = addPlayerReq;
            function removePlayerReq(iid, roleType, player) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setRelationRemovePlayerReq(new concept_pb_1.Relation.RemovePlayer.Req().setRoleType(roleType).setPlayer(player)));
            }
            Relation.removePlayerReq = removePlayerReq;
            function getPlayersReq(iid, roleTypes) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setRelationGetPlayersReq(new concept_pb_1.Relation.GetPlayers.Req().setRoleTypesList(roleTypes)));
            }
            Relation.getPlayersReq = getPlayersReq;
            function getPlayersByRoleTypeReq(iid) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setRelationGetPlayersByRoleTypeReq(new concept_pb_1.Relation.GetPlayersByRoleType.Req()));
            }
            Relation.getPlayersByRoleTypeReq = getPlayersByRoleTypeReq;
            function getRelatingReq(iid) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setRelationGetRelatingReq(new concept_pb_1.Relation.GetRelating.Req()));
            }
            Relation.getRelatingReq = getRelatingReq;
        })(Relation = Thing.Relation || (Thing.Relation = {}));
        let Attribute;
        (function (Attribute) {
            function getOwnersReq(iid) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setAttributeGetOwnersReq(new concept_pb_1.Attribute.GetOwners.Req()));
            }
            Attribute.getOwnersReq = getOwnersReq;
            function getOwnersByTypeReq(iid, ownerType) {
                return thingReq(new concept_pb_1.Thing.Req().setIid(Bytes_1.Bytes.hexStringToBytes(iid)).setAttributeGetOwnersReq(new concept_pb_1.Attribute.GetOwners.Req().setThingType(ownerType)));
            }
            Attribute.getOwnersByTypeReq = getOwnersByTypeReq;
            function attributeValueBooleanReq(value) {
                return new concept_pb_1.Attribute.Value().setBoolean(value);
            }
            Attribute.attributeValueBooleanReq = attributeValueBooleanReq;
            function attributeValueLongReq(value) {
                return new concept_pb_1.Attribute.Value().setLong(value);
            }
            Attribute.attributeValueLongReq = attributeValueLongReq;
            function attributeValueDoubleReq(value) {
                return new concept_pb_1.Attribute.Value().setDouble(value);
            }
            Attribute.attributeValueDoubleReq = attributeValueDoubleReq;
            function attributeValueStringReq(value) {
                return new concept_pb_1.Attribute.Value().setString(value);
            }
            Attribute.attributeValueStringReq = attributeValueStringReq;
            function attributeValueDateTimeReq(value) {
                return new concept_pb_1.Attribute.Value().setDateTime(value.getTime());
            }
            Attribute.attributeValueDateTimeReq = attributeValueDateTimeReq;
        })(Attribute = Thing.Attribute || (Thing.Attribute = {}));
    })(Thing = RequestBuilder.Thing || (RequestBuilder.Thing = {}));
})(RequestBuilder = exports.RequestBuilder || (exports.RequestBuilder = {}));
