import { ClientDuplexStream } from "@grpc/grpc-js";
import { Session } from "typedb-protocol/common/session_pb";
import { CoreDatabase as CoreDatabaseProto, CoreDatabaseManager as CoreDatabaseMgrProto } from "typedb-protocol/core/core_database_pb";
import { TypeDBClient } from "typedb-protocol/core/core_service_grpc_pb";
import { TypeDBDatabaseImpl } from "../../connection/TypeDBDatabaseImpl";
import * as common_transaction_pb from "typedb-protocol/common/transaction_pb";
export declare abstract class TypeDBStub {
    databasesCreate(req: CoreDatabaseMgrProto.Create.Req): Promise<void>;
    databasesContains(req: CoreDatabaseMgrProto.Contains.Req): Promise<boolean>;
    databasesAll(req: CoreDatabaseMgrProto.All.Req): Promise<TypeDBDatabaseImpl[]>;
    databaseDelete(req: CoreDatabaseProto.Delete.Req): Promise<void>;
    databaseSchema(req: CoreDatabaseProto.Schema.Req): Promise<string>;
    sessionOpen(openReq: Session.Open.Req): Promise<Session.Open.Res>;
    sessionClose(req: Session.Close.Req): Promise<void>;
    sessionPulse(pulse: Session.Pulse.Req): Promise<boolean>;
    transaction(): Promise<ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>>;
    abstract stub(): TypeDBClient;
}
