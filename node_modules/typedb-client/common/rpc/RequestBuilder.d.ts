import { ClusterDatabaseManager } from "typedb-protocol/cluster/cluster_database_pb";
import { ServerManager as ServerManagerProto } from "typedb-protocol/cluster/cluster_server_pb";
import { ClusterUser as ClusterUserProto, ClusterUserManager as ClusterUserManagerProto } from "typedb-protocol/cluster/cluster_user_pb";
import { Attribute as AttributeProto, AttributeType as AttributeTypeProto, Thing as ThingProto, Type as TypeProto } from "typedb-protocol/common/concept_pb";
import { LogicManager as LogicProto, Rule as RuleProto } from "typedb-protocol/common/logic_pb";
import { Options } from "typedb-protocol/common/options_pb";
import { Session as SessionProto } from "typedb-protocol/common/session_pb";
import { Transaction as TransactionProto } from "typedb-protocol/common/transaction_pb";
import { CoreDatabase, CoreDatabaseManager } from "typedb-protocol/core/core_database_pb";
import { Label } from "../Label";
export declare namespace RequestBuilder {
    namespace Core {
        namespace DatabaseManager {
            function createReq(name: string): CoreDatabaseManager.Create.Req;
            function containsReq(name: string): CoreDatabaseManager.Contains.Req;
            function allReq(): CoreDatabaseManager.All.Req;
        }
        namespace Database {
            function schemaReq(name: string): CoreDatabase.Schema.Req;
            function deleteReq(name: string): CoreDatabase.Delete.Req;
        }
    }
    namespace Cluster {
        namespace ServerManager {
            function allReq(): ServerManagerProto.All.Req;
        }
        namespace UserManager {
            function containsReq(name: string): ClusterUserManagerProto.Contains.Req;
            function createReq(name: string, password: string): ClusterUserManagerProto.Create.Req;
            function allReq(): ClusterUserManagerProto.All.Req;
        }
        namespace User {
            function passwordReq(name: string, password: string): ClusterUserProto.Password.Req;
            function tokenReq(username: string): ClusterUserProto.Token.Req;
            function deleteReq(name: string): ClusterUserProto.Delete.Req;
        }
        namespace DatabaseManager {
            function getReq(name: string): ClusterDatabaseManager.Get.Req;
            function allReq(): ClusterDatabaseManager.All.Req;
        }
        namespace Database {
        }
    }
    namespace Session {
        function openReq(database: string, type: SessionProto.Type, options: Options): SessionProto.Open.Req;
        function closeReq(id: string): SessionProto.Close.Req;
        function pulseReq(id: string): SessionProto.Pulse.Req;
    }
    namespace Transaction {
        function clientReq(reqs: TransactionProto.Req[]): TransactionProto.Client;
        function openReq(sessionId: string, type: TransactionProto.Type, options: Options, latencyMillis: number): TransactionProto.Req;
        function commitReq(): TransactionProto.Req;
        function rollbackReq(): TransactionProto.Req;
        function streamReq(requestId: string): TransactionProto.Req;
    }
    namespace LogicManager {
        function logicManagerReq(logicReq: LogicProto.Req): TransactionProto.Req;
        function putRuleReq(label: string, when: string, then: string): TransactionProto.Req;
        function getRuleReq(label: string): TransactionProto.Req;
        function getRulesReq(): TransactionProto.Req;
    }
    namespace Rule {
        function ruleReq(request: RuleProto.Req): TransactionProto.Req;
        function setLabelReq(currentLabel: string, newLabel: string): TransactionProto.Req;
        function deleteReq(label: string): TransactionProto.Req;
    }
    namespace QueryManager {
        function defineReq(query: string, options: Options): TransactionProto.Req;
        function undefineReq(query: string, options: Options): TransactionProto.Req;
        function matchReq(query: string, options: Options): TransactionProto.Req;
        function matchAggregateReq(query: string, options: Options): TransactionProto.Req;
        function matchGroupReq(query: string, options: Options): TransactionProto.Req;
        function matchGroupAggregateReq(query: string, options: Options): TransactionProto.Req;
        function insertReq(query: string, options: Options): TransactionProto.Req;
        function deleteReq(query: string, options: Options): TransactionProto.Req;
        function updateReq(query: string, options: Options): TransactionProto.Req;
        function explainReq(id: number, options: Options): TransactionProto.Req;
    }
    namespace ConceptManager {
        function putEntityTypeReq(label: string): TransactionProto.Req;
        function putRelationTypeReq(label: string): TransactionProto.Req;
        function putAttributeTypeReq(label: string, valueType: AttributeTypeProto.ValueType): TransactionProto.Req;
        function getThingTypeReq(label: string): TransactionProto.Req;
        function getThingReq(iid: string): TransactionProto.Req;
    }
    namespace Type {
        function isAbstractReq(label: Label): TransactionProto.Req;
        function setLabelReq(label: Label, newLabel: string): TransactionProto.Req;
        function getSupertypesReq(label: Label): TransactionProto.Req;
        function getSubtypesReq(label: Label): TransactionProto.Req;
        function getSupertypeReq(label: Label): TransactionProto.Req;
        function deleteReq(label: Label): TransactionProto.Req;
        namespace RoleType {
            function protoRoleType(label: Label, encoding: TypeProto.Encoding): TypeProto;
            function getRelationTypesReq(label: Label): TransactionProto.Req;
            function getPlayersReq(label: Label): TransactionProto.Req;
        }
        namespace ThingType {
            function protoThingType(label: Label, encoding: TypeProto.Encoding): TypeProto;
            function setAbstractReq(label: Label): TransactionProto.Req;
            function unsetAbstractReq(label: Label): TransactionProto.Req;
            function setSupertypeReq(label: Label, supertype: TypeProto): TransactionProto.Req;
            function getPlaysReq(label: Label): TransactionProto.Req;
            function getPlaysExplicitReq(label: Label): TransactionProto.Req;
            function getPlaysOverriddenReq(label: Label): TransactionProto.Req;
            function setPlaysReq(label: Label, roleType: TypeProto): TransactionProto.Req;
            function setPlaysOverriddenReq(label: Label, roleType: TypeProto, overriddenRoleType: TypeProto): TransactionProto.Req;
            function unsetPlaysReq(label: Label, roleType: TypeProto): TransactionProto.Req;
            function getOwnsReq(label: Label, keysOnly: boolean): TransactionProto.Req;
            function getOwnsByTypeReq(label: Label, valueType: AttributeTypeProto.ValueType, keysOnly: boolean): TransactionProto.Req;
            function getOwnsExplicitReq(label: Label, keysOnly: boolean): TransactionProto.Req;
            function getOwnsExplicitByTypeReq(label: Label, valueType: AttributeTypeProto.ValueType, keysOnly: boolean): TransactionProto.Req;
            function setOwnsReq(label: Label, attributeType: TypeProto, isKey: boolean): TransactionProto.Req;
            function setOwnsOverriddenReq(label: Label, attributeType: TypeProto, overriddenType: TypeProto, isKey: boolean): TransactionProto.Req;
            function unsetOwnsReq(label: Label, attributeType: TypeProto): TransactionProto.Req;
            function getInstancesReq(label: Label): TransactionProto.Req;
            function getOwnsOverriddenReq(label: Label, attributeType: TypeProto): TransactionProto.Req;
        }
        namespace EntityType {
            function createReq(label: Label): TransactionProto.Req;
        }
        namespace RelationType {
            function createReq(label: Label): TransactionProto.Req;
            function getRelatesReq(label: Label): TransactionProto.Req;
            function getRelatesExplicitReq(label: Label): TransactionProto.Req;
            function getRelatesByRoleReq(label: Label, roleLabel: string): TransactionProto.Req;
            function getRelatesOverridden(label: Label, roleLabel: string): TransactionProto.Req;
            function setRelatesReq(label: Label, roleLabel: string): TransactionProto.Req;
            function setRelatesOverriddenReq(label: Label, roleLabel: string, overriddenLabel: string): TransactionProto.Req;
            function unsetRelatesReq(label: Label, roleLabel: string): TransactionProto.Req;
        }
        namespace AttributeType {
            function getOwnersReq(label: Label, onlyKey: boolean): TransactionProto.Req;
            function getOwnersExplicitReq(label: Label, onlyKey: boolean): TransactionProto.Req;
            function putReq(label: Label, value: AttributeProto.Value): TransactionProto.Req;
            function getReq(label: Label, value: AttributeProto.Value): TransactionProto.Req;
            function getRegexReq(label: Label): TransactionProto.Req;
            function setRegexReq(label: Label, regex: string): TransactionProto.Req;
        }
    }
    namespace Thing {
        function protoThing(iid: string): ThingProto;
        function getHasReq(iid: string, onlyKey: boolean): TransactionProto.Req;
        function getHasByTypeReq(iid: string, attributeTypes: TypeProto[]): TransactionProto.Req;
        function setHasReq(iid: string, attribute: ThingProto): TransactionProto.Req;
        function unsetHasReq(iid: string, attribute: ThingProto): TransactionProto.Req;
        function getPlayingReq(iid: string): TransactionProto.Req;
        function getRelationsReq(iid: string, roleTypes: TypeProto[]): TransactionProto.Req;
        function deleteReq(iid: string): TransactionProto.Req;
        namespace Relation {
            function addPlayerReq(iid: string, roleType: TypeProto, player: ThingProto): TransactionProto.Req;
            function removePlayerReq(iid: string, roleType: TypeProto, player: ThingProto): TransactionProto.Req;
            function getPlayersReq(iid: string, roleTypes: TypeProto[]): TransactionProto.Req;
            function getPlayersByRoleTypeReq(iid: string): TransactionProto.Req;
            function getRelatingReq(iid: string): TransactionProto.Req;
        }
        namespace Attribute {
            function getOwnersReq(iid: string): TransactionProto.Req;
            function getOwnersByTypeReq(iid: string, ownerType: TypeProto): TransactionProto.Req;
            function attributeValueBooleanReq(value: boolean): AttributeProto.Value;
            function attributeValueLongReq(value: number): AttributeProto.Value;
            function attributeValueDoubleReq(value: number): AttributeProto.Value;
            function attributeValueStringReq(value: string): AttributeProto.Value;
            function attributeValueDateTimeReq(value: Date): AttributeProto.Value;
        }
    }
}
