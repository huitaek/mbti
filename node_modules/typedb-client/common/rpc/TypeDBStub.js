"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDBStub = void 0;
const TypeDBDatabaseImpl_1 = require("../../connection/TypeDBDatabaseImpl");
const TypeDBClientError_1 = require("../errors/TypeDBClientError");
/*
TODO implement ResilientCall
 */
class TypeDBStub {
    databasesCreate(req) {
        return new Promise((resolve, reject) => {
            this.stub().databases_create(req, (err) => {
                if (err)
                    reject(new TypeDBClientError_1.TypeDBClientError(err));
                else
                    resolve();
            });
        });
    }
    databasesContains(req) {
        return new Promise((resolve, reject) => {
            this.stub().databases_contains(req, (err, res) => {
                if (err)
                    reject(new TypeDBClientError_1.TypeDBClientError(err));
                else
                    resolve(res.getContains());
            });
        });
    }
    databasesAll(req) {
        return new Promise((resolve, reject) => {
            this.stub().databases_all(req, (err, res) => {
                if (err)
                    reject(new TypeDBClientError_1.TypeDBClientError(err));
                else
                    resolve(res.getNamesList().map(name => new TypeDBDatabaseImpl_1.TypeDBDatabaseImpl(name, this)));
            });
        });
    }
    databaseDelete(req) {
        return new Promise((resolve, reject) => {
            this.stub().database_delete(req, (err) => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    }
    databaseSchema(req) {
        return new Promise((resolve, reject) => {
            return this.stub().database_schema(req, (err, res) => {
                if (err)
                    reject(err);
                else
                    resolve(res.getSchema());
            });
        });
    }
    sessionOpen(openReq) {
        return new Promise((resolve, reject) => {
            this.stub().session_open(openReq, (err, res) => {
                if (err)
                    reject(new TypeDBClientError_1.TypeDBClientError(err));
                else
                    resolve(res);
            });
        });
    }
    sessionClose(req) {
        return new Promise((resolve, reject) => {
            this.stub().session_close(req, (err, res) => {
                if (err) {
                    console.warn("An error has occurred when issuing session close request: %o", err);
                }
                resolve();
            });
        });
    }
    sessionPulse(pulse) {
        return new Promise((resolve, reject) => {
            this.stub().session_pulse(pulse, (err, res) => {
                if (err)
                    reject(err);
                else {
                    resolve(res.getAlive());
                }
            });
        });
    }
    transaction() {
        return new Promise((resolve, reject) => {
            try {
                resolve(this.stub().transaction());
            }
            catch (e) {
                reject(e);
            }
        });
    }
}
exports.TypeDBStub = TypeDBStub;
