"use strict";
/*
 * Copyright (C) 2022 Vaticle
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = void 0;
const TypeDBClientError_1 = require("../errors/TypeDBClientError");
class Stream {
    // TODO why can't this be abstract?
    // eslint-disable-next-line require-yield
    async *[Symbol.asyncIterator]() {
        throw new TypeDBClientError_1.TypeDBClientError("ILLEGAL STATE");
    }
    iterator() {
        return this[Symbol.asyncIterator]();
    }
    async collect() {
        const answers = [];
        for await (const answer of this) {
            answers.push(answer);
        }
        return answers;
    }
    async every(callbackFn) {
        for await (const item of this) {
            if (!callbackFn(item))
                return false;
        }
        return true;
    }
    async some(callbackFn) {
        for await (const item of this) {
            if (callbackFn(item))
                return true;
        }
        return false;
    }
    filter(filter) {
        return new Stream.Filtered(this, filter);
    }
    map(mapper) {
        return new Stream.Mapped(this, mapper);
    }
    flatMap(mapper) {
        return new Stream.FlatMapped(this, mapper);
    }
    async forEach(fn) {
        for await (const val of this) {
            fn(val);
        }
    }
    async first() {
        for await (const val of this) {
            return val;
        }
        return null;
    }
}
exports.Stream = Stream;
(function (Stream) {
    function iterable(iterable) {
        return new Iterable(iterable);
    }
    Stream.iterable = iterable;
    function array(items) {
        return new Array(items);
    }
    Stream.array = array;
    class Iterable extends Stream {
        constructor(provider) {
            super();
            this._provider = provider;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async *[Symbol.asyncIterator]() {
            for await (const val of this._provider) {
                yield val;
            }
        }
    }
    class Array extends Stream {
        constructor(array) {
            super();
            this._array = array;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async *[Symbol.asyncIterator]() {
            for await (const val of this._array) {
                yield val;
            }
        }
    }
    class Filtered extends Stream {
        constructor(source, filter) {
            super();
            this._source = source;
            this._filter = filter;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async *[Symbol.asyncIterator]() {
            for await (const val of this._source) {
                if (this._filter(val))
                    yield val;
            }
        }
    }
    Stream.Filtered = Filtered;
    class Mapped extends Stream {
        constructor(source, mapper) {
            super();
            this._source = source;
            this._mapper = mapper;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async *[Symbol.asyncIterator]() {
            for await (const val of this._source) {
                yield this._mapper(val);
            }
        }
    }
    Stream.Mapped = Mapped;
    class FlatMapped extends Stream {
        constructor(source, flatMapper) {
            super();
            this._source = source;
            this._flatMapper = flatMapper;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async *[Symbol.asyncIterator]() {
            for await (const val of this._source) {
                for await (const flatMapped of this._flatMapper(val)) {
                    yield flatMapped;
                }
            }
        }
    }
    Stream.FlatMapped = FlatMapped;
})(Stream = exports.Stream || (exports.Stream = {}));
