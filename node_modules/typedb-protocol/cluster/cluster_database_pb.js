// source: cluster/cluster_database.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.typedb.protocol.ClusterDatabase', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabase.Replica', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.All', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.All.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.All.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.Get', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.Get.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ClusterDatabaseManager.Get.Res', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.displayName = 'proto.typedb.protocol.ClusterDatabaseManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.Get.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.Get.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.Get.Req.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.Get.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.Get.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.Get.Res.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.Get.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.All = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.All, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.All.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.All';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.All.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.All.Req.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.All.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ClusterDatabaseManager.All.Res.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabaseManager.All.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabaseManager.All.Res.displayName = 'proto.typedb.protocol.ClusterDatabaseManager.All.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ClusterDatabase.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabase.displayName = 'proto.typedb.protocol.ClusterDatabase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ClusterDatabase.Replica = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ClusterDatabase.Replica, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ClusterDatabase.Replica.displayName = 'proto.typedb.protocol.ClusterDatabase.Replica';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager}
 */
proto.typedb.protocol.ClusterDatabaseManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager;
  return proto.typedb.protocol.ClusterDatabaseManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager}
 */
proto.typedb.protocol.ClusterDatabaseManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.Get;
  return proto.typedb.protocol.ClusterDatabaseManager.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.Get.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.Get.Req;
  return proto.typedb.protocol.ClusterDatabaseManager.Get.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.Get.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Req} returns this
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Req.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.Get.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    database: (f = msg.getDatabase()) && proto.typedb.protocol.ClusterDatabase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.Get.Res;
  return proto.typedb.protocol.ClusterDatabaseManager.Get.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.ClusterDatabase;
      reader.readMessage(value,proto.typedb.protocol.ClusterDatabase.deserializeBinaryFromReader);
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.Get.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.ClusterDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClusterDatabase database = 1;
 * @return {?proto.typedb.protocol.ClusterDatabase}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.getDatabase = function() {
  return /** @type{?proto.typedb.protocol.ClusterDatabase} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ClusterDatabase, 1));
};


/**
 * @param {?proto.typedb.protocol.ClusterDatabase|undefined} value
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res} returns this
*/
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.setDatabase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.Get.Res} returns this
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.clearDatabase = function() {
  return this.setDatabase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ClusterDatabaseManager.Get.Res.prototype.hasDatabase = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.All.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.All;
  return proto.typedb.protocol.ClusterDatabaseManager.All.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.All.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.All.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Req}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.All.Req;
  return proto.typedb.protocol.ClusterDatabaseManager.All.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Req}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.All.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabaseManager.All.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    databasesList: jspb.Message.toObjectList(msg.getDatabasesList(),
    proto.typedb.protocol.ClusterDatabase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Res}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabaseManager.All.Res;
  return proto.typedb.protocol.ClusterDatabaseManager.All.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Res}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.ClusterDatabase;
      reader.readMessage(value,proto.typedb.protocol.ClusterDatabase.deserializeBinaryFromReader);
      msg.addDatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabaseManager.All.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabaseManager.All.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.ClusterDatabase.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClusterDatabase databases = 1;
 * @return {!Array<!proto.typedb.protocol.ClusterDatabase>}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.getDatabasesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ClusterDatabase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.ClusterDatabase, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.ClusterDatabase>} value
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Res} returns this
*/
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.setDatabasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.ClusterDatabase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ClusterDatabase}
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.addDatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.ClusterDatabase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ClusterDatabaseManager.All.Res} returns this
 */
proto.typedb.protocol.ClusterDatabaseManager.All.Res.prototype.clearDatabasesList = function() {
  return this.setDatabasesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ClusterDatabase.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabase.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabase.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    replicasList: jspb.Message.toObjectList(msg.getReplicasList(),
    proto.typedb.protocol.ClusterDatabase.Replica.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabase}
 */
proto.typedb.protocol.ClusterDatabase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabase;
  return proto.typedb.protocol.ClusterDatabase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabase}
 */
proto.typedb.protocol.ClusterDatabase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.ClusterDatabase.Replica;
      reader.readMessage(value,proto.typedb.protocol.ClusterDatabase.Replica.deserializeBinaryFromReader);
      msg.addReplicas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.typedb.protocol.ClusterDatabase.Replica.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ClusterDatabase.Replica.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ClusterDatabase.Replica} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabase.Replica.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    primary: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    preferred: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    term: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica}
 */
proto.typedb.protocol.ClusterDatabase.Replica.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ClusterDatabase.Replica;
  return proto.typedb.protocol.ClusterDatabase.Replica.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ClusterDatabase.Replica} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica}
 */
proto.typedb.protocol.ClusterDatabase.Replica.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrimary(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreferred(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTerm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ClusterDatabase.Replica.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ClusterDatabase.Replica} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ClusterDatabase.Replica.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrimary();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPreferred();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTerm();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica} returns this
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool primary = 2;
 * @return {boolean}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.getPrimary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica} returns this
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.setPrimary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool preferred = 3;
 * @return {boolean}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.getPreferred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica} returns this
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.setPreferred = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 term = 4;
 * @return {number}
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.getTerm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica} returns this
 */
proto.typedb.protocol.ClusterDatabase.Replica.prototype.setTerm = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.typedb.protocol.ClusterDatabase.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ClusterDatabase} returns this
 */
proto.typedb.protocol.ClusterDatabase.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Replica replicas = 2;
 * @return {!Array<!proto.typedb.protocol.ClusterDatabase.Replica>}
 */
proto.typedb.protocol.ClusterDatabase.prototype.getReplicasList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ClusterDatabase.Replica>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.ClusterDatabase.Replica, 2));
};


/**
 * @param {!Array<!proto.typedb.protocol.ClusterDatabase.Replica>} value
 * @return {!proto.typedb.protocol.ClusterDatabase} returns this
*/
proto.typedb.protocol.ClusterDatabase.prototype.setReplicasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.typedb.protocol.ClusterDatabase.Replica=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ClusterDatabase.Replica}
 */
proto.typedb.protocol.ClusterDatabase.prototype.addReplicas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.typedb.protocol.ClusterDatabase.Replica, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ClusterDatabase} returns this
 */
proto.typedb.protocol.ClusterDatabase.prototype.clearReplicasList = function() {
  return this.setReplicasList([]);
};


goog.object.extend(exports, proto.typedb.protocol);
