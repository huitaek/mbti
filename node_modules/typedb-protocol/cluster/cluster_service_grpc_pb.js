// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
//
// Copyright (C) 2021 Vaticle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//
'use strict';
var grpc = require('@grpc/grpc-js');
var cluster_cluster_server_pb = require('../cluster/cluster_server_pb.js');
var cluster_cluster_user_pb = require('../cluster/cluster_user_pb.js');
var cluster_cluster_database_pb = require('../cluster/cluster_database_pb.js');

function serialize_typedb_protocol_ClusterDatabaseManager_All_Req(arg) {
  if (!(arg instanceof cluster_cluster_database_pb.ClusterDatabaseManager.All.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterDatabaseManager.All.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterDatabaseManager_All_Req(buffer_arg) {
  return cluster_cluster_database_pb.ClusterDatabaseManager.All.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterDatabaseManager_All_Res(arg) {
  if (!(arg instanceof cluster_cluster_database_pb.ClusterDatabaseManager.All.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterDatabaseManager.All.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterDatabaseManager_All_Res(buffer_arg) {
  return cluster_cluster_database_pb.ClusterDatabaseManager.All.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterDatabaseManager_Get_Req(arg) {
  if (!(arg instanceof cluster_cluster_database_pb.ClusterDatabaseManager.Get.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterDatabaseManager.Get.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterDatabaseManager_Get_Req(buffer_arg) {
  return cluster_cluster_database_pb.ClusterDatabaseManager.Get.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterDatabaseManager_Get_Res(arg) {
  if (!(arg instanceof cluster_cluster_database_pb.ClusterDatabaseManager.Get.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterDatabaseManager.Get.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterDatabaseManager_Get_Res(buffer_arg) {
  return cluster_cluster_database_pb.ClusterDatabaseManager.Get.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Delete_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Delete.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Delete.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Delete_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Delete.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Delete_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Delete.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Delete.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Delete_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Delete.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Password_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Password.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Password.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Password_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Password.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Password_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Password.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Password.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Password_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Password.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Token_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Token.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Token.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Token_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Token.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUser_Token_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUser.Token.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUser.Token.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUser_Token_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUser.Token.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_All_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.All.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.All.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_All_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.All.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_All_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.All.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.All.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_All_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.All.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_Contains_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.Contains.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.Contains.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_Contains_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.Contains.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_Contains_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.Contains.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.Contains.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_Contains_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.Contains.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_Create_Req(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.Create.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.Create.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_Create_Req(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.Create.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ClusterUserManager_Create_Res(arg) {
  if (!(arg instanceof cluster_cluster_user_pb.ClusterUserManager.Create.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ClusterUserManager.Create.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ClusterUserManager_Create_Res(buffer_arg) {
  return cluster_cluster_user_pb.ClusterUserManager.Create.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ServerManager_All_Req(arg) {
  if (!(arg instanceof cluster_cluster_server_pb.ServerManager.All.Req)) {
    throw new Error('Expected argument of type typedb.protocol.ServerManager.All.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ServerManager_All_Req(buffer_arg) {
  return cluster_cluster_server_pb.ServerManager.All.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_ServerManager_All_Res(arg) {
  if (!(arg instanceof cluster_cluster_server_pb.ServerManager.All.Res)) {
    throw new Error('Expected argument of type typedb.protocol.ServerManager.All.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_ServerManager_All_Res(buffer_arg) {
  return cluster_cluster_server_pb.ServerManager.All.Res.deserializeBinary(new Uint8Array(buffer_arg));
}


var TypeDBClusterService = exports.TypeDBClusterService = {
  // Server Manager API
servers_all: {
    path: '/typedb.protocol.TypeDBCluster/servers_all',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_server_pb.ServerManager.All.Req,
    responseType: cluster_cluster_server_pb.ServerManager.All.Res,
    requestSerialize: serialize_typedb_protocol_ServerManager_All_Req,
    requestDeserialize: deserialize_typedb_protocol_ServerManager_All_Req,
    responseSerialize: serialize_typedb_protocol_ServerManager_All_Res,
    responseDeserialize: deserialize_typedb_protocol_ServerManager_All_Res,
  },
  // User Manager API
users_contains: {
    path: '/typedb.protocol.TypeDBCluster/users_contains',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUserManager.Contains.Req,
    responseType: cluster_cluster_user_pb.ClusterUserManager.Contains.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUserManager_Contains_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUserManager_Contains_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUserManager_Contains_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUserManager_Contains_Res,
  },
  users_create: {
    path: '/typedb.protocol.TypeDBCluster/users_create',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUserManager.Create.Req,
    responseType: cluster_cluster_user_pb.ClusterUserManager.Create.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUserManager_Create_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUserManager_Create_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUserManager_Create_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUserManager_Create_Res,
  },
  users_all: {
    path: '/typedb.protocol.TypeDBCluster/users_all',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUserManager.All.Req,
    responseType: cluster_cluster_user_pb.ClusterUserManager.All.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUserManager_All_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUserManager_All_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUserManager_All_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUserManager_All_Res,
  },
  // User API
user_password: {
    path: '/typedb.protocol.TypeDBCluster/user_password',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUser.Password.Req,
    responseType: cluster_cluster_user_pb.ClusterUser.Password.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUser_Password_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUser_Password_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUser_Password_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUser_Password_Res,
  },
  user_token: {
    path: '/typedb.protocol.TypeDBCluster/user_token',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUser.Token.Req,
    responseType: cluster_cluster_user_pb.ClusterUser.Token.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUser_Token_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUser_Token_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUser_Token_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUser_Token_Res,
  },
  user_delete: {
    path: '/typedb.protocol.TypeDBCluster/user_delete',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_user_pb.ClusterUser.Delete.Req,
    responseType: cluster_cluster_user_pb.ClusterUser.Delete.Res,
    requestSerialize: serialize_typedb_protocol_ClusterUser_Delete_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterUser_Delete_Req,
    responseSerialize: serialize_typedb_protocol_ClusterUser_Delete_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterUser_Delete_Res,
  },
  // Database Manager API
databases_get: {
    path: '/typedb.protocol.TypeDBCluster/databases_get',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_database_pb.ClusterDatabaseManager.Get.Req,
    responseType: cluster_cluster_database_pb.ClusterDatabaseManager.Get.Res,
    requestSerialize: serialize_typedb_protocol_ClusterDatabaseManager_Get_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterDatabaseManager_Get_Req,
    responseSerialize: serialize_typedb_protocol_ClusterDatabaseManager_Get_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterDatabaseManager_Get_Res,
  },
  databases_all: {
    path: '/typedb.protocol.TypeDBCluster/databases_all',
    requestStream: false,
    responseStream: false,
    requestType: cluster_cluster_database_pb.ClusterDatabaseManager.All.Req,
    responseType: cluster_cluster_database_pb.ClusterDatabaseManager.All.Res,
    requestSerialize: serialize_typedb_protocol_ClusterDatabaseManager_All_Req,
    requestDeserialize: deserialize_typedb_protocol_ClusterDatabaseManager_All_Req,
    responseSerialize: serialize_typedb_protocol_ClusterDatabaseManager_All_Res,
    responseDeserialize: deserialize_typedb_protocol_ClusterDatabaseManager_All_Res,
  },
};

exports.TypeDBClusterClient = grpc.makeGenericClientConstructor(TypeDBClusterService);
