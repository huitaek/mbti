// package: typedb.protocol
// file: cluster/cluster_database.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class ClusterDatabaseManager extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ClusterDatabaseManager.AsObject;
    static toObject(includeInstance: boolean, msg: ClusterDatabaseManager): ClusterDatabaseManager.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ClusterDatabaseManager, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ClusterDatabaseManager;
    static deserializeBinaryFromReader(message: ClusterDatabaseManager, reader: jspb.BinaryReader): ClusterDatabaseManager;
}

export namespace ClusterDatabaseManager {
    export type AsObject = {
    }


    export class Get extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Get.AsObject;
        static toObject(includeInstance: boolean, msg: Get): Get.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Get, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Get;
        static deserializeBinaryFromReader(message: Get, reader: jspb.BinaryReader): Get;
    }

    export namespace Get {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getName(): string;
            setName(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                name: string,
            }
        }

        export class Res extends jspb.Message { 

            hasDatabase(): boolean;
            clearDatabase(): void;
            getDatabase(): ClusterDatabase | undefined;
            setDatabase(value?: ClusterDatabase): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                database?: ClusterDatabase.AsObject,
            }
        }

    }

    export class All extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): All.AsObject;
        static toObject(includeInstance: boolean, msg: All): All.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: All, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): All;
        static deserializeBinaryFromReader(message: All, reader: jspb.BinaryReader): All;
    }

    export namespace All {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 
            clearDatabasesList(): void;
            getDatabasesList(): Array<ClusterDatabase>;
            setDatabasesList(value: Array<ClusterDatabase>): Res;
            addDatabases(value?: ClusterDatabase, index?: number): ClusterDatabase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                databasesList: Array<ClusterDatabase.AsObject>,
            }
        }

    }

}

export class ClusterDatabase extends jspb.Message { 
    getName(): string;
    setName(value: string): ClusterDatabase;
    clearReplicasList(): void;
    getReplicasList(): Array<ClusterDatabase.Replica>;
    setReplicasList(value: Array<ClusterDatabase.Replica>): ClusterDatabase;
    addReplicas(value?: ClusterDatabase.Replica, index?: number): ClusterDatabase.Replica;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ClusterDatabase.AsObject;
    static toObject(includeInstance: boolean, msg: ClusterDatabase): ClusterDatabase.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ClusterDatabase, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ClusterDatabase;
    static deserializeBinaryFromReader(message: ClusterDatabase, reader: jspb.BinaryReader): ClusterDatabase;
}

export namespace ClusterDatabase {
    export type AsObject = {
        name: string,
        replicasList: Array<ClusterDatabase.Replica.AsObject>,
    }


    export class Replica extends jspb.Message { 
        getAddress(): string;
        setAddress(value: string): Replica;
        getPrimary(): boolean;
        setPrimary(value: boolean): Replica;
        getPreferred(): boolean;
        setPreferred(value: boolean): Replica;
        getTerm(): number;
        setTerm(value: number): Replica;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Replica.AsObject;
        static toObject(includeInstance: boolean, msg: Replica): Replica.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Replica, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Replica;
        static deserializeBinaryFromReader(message: Replica, reader: jspb.BinaryReader): Replica;
    }

    export namespace Replica {
        export type AsObject = {
            address: string,
            primary: boolean,
            preferred: boolean,
            term: number,
        }
    }

}
