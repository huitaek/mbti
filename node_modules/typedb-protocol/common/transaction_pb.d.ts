// package: typedb.protocol
// file: common/transaction.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as common_concept_pb from "../common/concept_pb";
import * as common_logic_pb from "../common/logic_pb";
import * as common_options_pb from "../common/options_pb";
import * as common_query_pb from "../common/query_pb";

export class Transaction extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Transaction.AsObject;
    static toObject(includeInstance: boolean, msg: Transaction): Transaction.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Transaction, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Transaction;
    static deserializeBinaryFromReader(message: Transaction, reader: jspb.BinaryReader): Transaction;
}

export namespace Transaction {
    export type AsObject = {
    }


    export class Client extends jspb.Message { 
        clearReqsList(): void;
        getReqsList(): Array<Transaction.Req>;
        setReqsList(value: Array<Transaction.Req>): Client;
        addReqs(value?: Transaction.Req, index?: number): Transaction.Req;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Client.AsObject;
        static toObject(includeInstance: boolean, msg: Client): Client.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Client, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Client;
        static deserializeBinaryFromReader(message: Client, reader: jspb.BinaryReader): Client;
    }

    export namespace Client {
        export type AsObject = {
            reqsList: Array<Transaction.Req.AsObject>,
        }
    }

    export class Server extends jspb.Message { 

        hasRes(): boolean;
        clearRes(): void;
        getRes(): Transaction.Res | undefined;
        setRes(value?: Transaction.Res): Server;

        hasResPart(): boolean;
        clearResPart(): void;
        getResPart(): Transaction.ResPart | undefined;
        setResPart(value?: Transaction.ResPart): Server;

        getServerCase(): Server.ServerCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Server.AsObject;
        static toObject(includeInstance: boolean, msg: Server): Server.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Server, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Server;
        static deserializeBinaryFromReader(message: Server, reader: jspb.BinaryReader): Server;
    }

    export namespace Server {
        export type AsObject = {
            res?: Transaction.Res.AsObject,
            resPart?: Transaction.ResPart.AsObject,
        }

        export enum ServerCase {
            SERVER_NOT_SET = 0,
            RES = 2,
            RES_PART = 3,
        }

    }

    export class Req extends jspb.Message { 
        getReqId(): Uint8Array | string;
        getReqId_asU8(): Uint8Array;
        getReqId_asB64(): string;
        setReqId(value: Uint8Array | string): Req;

        getMetadataMap(): jspb.Map<string, string>;
        clearMetadataMap(): void;

        hasOpenReq(): boolean;
        clearOpenReq(): void;
        getOpenReq(): Transaction.Open.Req | undefined;
        setOpenReq(value?: Transaction.Open.Req): Req;

        hasStreamReq(): boolean;
        clearStreamReq(): void;
        getStreamReq(): Transaction.Stream.Req | undefined;
        setStreamReq(value?: Transaction.Stream.Req): Req;

        hasCommitReq(): boolean;
        clearCommitReq(): void;
        getCommitReq(): Transaction.Commit.Req | undefined;
        setCommitReq(value?: Transaction.Commit.Req): Req;

        hasRollbackReq(): boolean;
        clearRollbackReq(): void;
        getRollbackReq(): Transaction.Rollback.Req | undefined;
        setRollbackReq(value?: Transaction.Rollback.Req): Req;

        hasQueryManagerReq(): boolean;
        clearQueryManagerReq(): void;
        getQueryManagerReq(): common_query_pb.QueryManager.Req | undefined;
        setQueryManagerReq(value?: common_query_pb.QueryManager.Req): Req;

        hasConceptManagerReq(): boolean;
        clearConceptManagerReq(): void;
        getConceptManagerReq(): common_concept_pb.ConceptManager.Req | undefined;
        setConceptManagerReq(value?: common_concept_pb.ConceptManager.Req): Req;

        hasLogicManagerReq(): boolean;
        clearLogicManagerReq(): void;
        getLogicManagerReq(): common_logic_pb.LogicManager.Req | undefined;
        setLogicManagerReq(value?: common_logic_pb.LogicManager.Req): Req;

        hasRuleReq(): boolean;
        clearRuleReq(): void;
        getRuleReq(): common_logic_pb.Rule.Req | undefined;
        setRuleReq(value?: common_logic_pb.Rule.Req): Req;

        hasTypeReq(): boolean;
        clearTypeReq(): void;
        getTypeReq(): common_concept_pb.Type.Req | undefined;
        setTypeReq(value?: common_concept_pb.Type.Req): Req;

        hasThingReq(): boolean;
        clearThingReq(): void;
        getThingReq(): common_concept_pb.Thing.Req | undefined;
        setThingReq(value?: common_concept_pb.Thing.Req): Req;

        getReqCase(): Req.ReqCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Req.AsObject;
        static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Req;
        static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
    }

    export namespace Req {
        export type AsObject = {
            reqId: Uint8Array | string,

            metadataMap: Array<[string, string]>,
            openReq?: Transaction.Open.Req.AsObject,
            streamReq?: Transaction.Stream.Req.AsObject,
            commitReq?: Transaction.Commit.Req.AsObject,
            rollbackReq?: Transaction.Rollback.Req.AsObject,
            queryManagerReq?: common_query_pb.QueryManager.Req.AsObject,
            conceptManagerReq?: common_concept_pb.ConceptManager.Req.AsObject,
            logicManagerReq?: common_logic_pb.LogicManager.Req.AsObject,
            ruleReq?: common_logic_pb.Rule.Req.AsObject,
            typeReq?: common_concept_pb.Type.Req.AsObject,
            thingReq?: common_concept_pb.Thing.Req.AsObject,
        }

        export enum ReqCase {
            REQ_NOT_SET = 0,
            OPEN_REQ = 3,
            STREAM_REQ = 4,
            COMMIT_REQ = 5,
            ROLLBACK_REQ = 6,
            QUERY_MANAGER_REQ = 7,
            CONCEPT_MANAGER_REQ = 8,
            LOGIC_MANAGER_REQ = 9,
            RULE_REQ = 10,
            TYPE_REQ = 11,
            THING_REQ = 12,
        }

    }

    export class Res extends jspb.Message { 
        getReqId(): Uint8Array | string;
        getReqId_asU8(): Uint8Array;
        getReqId_asB64(): string;
        setReqId(value: Uint8Array | string): Res;

        hasOpenRes(): boolean;
        clearOpenRes(): void;
        getOpenRes(): Transaction.Open.Res | undefined;
        setOpenRes(value?: Transaction.Open.Res): Res;

        hasCommitRes(): boolean;
        clearCommitRes(): void;
        getCommitRes(): Transaction.Commit.Res | undefined;
        setCommitRes(value?: Transaction.Commit.Res): Res;

        hasRollbackRes(): boolean;
        clearRollbackRes(): void;
        getRollbackRes(): Transaction.Rollback.Res | undefined;
        setRollbackRes(value?: Transaction.Rollback.Res): Res;

        hasQueryManagerRes(): boolean;
        clearQueryManagerRes(): void;
        getQueryManagerRes(): common_query_pb.QueryManager.Res | undefined;
        setQueryManagerRes(value?: common_query_pb.QueryManager.Res): Res;

        hasConceptManagerRes(): boolean;
        clearConceptManagerRes(): void;
        getConceptManagerRes(): common_concept_pb.ConceptManager.Res | undefined;
        setConceptManagerRes(value?: common_concept_pb.ConceptManager.Res): Res;

        hasLogicManagerRes(): boolean;
        clearLogicManagerRes(): void;
        getLogicManagerRes(): common_logic_pb.LogicManager.Res | undefined;
        setLogicManagerRes(value?: common_logic_pb.LogicManager.Res): Res;

        hasRuleRes(): boolean;
        clearRuleRes(): void;
        getRuleRes(): common_logic_pb.Rule.Res | undefined;
        setRuleRes(value?: common_logic_pb.Rule.Res): Res;

        hasTypeRes(): boolean;
        clearTypeRes(): void;
        getTypeRes(): common_concept_pb.Type.Res | undefined;
        setTypeRes(value?: common_concept_pb.Type.Res): Res;

        hasThingRes(): boolean;
        clearThingRes(): void;
        getThingRes(): common_concept_pb.Thing.Res | undefined;
        setThingRes(value?: common_concept_pb.Thing.Res): Res;

        getResCase(): Res.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Res.AsObject;
        static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Res;
        static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
    }

    export namespace Res {
        export type AsObject = {
            reqId: Uint8Array | string,
            openRes?: Transaction.Open.Res.AsObject,
            commitRes?: Transaction.Commit.Res.AsObject,
            rollbackRes?: Transaction.Rollback.Res.AsObject,
            queryManagerRes?: common_query_pb.QueryManager.Res.AsObject,
            conceptManagerRes?: common_concept_pb.ConceptManager.Res.AsObject,
            logicManagerRes?: common_logic_pb.LogicManager.Res.AsObject,
            ruleRes?: common_logic_pb.Rule.Res.AsObject,
            typeRes?: common_concept_pb.Type.Res.AsObject,
            thingRes?: common_concept_pb.Thing.Res.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            OPEN_RES = 2,
            COMMIT_RES = 3,
            ROLLBACK_RES = 4,
            QUERY_MANAGER_RES = 5,
            CONCEPT_MANAGER_RES = 6,
            LOGIC_MANAGER_RES = 7,
            RULE_RES = 8,
            TYPE_RES = 9,
            THING_RES = 10,
        }

    }

    export class ResPart extends jspb.Message { 
        getReqId(): Uint8Array | string;
        getReqId_asU8(): Uint8Array;
        getReqId_asB64(): string;
        setReqId(value: Uint8Array | string): ResPart;

        hasStreamResPart(): boolean;
        clearStreamResPart(): void;
        getStreamResPart(): Transaction.Stream.ResPart | undefined;
        setStreamResPart(value?: Transaction.Stream.ResPart): ResPart;

        hasQueryManagerResPart(): boolean;
        clearQueryManagerResPart(): void;
        getQueryManagerResPart(): common_query_pb.QueryManager.ResPart | undefined;
        setQueryManagerResPart(value?: common_query_pb.QueryManager.ResPart): ResPart;

        hasLogicManagerResPart(): boolean;
        clearLogicManagerResPart(): void;
        getLogicManagerResPart(): common_logic_pb.LogicManager.ResPart | undefined;
        setLogicManagerResPart(value?: common_logic_pb.LogicManager.ResPart): ResPart;

        hasTypeResPart(): boolean;
        clearTypeResPart(): void;
        getTypeResPart(): common_concept_pb.Type.ResPart | undefined;
        setTypeResPart(value?: common_concept_pb.Type.ResPart): ResPart;

        hasThingResPart(): boolean;
        clearThingResPart(): void;
        getThingResPart(): common_concept_pb.Thing.ResPart | undefined;
        setThingResPart(value?: common_concept_pb.Thing.ResPart): ResPart;

        getResCase(): ResPart.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): ResPart.AsObject;
        static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): ResPart;
        static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
    }

    export namespace ResPart {
        export type AsObject = {
            reqId: Uint8Array | string,
            streamResPart?: Transaction.Stream.ResPart.AsObject,
            queryManagerResPart?: common_query_pb.QueryManager.ResPart.AsObject,
            logicManagerResPart?: common_logic_pb.LogicManager.ResPart.AsObject,
            typeResPart?: common_concept_pb.Type.ResPart.AsObject,
            thingResPart?: common_concept_pb.Thing.ResPart.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            STREAM_RES_PART = 2,
            QUERY_MANAGER_RES_PART = 3,
            LOGIC_MANAGER_RES_PART = 4,
            TYPE_RES_PART = 5,
            THING_RES_PART = 6,
        }

    }

    export class Open extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Open.AsObject;
        static toObject(includeInstance: boolean, msg: Open): Open.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Open, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Open;
        static deserializeBinaryFromReader(message: Open, reader: jspb.BinaryReader): Open;
    }

    export namespace Open {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getSessionId(): Uint8Array | string;
            getSessionId_asU8(): Uint8Array;
            getSessionId_asB64(): string;
            setSessionId(value: Uint8Array | string): Req;
            getType(): Transaction.Type;
            setType(value: Transaction.Type): Req;

            hasOptions(): boolean;
            clearOptions(): void;
            getOptions(): common_options_pb.Options | undefined;
            setOptions(value?: common_options_pb.Options): Req;
            getNetworkLatencyMillis(): number;
            setNetworkLatencyMillis(value: number): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                sessionId: Uint8Array | string,
                type: Transaction.Type,
                options?: common_options_pb.Options.AsObject,
                networkLatencyMillis: number,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class Stream extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Stream.AsObject;
        static toObject(includeInstance: boolean, msg: Stream): Stream.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Stream, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Stream;
        static deserializeBinaryFromReader(message: Stream, reader: jspb.BinaryReader): Stream;
    }

    export namespace Stream {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            getState(): Transaction.Stream.State;
            setState(value: Transaction.Stream.State): ResPart;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                state: Transaction.Stream.State,
            }
        }


        export enum State {
    CONTINUE = 0,
    DONE = 1,
        }

    }

    export class Commit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Commit.AsObject;
        static toObject(includeInstance: boolean, msg: Commit): Commit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Commit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Commit;
        static deserializeBinaryFromReader(message: Commit, reader: jspb.BinaryReader): Commit;
    }

    export namespace Commit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class Rollback extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Rollback.AsObject;
        static toObject(includeInstance: boolean, msg: Rollback): Rollback.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Rollback, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Rollback;
        static deserializeBinaryFromReader(message: Rollback, reader: jspb.BinaryReader): Rollback;
    }

    export namespace Rollback {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }


    export enum Type {
    READ = 0,
    WRITE = 1,
    }

}
