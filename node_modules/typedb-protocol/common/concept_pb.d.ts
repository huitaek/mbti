// package: typedb.protocol
// file: common/concept.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class ConceptManager extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ConceptManager.AsObject;
    static toObject(includeInstance: boolean, msg: ConceptManager): ConceptManager.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ConceptManager, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ConceptManager;
    static deserializeBinaryFromReader(message: ConceptManager, reader: jspb.BinaryReader): ConceptManager;
}

export namespace ConceptManager {
    export type AsObject = {
    }


    export class Req extends jspb.Message { 

        hasGetThingTypeReq(): boolean;
        clearGetThingTypeReq(): void;
        getGetThingTypeReq(): ConceptManager.GetThingType.Req | undefined;
        setGetThingTypeReq(value?: ConceptManager.GetThingType.Req): Req;

        hasGetThingReq(): boolean;
        clearGetThingReq(): void;
        getGetThingReq(): ConceptManager.GetThing.Req | undefined;
        setGetThingReq(value?: ConceptManager.GetThing.Req): Req;

        hasPutEntityTypeReq(): boolean;
        clearPutEntityTypeReq(): void;
        getPutEntityTypeReq(): ConceptManager.PutEntityType.Req | undefined;
        setPutEntityTypeReq(value?: ConceptManager.PutEntityType.Req): Req;

        hasPutAttributeTypeReq(): boolean;
        clearPutAttributeTypeReq(): void;
        getPutAttributeTypeReq(): ConceptManager.PutAttributeType.Req | undefined;
        setPutAttributeTypeReq(value?: ConceptManager.PutAttributeType.Req): Req;

        hasPutRelationTypeReq(): boolean;
        clearPutRelationTypeReq(): void;
        getPutRelationTypeReq(): ConceptManager.PutRelationType.Req | undefined;
        setPutRelationTypeReq(value?: ConceptManager.PutRelationType.Req): Req;

        getReqCase(): Req.ReqCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Req.AsObject;
        static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Req;
        static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
    }

    export namespace Req {
        export type AsObject = {
            getThingTypeReq?: ConceptManager.GetThingType.Req.AsObject,
            getThingReq?: ConceptManager.GetThing.Req.AsObject,
            putEntityTypeReq?: ConceptManager.PutEntityType.Req.AsObject,
            putAttributeTypeReq?: ConceptManager.PutAttributeType.Req.AsObject,
            putRelationTypeReq?: ConceptManager.PutRelationType.Req.AsObject,
        }

        export enum ReqCase {
            REQ_NOT_SET = 0,
            GET_THING_TYPE_REQ = 1,
            GET_THING_REQ = 2,
            PUT_ENTITY_TYPE_REQ = 3,
            PUT_ATTRIBUTE_TYPE_REQ = 4,
            PUT_RELATION_TYPE_REQ = 5,
        }

    }

    export class Res extends jspb.Message { 

        hasGetThingTypeRes(): boolean;
        clearGetThingTypeRes(): void;
        getGetThingTypeRes(): ConceptManager.GetThingType.Res | undefined;
        setGetThingTypeRes(value?: ConceptManager.GetThingType.Res): Res;

        hasGetThingRes(): boolean;
        clearGetThingRes(): void;
        getGetThingRes(): ConceptManager.GetThing.Res | undefined;
        setGetThingRes(value?: ConceptManager.GetThing.Res): Res;

        hasPutEntityTypeRes(): boolean;
        clearPutEntityTypeRes(): void;
        getPutEntityTypeRes(): ConceptManager.PutEntityType.Res | undefined;
        setPutEntityTypeRes(value?: ConceptManager.PutEntityType.Res): Res;

        hasPutAttributeTypeRes(): boolean;
        clearPutAttributeTypeRes(): void;
        getPutAttributeTypeRes(): ConceptManager.PutAttributeType.Res | undefined;
        setPutAttributeTypeRes(value?: ConceptManager.PutAttributeType.Res): Res;

        hasPutRelationTypeRes(): boolean;
        clearPutRelationTypeRes(): void;
        getPutRelationTypeRes(): ConceptManager.PutRelationType.Res | undefined;
        setPutRelationTypeRes(value?: ConceptManager.PutRelationType.Res): Res;

        getResCase(): Res.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Res.AsObject;
        static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Res;
        static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
    }

    export namespace Res {
        export type AsObject = {
            getThingTypeRes?: ConceptManager.GetThingType.Res.AsObject,
            getThingRes?: ConceptManager.GetThing.Res.AsObject,
            putEntityTypeRes?: ConceptManager.PutEntityType.Res.AsObject,
            putAttributeTypeRes?: ConceptManager.PutAttributeType.Res.AsObject,
            putRelationTypeRes?: ConceptManager.PutRelationType.Res.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            GET_THING_TYPE_RES = 1,
            GET_THING_RES = 2,
            PUT_ENTITY_TYPE_RES = 3,
            PUT_ATTRIBUTE_TYPE_RES = 4,
            PUT_RELATION_TYPE_RES = 5,
        }

    }

    export class GetThingType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetThingType.AsObject;
        static toObject(includeInstance: boolean, msg: GetThingType): GetThingType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetThingType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetThingType;
        static deserializeBinaryFromReader(message: GetThingType, reader: jspb.BinaryReader): GetThingType;
    }

    export namespace GetThingType {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            hasThingType(): boolean;
            clearThingType(): void;
            getThingType(): Type | undefined;
            setThingType(value?: Type): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                thingType?: Type.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                THING_TYPE = 1,
            }

        }

    }

    export class GetThing extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetThing.AsObject;
        static toObject(includeInstance: boolean, msg: GetThing): GetThing.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetThing, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetThing;
        static deserializeBinaryFromReader(message: GetThing, reader: jspb.BinaryReader): GetThing;
    }

    export namespace GetThing {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getIid(): Uint8Array | string;
            getIid_asU8(): Uint8Array;
            getIid_asB64(): string;
            setIid(value: Uint8Array | string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                iid: Uint8Array | string,
            }
        }

        export class Res extends jspb.Message { 

            hasThing(): boolean;
            clearThing(): void;
            getThing(): Thing | undefined;
            setThing(value?: Thing): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                thing?: Thing.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                THING = 1,
            }

        }

    }

    export class PutEntityType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): PutEntityType.AsObject;
        static toObject(includeInstance: boolean, msg: PutEntityType): PutEntityType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: PutEntityType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): PutEntityType;
        static deserializeBinaryFromReader(message: PutEntityType, reader: jspb.BinaryReader): PutEntityType;
    }

    export namespace PutEntityType {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            hasEntityType(): boolean;
            clearEntityType(): void;
            getEntityType(): Type | undefined;
            setEntityType(value?: Type): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                entityType?: Type.AsObject,
            }
        }

    }

    export class PutAttributeType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): PutAttributeType.AsObject;
        static toObject(includeInstance: boolean, msg: PutAttributeType): PutAttributeType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: PutAttributeType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): PutAttributeType;
        static deserializeBinaryFromReader(message: PutAttributeType, reader: jspb.BinaryReader): PutAttributeType;
    }

    export namespace PutAttributeType {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;
            getValueType(): AttributeType.ValueType;
            setValueType(value: AttributeType.ValueType): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
                valueType: AttributeType.ValueType,
            }
        }

        export class Res extends jspb.Message { 

            hasAttributeType(): boolean;
            clearAttributeType(): void;
            getAttributeType(): Type | undefined;
            setAttributeType(value?: Type): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                attributeType?: Type.AsObject,
            }
        }

    }

    export class PutRelationType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): PutRelationType.AsObject;
        static toObject(includeInstance: boolean, msg: PutRelationType): PutRelationType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: PutRelationType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): PutRelationType;
        static deserializeBinaryFromReader(message: PutRelationType, reader: jspb.BinaryReader): PutRelationType;
    }

    export namespace PutRelationType {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            hasRelationType(): boolean;
            clearRelationType(): void;
            getRelationType(): Type | undefined;
            setRelationType(value?: Type): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                relationType?: Type.AsObject,
            }
        }

    }

}

export class Concept extends jspb.Message { 

    hasThing(): boolean;
    clearThing(): void;
    getThing(): Thing | undefined;
    setThing(value?: Thing): Concept;

    hasType(): boolean;
    clearType(): void;
    getType(): Type | undefined;
    setType(value?: Type): Concept;

    getConceptCase(): Concept.ConceptCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Concept.AsObject;
    static toObject(includeInstance: boolean, msg: Concept): Concept.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Concept, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Concept;
    static deserializeBinaryFromReader(message: Concept, reader: jspb.BinaryReader): Concept;
}

export namespace Concept {
    export type AsObject = {
        thing?: Thing.AsObject,
        type?: Type.AsObject,
    }

    export enum ConceptCase {
        CONCEPT_NOT_SET = 0,
        THING = 1,
        TYPE = 2,
    }

}

export class Thing extends jspb.Message { 
    getIid(): Uint8Array | string;
    getIid_asU8(): Uint8Array;
    getIid_asB64(): string;
    setIid(value: Uint8Array | string): Thing;

    hasType(): boolean;
    clearType(): void;
    getType(): Type | undefined;
    setType(value?: Type): Thing;

    hasValue(): boolean;
    clearValue(): void;
    getValue(): Attribute.Value | undefined;
    setValue(value?: Attribute.Value): Thing;
    getInferred(): boolean;
    setInferred(value: boolean): Thing;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Thing.AsObject;
    static toObject(includeInstance: boolean, msg: Thing): Thing.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Thing, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Thing;
    static deserializeBinaryFromReader(message: Thing, reader: jspb.BinaryReader): Thing;
}

export namespace Thing {
    export type AsObject = {
        iid: Uint8Array | string,
        type?: Type.AsObject,
        value?: Attribute.Value.AsObject,
        inferred: boolean,
    }


    export class Req extends jspb.Message { 
        getIid(): Uint8Array | string;
        getIid_asU8(): Uint8Array;
        getIid_asB64(): string;
        setIid(value: Uint8Array | string): Req;

        hasThingDeleteReq(): boolean;
        clearThingDeleteReq(): void;
        getThingDeleteReq(): Thing.Delete.Req | undefined;
        setThingDeleteReq(value?: Thing.Delete.Req): Req;

        hasThingGetTypeReq(): boolean;
        clearThingGetTypeReq(): void;
        getThingGetTypeReq(): Thing.GetType.Req | undefined;
        setThingGetTypeReq(value?: Thing.GetType.Req): Req;

        hasThingGetHasReq(): boolean;
        clearThingGetHasReq(): void;
        getThingGetHasReq(): Thing.GetHas.Req | undefined;
        setThingGetHasReq(value?: Thing.GetHas.Req): Req;

        hasThingSetHasReq(): boolean;
        clearThingSetHasReq(): void;
        getThingSetHasReq(): Thing.SetHas.Req | undefined;
        setThingSetHasReq(value?: Thing.SetHas.Req): Req;

        hasThingUnsetHasReq(): boolean;
        clearThingUnsetHasReq(): void;
        getThingUnsetHasReq(): Thing.UnsetHas.Req | undefined;
        setThingUnsetHasReq(value?: Thing.UnsetHas.Req): Req;

        hasThingGetRelationsReq(): boolean;
        clearThingGetRelationsReq(): void;
        getThingGetRelationsReq(): Thing.GetRelations.Req | undefined;
        setThingGetRelationsReq(value?: Thing.GetRelations.Req): Req;

        hasThingGetPlayingReq(): boolean;
        clearThingGetPlayingReq(): void;
        getThingGetPlayingReq(): Thing.GetPlaying.Req | undefined;
        setThingGetPlayingReq(value?: Thing.GetPlaying.Req): Req;

        hasRelationAddPlayerReq(): boolean;
        clearRelationAddPlayerReq(): void;
        getRelationAddPlayerReq(): Relation.AddPlayer.Req | undefined;
        setRelationAddPlayerReq(value?: Relation.AddPlayer.Req): Req;

        hasRelationRemovePlayerReq(): boolean;
        clearRelationRemovePlayerReq(): void;
        getRelationRemovePlayerReq(): Relation.RemovePlayer.Req | undefined;
        setRelationRemovePlayerReq(value?: Relation.RemovePlayer.Req): Req;

        hasRelationGetPlayersReq(): boolean;
        clearRelationGetPlayersReq(): void;
        getRelationGetPlayersReq(): Relation.GetPlayers.Req | undefined;
        setRelationGetPlayersReq(value?: Relation.GetPlayers.Req): Req;

        hasRelationGetPlayersByRoleTypeReq(): boolean;
        clearRelationGetPlayersByRoleTypeReq(): void;
        getRelationGetPlayersByRoleTypeReq(): Relation.GetPlayersByRoleType.Req | undefined;
        setRelationGetPlayersByRoleTypeReq(value?: Relation.GetPlayersByRoleType.Req): Req;

        hasRelationGetRelatingReq(): boolean;
        clearRelationGetRelatingReq(): void;
        getRelationGetRelatingReq(): Relation.GetRelating.Req | undefined;
        setRelationGetRelatingReq(value?: Relation.GetRelating.Req): Req;

        hasAttributeGetOwnersReq(): boolean;
        clearAttributeGetOwnersReq(): void;
        getAttributeGetOwnersReq(): Attribute.GetOwners.Req | undefined;
        setAttributeGetOwnersReq(value?: Attribute.GetOwners.Req): Req;

        getReqCase(): Req.ReqCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Req.AsObject;
        static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Req;
        static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
    }

    export namespace Req {
        export type AsObject = {
            iid: Uint8Array | string,
            thingDeleteReq?: Thing.Delete.Req.AsObject,
            thingGetTypeReq?: Thing.GetType.Req.AsObject,
            thingGetHasReq?: Thing.GetHas.Req.AsObject,
            thingSetHasReq?: Thing.SetHas.Req.AsObject,
            thingUnsetHasReq?: Thing.UnsetHas.Req.AsObject,
            thingGetRelationsReq?: Thing.GetRelations.Req.AsObject,
            thingGetPlayingReq?: Thing.GetPlaying.Req.AsObject,
            relationAddPlayerReq?: Relation.AddPlayer.Req.AsObject,
            relationRemovePlayerReq?: Relation.RemovePlayer.Req.AsObject,
            relationGetPlayersReq?: Relation.GetPlayers.Req.AsObject,
            relationGetPlayersByRoleTypeReq?: Relation.GetPlayersByRoleType.Req.AsObject,
            relationGetRelatingReq?: Relation.GetRelating.Req.AsObject,
            attributeGetOwnersReq?: Attribute.GetOwners.Req.AsObject,
        }

        export enum ReqCase {
            REQ_NOT_SET = 0,
            THING_DELETE_REQ = 100,
            THING_GET_TYPE_REQ = 101,
            THING_GET_HAS_REQ = 102,
            THING_SET_HAS_REQ = 103,
            THING_UNSET_HAS_REQ = 104,
            THING_GET_RELATIONS_REQ = 105,
            THING_GET_PLAYING_REQ = 106,
            RELATION_ADD_PLAYER_REQ = 200,
            RELATION_REMOVE_PLAYER_REQ = 201,
            RELATION_GET_PLAYERS_REQ = 202,
            RELATION_GET_PLAYERS_BY_ROLE_TYPE_REQ = 203,
            RELATION_GET_RELATING_REQ = 204,
            ATTRIBUTE_GET_OWNERS_REQ = 300,
        }

    }

    export class Res extends jspb.Message { 

        hasThingDeleteRes(): boolean;
        clearThingDeleteRes(): void;
        getThingDeleteRes(): Thing.Delete.Res | undefined;
        setThingDeleteRes(value?: Thing.Delete.Res): Res;

        hasThingGetTypeRes(): boolean;
        clearThingGetTypeRes(): void;
        getThingGetTypeRes(): Thing.GetType.Res | undefined;
        setThingGetTypeRes(value?: Thing.GetType.Res): Res;

        hasThingSetHasRes(): boolean;
        clearThingSetHasRes(): void;
        getThingSetHasRes(): Thing.SetHas.Res | undefined;
        setThingSetHasRes(value?: Thing.SetHas.Res): Res;

        hasThingUnsetHasRes(): boolean;
        clearThingUnsetHasRes(): void;
        getThingUnsetHasRes(): Thing.UnsetHas.Res | undefined;
        setThingUnsetHasRes(value?: Thing.UnsetHas.Res): Res;

        hasRelationAddPlayerRes(): boolean;
        clearRelationAddPlayerRes(): void;
        getRelationAddPlayerRes(): Relation.AddPlayer.Res | undefined;
        setRelationAddPlayerRes(value?: Relation.AddPlayer.Res): Res;

        hasRelationRemovePlayerRes(): boolean;
        clearRelationRemovePlayerRes(): void;
        getRelationRemovePlayerRes(): Relation.RemovePlayer.Res | undefined;
        setRelationRemovePlayerRes(value?: Relation.RemovePlayer.Res): Res;

        getResCase(): Res.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Res.AsObject;
        static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Res;
        static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
    }

    export namespace Res {
        export type AsObject = {
            thingDeleteRes?: Thing.Delete.Res.AsObject,
            thingGetTypeRes?: Thing.GetType.Res.AsObject,
            thingSetHasRes?: Thing.SetHas.Res.AsObject,
            thingUnsetHasRes?: Thing.UnsetHas.Res.AsObject,
            relationAddPlayerRes?: Relation.AddPlayer.Res.AsObject,
            relationRemovePlayerRes?: Relation.RemovePlayer.Res.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            THING_DELETE_RES = 100,
            THING_GET_TYPE_RES = 101,
            THING_SET_HAS_RES = 102,
            THING_UNSET_HAS_RES = 103,
            RELATION_ADD_PLAYER_RES = 200,
            RELATION_REMOVE_PLAYER_RES = 201,
        }

    }

    export class ResPart extends jspb.Message { 

        hasThingGetHasResPart(): boolean;
        clearThingGetHasResPart(): void;
        getThingGetHasResPart(): Thing.GetHas.ResPart | undefined;
        setThingGetHasResPart(value?: Thing.GetHas.ResPart): ResPart;

        hasThingGetRelationsResPart(): boolean;
        clearThingGetRelationsResPart(): void;
        getThingGetRelationsResPart(): Thing.GetRelations.ResPart | undefined;
        setThingGetRelationsResPart(value?: Thing.GetRelations.ResPart): ResPart;

        hasThingGetPlayingResPart(): boolean;
        clearThingGetPlayingResPart(): void;
        getThingGetPlayingResPart(): Thing.GetPlaying.ResPart | undefined;
        setThingGetPlayingResPart(value?: Thing.GetPlaying.ResPart): ResPart;

        hasRelationGetPlayersResPart(): boolean;
        clearRelationGetPlayersResPart(): void;
        getRelationGetPlayersResPart(): Relation.GetPlayers.ResPart | undefined;
        setRelationGetPlayersResPart(value?: Relation.GetPlayers.ResPart): ResPart;

        hasRelationGetPlayersByRoleTypeResPart(): boolean;
        clearRelationGetPlayersByRoleTypeResPart(): void;
        getRelationGetPlayersByRoleTypeResPart(): Relation.GetPlayersByRoleType.ResPart | undefined;
        setRelationGetPlayersByRoleTypeResPart(value?: Relation.GetPlayersByRoleType.ResPart): ResPart;

        hasRelationGetRelatingResPart(): boolean;
        clearRelationGetRelatingResPart(): void;
        getRelationGetRelatingResPart(): Relation.GetRelating.ResPart | undefined;
        setRelationGetRelatingResPart(value?: Relation.GetRelating.ResPart): ResPart;

        hasAttributeGetOwnersResPart(): boolean;
        clearAttributeGetOwnersResPart(): void;
        getAttributeGetOwnersResPart(): Attribute.GetOwners.ResPart | undefined;
        setAttributeGetOwnersResPart(value?: Attribute.GetOwners.ResPart): ResPart;

        getResCase(): ResPart.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): ResPart.AsObject;
        static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): ResPart;
        static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
    }

    export namespace ResPart {
        export type AsObject = {
            thingGetHasResPart?: Thing.GetHas.ResPart.AsObject,
            thingGetRelationsResPart?: Thing.GetRelations.ResPart.AsObject,
            thingGetPlayingResPart?: Thing.GetPlaying.ResPart.AsObject,
            relationGetPlayersResPart?: Relation.GetPlayers.ResPart.AsObject,
            relationGetPlayersByRoleTypeResPart?: Relation.GetPlayersByRoleType.ResPart.AsObject,
            relationGetRelatingResPart?: Relation.GetRelating.ResPart.AsObject,
            attributeGetOwnersResPart?: Attribute.GetOwners.ResPart.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            THING_GET_HAS_RES_PART = 100,
            THING_GET_RELATIONS_RES_PART = 101,
            THING_GET_PLAYING_RES_PART = 102,
            RELATION_GET_PLAYERS_RES_PART = 200,
            RELATION_GET_PLAYERS_BY_ROLE_TYPE_RES_PART = 201,
            RELATION_GET_RELATING_RES_PART = 202,
            ATTRIBUTE_GET_OWNERS_RES_PART = 300,
        }

    }

    export class Delete extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Delete.AsObject;
        static toObject(includeInstance: boolean, msg: Delete): Delete.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Delete, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Delete;
        static deserializeBinaryFromReader(message: Delete, reader: jspb.BinaryReader): Delete;
    }

    export namespace Delete {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetType.AsObject;
        static toObject(includeInstance: boolean, msg: GetType): GetType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetType;
        static deserializeBinaryFromReader(message: GetType, reader: jspb.BinaryReader): GetType;
    }

    export namespace GetType {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            hasThingType(): boolean;
            clearThingType(): void;
            getThingType(): Type | undefined;
            setThingType(value?: Type): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                thingType?: Type.AsObject,
            }
        }

    }

    export class SetHas extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetHas.AsObject;
        static toObject(includeInstance: boolean, msg: SetHas): SetHas.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetHas, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetHas;
        static deserializeBinaryFromReader(message: SetHas, reader: jspb.BinaryReader): SetHas;
    }

    export namespace SetHas {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasAttribute(): boolean;
            clearAttribute(): void;
            getAttribute(): Thing | undefined;
            setAttribute(value?: Thing): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attribute?: Thing.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class UnsetHas extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): UnsetHas.AsObject;
        static toObject(includeInstance: boolean, msg: UnsetHas): UnsetHas.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: UnsetHas, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): UnsetHas;
        static deserializeBinaryFromReader(message: UnsetHas, reader: jspb.BinaryReader): UnsetHas;
    }

    export namespace UnsetHas {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasAttribute(): boolean;
            clearAttribute(): void;
            getAttribute(): Thing | undefined;
            setAttribute(value?: Thing): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attribute?: Thing.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetHas extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetHas.AsObject;
        static toObject(includeInstance: boolean, msg: GetHas): GetHas.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetHas, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetHas;
        static deserializeBinaryFromReader(message: GetHas, reader: jspb.BinaryReader): GetHas;
    }

    export namespace GetHas {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            clearAttributeTypesList(): void;
            getAttributeTypesList(): Array<Type>;
            setAttributeTypesList(value: Array<Type>): Req;
            addAttributeTypes(value?: Type, index?: number): Type;
            getKeysOnly(): boolean;
            setKeysOnly(value: boolean): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attributeTypesList: Array<Type.AsObject>,
                keysOnly: boolean,
            }
        }

        export class ResPart extends jspb.Message { 
            clearAttributesList(): void;
            getAttributesList(): Array<Thing>;
            setAttributesList(value: Array<Thing>): ResPart;
            addAttributes(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                attributesList: Array<Thing.AsObject>,
            }
        }

    }

    export class GetPlaying extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlaying.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlaying): GetPlaying.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlaying, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlaying;
        static deserializeBinaryFromReader(message: GetPlaying, reader: jspb.BinaryReader): GetPlaying;
    }

    export namespace GetPlaying {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetRelations extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelations.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelations): GetRelations.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelations, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelations;
        static deserializeBinaryFromReader(message: GetRelations, reader: jspb.BinaryReader): GetRelations;
    }

    export namespace GetRelations {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): Req;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

        export class ResPart extends jspb.Message { 
            clearRelationsList(): void;
            getRelationsList(): Array<Thing>;
            setRelationsList(value: Array<Thing>): ResPart;
            addRelations(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                relationsList: Array<Thing.AsObject>,
            }
        }

    }

}

export class Relation extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Relation.AsObject;
    static toObject(includeInstance: boolean, msg: Relation): Relation.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Relation, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Relation;
    static deserializeBinaryFromReader(message: Relation, reader: jspb.BinaryReader): Relation;
}

export namespace Relation {
    export type AsObject = {
    }


    export class AddPlayer extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): AddPlayer.AsObject;
        static toObject(includeInstance: boolean, msg: AddPlayer): AddPlayer.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: AddPlayer, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): AddPlayer;
        static deserializeBinaryFromReader(message: AddPlayer, reader: jspb.BinaryReader): AddPlayer;
    }

    export namespace AddPlayer {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Req;

            hasPlayer(): boolean;
            clearPlayer(): void;
            getPlayer(): Thing | undefined;
            setPlayer(value?: Thing): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleType?: Type.AsObject,
                player?: Thing.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class RemovePlayer extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): RemovePlayer.AsObject;
        static toObject(includeInstance: boolean, msg: RemovePlayer): RemovePlayer.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: RemovePlayer, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): RemovePlayer;
        static deserializeBinaryFromReader(message: RemovePlayer, reader: jspb.BinaryReader): RemovePlayer;
    }

    export namespace RemovePlayer {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Req;

            hasPlayer(): boolean;
            clearPlayer(): void;
            getPlayer(): Thing | undefined;
            setPlayer(value?: Thing): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleType?: Type.AsObject,
                player?: Thing.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetPlayers extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlayers.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlayers): GetPlayers.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlayers, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlayers;
        static deserializeBinaryFromReader(message: GetPlayers, reader: jspb.BinaryReader): GetPlayers;
    }

    export namespace GetPlayers {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): Req;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingsList(): void;
            getThingsList(): Array<Thing>;
            setThingsList(value: Array<Thing>): ResPart;
            addThings(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingsList: Array<Thing.AsObject>,
            }
        }

    }

    export class GetPlayersByRoleType extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlayersByRoleType.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlayersByRoleType): GetPlayersByRoleType.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlayersByRoleType, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlayersByRoleType;
        static deserializeBinaryFromReader(message: GetPlayersByRoleType, reader: jspb.BinaryReader): GetPlayersByRoleType;
    }

    export namespace GetPlayersByRoleType {
        export type AsObject = {
        }


        export class RoleTypeWithPlayer extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): RoleTypeWithPlayer;

            hasPlayer(): boolean;
            clearPlayer(): void;
            getPlayer(): Thing | undefined;
            setPlayer(value?: Thing): RoleTypeWithPlayer;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): RoleTypeWithPlayer.AsObject;
            static toObject(includeInstance: boolean, msg: RoleTypeWithPlayer): RoleTypeWithPlayer.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: RoleTypeWithPlayer, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): RoleTypeWithPlayer;
            static deserializeBinaryFromReader(message: RoleTypeWithPlayer, reader: jspb.BinaryReader): RoleTypeWithPlayer;
        }

        export namespace RoleTypeWithPlayer {
            export type AsObject = {
                roleType?: Type.AsObject,
                player?: Thing.AsObject,
            }
        }

        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesWithPlayersList(): void;
            getRoleTypesWithPlayersList(): Array<Relation.GetPlayersByRoleType.RoleTypeWithPlayer>;
            setRoleTypesWithPlayersList(value: Array<Relation.GetPlayersByRoleType.RoleTypeWithPlayer>): ResPart;
            addRoleTypesWithPlayers(value?: Relation.GetPlayersByRoleType.RoleTypeWithPlayer, index?: number): Relation.GetPlayersByRoleType.RoleTypeWithPlayer;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesWithPlayersList: Array<Relation.GetPlayersByRoleType.RoleTypeWithPlayer.AsObject>,
            }
        }

    }

    export class GetRelating extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelating.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelating): GetRelating.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelating, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelating;
        static deserializeBinaryFromReader(message: GetRelating, reader: jspb.BinaryReader): GetRelating;
    }

    export namespace GetRelating {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

}

export class Attribute extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Attribute.AsObject;
    static toObject(includeInstance: boolean, msg: Attribute): Attribute.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Attribute, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Attribute;
    static deserializeBinaryFromReader(message: Attribute, reader: jspb.BinaryReader): Attribute;
}

export namespace Attribute {
    export type AsObject = {
    }


    export class Value extends jspb.Message { 

        hasString(): boolean;
        clearString(): void;
        getString(): string;
        setString(value: string): Value;

        hasBoolean(): boolean;
        clearBoolean(): void;
        getBoolean(): boolean;
        setBoolean(value: boolean): Value;

        hasLong(): boolean;
        clearLong(): void;
        getLong(): number;
        setLong(value: number): Value;

        hasDouble(): boolean;
        clearDouble(): void;
        getDouble(): number;
        setDouble(value: number): Value;

        hasDateTime(): boolean;
        clearDateTime(): void;
        getDateTime(): number;
        setDateTime(value: number): Value;

        getValueCase(): Value.ValueCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Value.AsObject;
        static toObject(includeInstance: boolean, msg: Value): Value.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Value, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Value;
        static deserializeBinaryFromReader(message: Value, reader: jspb.BinaryReader): Value;
    }

    export namespace Value {
        export type AsObject = {
            string: string,
            pb_boolean: boolean,
            pb_long: number,
            pb_double: number,
            dateTime: number,
        }

        export enum ValueCase {
            VALUE_NOT_SET = 0,
            STRING = 1,
            BOOLEAN = 2,
            LONG = 3,
            DOUBLE = 4,
            DATE_TIME = 5,
        }

    }

    export class GetOwners extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwners.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwners): GetOwners.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwners, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwners;
        static deserializeBinaryFromReader(message: GetOwners, reader: jspb.BinaryReader): GetOwners;
    }

    export namespace GetOwners {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasThingType(): boolean;
            clearThingType(): void;
            getThingType(): Type | undefined;
            setThingType(value?: Type): Req;

            getFilterCase(): Req.FilterCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                thingType?: Type.AsObject,
            }

            export enum FilterCase {
                FILTER_NOT_SET = 0,
                THING_TYPE = 1,
            }

        }

        export class ResPart extends jspb.Message { 
            clearThingsList(): void;
            getThingsList(): Array<Thing>;
            setThingsList(value: Array<Thing>): ResPart;
            addThings(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingsList: Array<Thing.AsObject>,
            }
        }

    }

}

export class Type extends jspb.Message { 
    getLabel(): string;
    setLabel(value: string): Type;
    getScope(): string;
    setScope(value: string): Type;
    getEncoding(): Type.Encoding;
    setEncoding(value: Type.Encoding): Type;
    getValueType(): AttributeType.ValueType;
    setValueType(value: AttributeType.ValueType): Type;
    getRoot(): boolean;
    setRoot(value: boolean): Type;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Type.AsObject;
    static toObject(includeInstance: boolean, msg: Type): Type.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Type, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Type;
    static deserializeBinaryFromReader(message: Type, reader: jspb.BinaryReader): Type;
}

export namespace Type {
    export type AsObject = {
        label: string,
        scope: string,
        encoding: Type.Encoding,
        valueType: AttributeType.ValueType,
        root: boolean,
    }


    export class Req extends jspb.Message { 
        getLabel(): string;
        setLabel(value: string): Req;
        getScope(): string;
        setScope(value: string): Req;

        hasTypeDeleteReq(): boolean;
        clearTypeDeleteReq(): void;
        getTypeDeleteReq(): Type.Delete.Req | undefined;
        setTypeDeleteReq(value?: Type.Delete.Req): Req;

        hasTypeSetLabelReq(): boolean;
        clearTypeSetLabelReq(): void;
        getTypeSetLabelReq(): Type.SetLabel.Req | undefined;
        setTypeSetLabelReq(value?: Type.SetLabel.Req): Req;

        hasTypeIsAbstractReq(): boolean;
        clearTypeIsAbstractReq(): void;
        getTypeIsAbstractReq(): Type.IsAbstract.Req | undefined;
        setTypeIsAbstractReq(value?: Type.IsAbstract.Req): Req;

        hasTypeGetSupertypeReq(): boolean;
        clearTypeGetSupertypeReq(): void;
        getTypeGetSupertypeReq(): Type.GetSupertype.Req | undefined;
        setTypeGetSupertypeReq(value?: Type.GetSupertype.Req): Req;

        hasTypeSetSupertypeReq(): boolean;
        clearTypeSetSupertypeReq(): void;
        getTypeSetSupertypeReq(): Type.SetSupertype.Req | undefined;
        setTypeSetSupertypeReq(value?: Type.SetSupertype.Req): Req;

        hasTypeGetSupertypesReq(): boolean;
        clearTypeGetSupertypesReq(): void;
        getTypeGetSupertypesReq(): Type.GetSupertypes.Req | undefined;
        setTypeGetSupertypesReq(value?: Type.GetSupertypes.Req): Req;

        hasTypeGetSubtypesReq(): boolean;
        clearTypeGetSubtypesReq(): void;
        getTypeGetSubtypesReq(): Type.GetSubtypes.Req | undefined;
        setTypeGetSubtypesReq(value?: Type.GetSubtypes.Req): Req;

        hasTypeGetSubtypesExplicitReq(): boolean;
        clearTypeGetSubtypesExplicitReq(): void;
        getTypeGetSubtypesExplicitReq(): Type.GetSubtypesExplicit.Req | undefined;
        setTypeGetSubtypesExplicitReq(value?: Type.GetSubtypesExplicit.Req): Req;

        hasRoleTypeGetRelationTypesReq(): boolean;
        clearRoleTypeGetRelationTypesReq(): void;
        getRoleTypeGetRelationTypesReq(): RoleType.GetRelationTypes.Req | undefined;
        setRoleTypeGetRelationTypesReq(value?: RoleType.GetRelationTypes.Req): Req;

        hasRoleTypeGetPlayersReq(): boolean;
        clearRoleTypeGetPlayersReq(): void;
        getRoleTypeGetPlayersReq(): RoleType.GetPlayers.Req | undefined;
        setRoleTypeGetPlayersReq(value?: RoleType.GetPlayers.Req): Req;

        hasThingTypeGetInstancesReq(): boolean;
        clearThingTypeGetInstancesReq(): void;
        getThingTypeGetInstancesReq(): ThingType.GetInstances.Req | undefined;
        setThingTypeGetInstancesReq(value?: ThingType.GetInstances.Req): Req;

        hasThingTypeGetInstancesExplicitReq(): boolean;
        clearThingTypeGetInstancesExplicitReq(): void;
        getThingTypeGetInstancesExplicitReq(): ThingType.GetInstancesExplicit.Req | undefined;
        setThingTypeGetInstancesExplicitReq(value?: ThingType.GetInstancesExplicit.Req): Req;

        hasThingTypeSetAbstractReq(): boolean;
        clearThingTypeSetAbstractReq(): void;
        getThingTypeSetAbstractReq(): ThingType.SetAbstract.Req | undefined;
        setThingTypeSetAbstractReq(value?: ThingType.SetAbstract.Req): Req;

        hasThingTypeUnsetAbstractReq(): boolean;
        clearThingTypeUnsetAbstractReq(): void;
        getThingTypeUnsetAbstractReq(): ThingType.UnsetAbstract.Req | undefined;
        setThingTypeUnsetAbstractReq(value?: ThingType.UnsetAbstract.Req): Req;

        hasThingTypeGetOwnsReq(): boolean;
        clearThingTypeGetOwnsReq(): void;
        getThingTypeGetOwnsReq(): ThingType.GetOwns.Req | undefined;
        setThingTypeGetOwnsReq(value?: ThingType.GetOwns.Req): Req;

        hasThingTypeGetOwnsExplicitReq(): boolean;
        clearThingTypeGetOwnsExplicitReq(): void;
        getThingTypeGetOwnsExplicitReq(): ThingType.GetOwnsExplicit.Req | undefined;
        setThingTypeGetOwnsExplicitReq(value?: ThingType.GetOwnsExplicit.Req): Req;

        hasThingTypeGetOwnsOverriddenReq(): boolean;
        clearThingTypeGetOwnsOverriddenReq(): void;
        getThingTypeGetOwnsOverriddenReq(): ThingType.GetOwnsOverridden.Req | undefined;
        setThingTypeGetOwnsOverriddenReq(value?: ThingType.GetOwnsOverridden.Req): Req;

        hasThingTypeSetOwnsReq(): boolean;
        clearThingTypeSetOwnsReq(): void;
        getThingTypeSetOwnsReq(): ThingType.SetOwns.Req | undefined;
        setThingTypeSetOwnsReq(value?: ThingType.SetOwns.Req): Req;

        hasThingTypeUnsetOwnsReq(): boolean;
        clearThingTypeUnsetOwnsReq(): void;
        getThingTypeUnsetOwnsReq(): ThingType.UnsetOwns.Req | undefined;
        setThingTypeUnsetOwnsReq(value?: ThingType.UnsetOwns.Req): Req;

        hasThingTypeGetPlaysReq(): boolean;
        clearThingTypeGetPlaysReq(): void;
        getThingTypeGetPlaysReq(): ThingType.GetPlays.Req | undefined;
        setThingTypeGetPlaysReq(value?: ThingType.GetPlays.Req): Req;

        hasThingTypeGetPlaysExplicitReq(): boolean;
        clearThingTypeGetPlaysExplicitReq(): void;
        getThingTypeGetPlaysExplicitReq(): ThingType.GetPlaysExplicit.Req | undefined;
        setThingTypeGetPlaysExplicitReq(value?: ThingType.GetPlaysExplicit.Req): Req;

        hasThingTypeGetPlaysOverriddenReq(): boolean;
        clearThingTypeGetPlaysOverriddenReq(): void;
        getThingTypeGetPlaysOverriddenReq(): ThingType.GetPlaysOverridden.Req | undefined;
        setThingTypeGetPlaysOverriddenReq(value?: ThingType.GetPlaysOverridden.Req): Req;

        hasThingTypeSetPlaysReq(): boolean;
        clearThingTypeSetPlaysReq(): void;
        getThingTypeSetPlaysReq(): ThingType.SetPlays.Req | undefined;
        setThingTypeSetPlaysReq(value?: ThingType.SetPlays.Req): Req;

        hasThingTypeUnsetPlaysReq(): boolean;
        clearThingTypeUnsetPlaysReq(): void;
        getThingTypeUnsetPlaysReq(): ThingType.UnsetPlays.Req | undefined;
        setThingTypeUnsetPlaysReq(value?: ThingType.UnsetPlays.Req): Req;

        hasEntityTypeCreateReq(): boolean;
        clearEntityTypeCreateReq(): void;
        getEntityTypeCreateReq(): EntityType.Create.Req | undefined;
        setEntityTypeCreateReq(value?: EntityType.Create.Req): Req;

        hasRelationTypeCreateReq(): boolean;
        clearRelationTypeCreateReq(): void;
        getRelationTypeCreateReq(): RelationType.Create.Req | undefined;
        setRelationTypeCreateReq(value?: RelationType.Create.Req): Req;

        hasRelationTypeGetRelatesReq(): boolean;
        clearRelationTypeGetRelatesReq(): void;
        getRelationTypeGetRelatesReq(): RelationType.GetRelates.Req | undefined;
        setRelationTypeGetRelatesReq(value?: RelationType.GetRelates.Req): Req;

        hasRelationTypeGetRelatesExplicitReq(): boolean;
        clearRelationTypeGetRelatesExplicitReq(): void;
        getRelationTypeGetRelatesExplicitReq(): RelationType.GetRelatesExplicit.Req | undefined;
        setRelationTypeGetRelatesExplicitReq(value?: RelationType.GetRelatesExplicit.Req): Req;

        hasRelationTypeGetRelatesForRoleLabelReq(): boolean;
        clearRelationTypeGetRelatesForRoleLabelReq(): void;
        getRelationTypeGetRelatesForRoleLabelReq(): RelationType.GetRelatesForRoleLabel.Req | undefined;
        setRelationTypeGetRelatesForRoleLabelReq(value?: RelationType.GetRelatesForRoleLabel.Req): Req;

        hasRelationTypeGetRelatesOverriddenReq(): boolean;
        clearRelationTypeGetRelatesOverriddenReq(): void;
        getRelationTypeGetRelatesOverriddenReq(): RelationType.GetRelatesOverridden.Req | undefined;
        setRelationTypeGetRelatesOverriddenReq(value?: RelationType.GetRelatesOverridden.Req): Req;

        hasRelationTypeSetRelatesReq(): boolean;
        clearRelationTypeSetRelatesReq(): void;
        getRelationTypeSetRelatesReq(): RelationType.SetRelates.Req | undefined;
        setRelationTypeSetRelatesReq(value?: RelationType.SetRelates.Req): Req;

        hasRelationTypeUnsetRelatesReq(): boolean;
        clearRelationTypeUnsetRelatesReq(): void;
        getRelationTypeUnsetRelatesReq(): RelationType.UnsetRelates.Req | undefined;
        setRelationTypeUnsetRelatesReq(value?: RelationType.UnsetRelates.Req): Req;

        hasAttributeTypePutReq(): boolean;
        clearAttributeTypePutReq(): void;
        getAttributeTypePutReq(): AttributeType.Put.Req | undefined;
        setAttributeTypePutReq(value?: AttributeType.Put.Req): Req;

        hasAttributeTypeGetReq(): boolean;
        clearAttributeTypeGetReq(): void;
        getAttributeTypeGetReq(): AttributeType.Get.Req | undefined;
        setAttributeTypeGetReq(value?: AttributeType.Get.Req): Req;

        hasAttributeTypeGetRegexReq(): boolean;
        clearAttributeTypeGetRegexReq(): void;
        getAttributeTypeGetRegexReq(): AttributeType.GetRegex.Req | undefined;
        setAttributeTypeGetRegexReq(value?: AttributeType.GetRegex.Req): Req;

        hasAttributeTypeSetRegexReq(): boolean;
        clearAttributeTypeSetRegexReq(): void;
        getAttributeTypeSetRegexReq(): AttributeType.SetRegex.Req | undefined;
        setAttributeTypeSetRegexReq(value?: AttributeType.SetRegex.Req): Req;

        hasAttributeTypeGetOwnersReq(): boolean;
        clearAttributeTypeGetOwnersReq(): void;
        getAttributeTypeGetOwnersReq(): AttributeType.GetOwners.Req | undefined;
        setAttributeTypeGetOwnersReq(value?: AttributeType.GetOwners.Req): Req;

        hasAttributeTypeGetOwnersExplicitReq(): boolean;
        clearAttributeTypeGetOwnersExplicitReq(): void;
        getAttributeTypeGetOwnersExplicitReq(): AttributeType.GetOwnersExplicit.Req | undefined;
        setAttributeTypeGetOwnersExplicitReq(value?: AttributeType.GetOwnersExplicit.Req): Req;

        getReqCase(): Req.ReqCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Req.AsObject;
        static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Req;
        static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
    }

    export namespace Req {
        export type AsObject = {
            label: string,
            scope: string,
            typeDeleteReq?: Type.Delete.Req.AsObject,
            typeSetLabelReq?: Type.SetLabel.Req.AsObject,
            typeIsAbstractReq?: Type.IsAbstract.Req.AsObject,
            typeGetSupertypeReq?: Type.GetSupertype.Req.AsObject,
            typeSetSupertypeReq?: Type.SetSupertype.Req.AsObject,
            typeGetSupertypesReq?: Type.GetSupertypes.Req.AsObject,
            typeGetSubtypesReq?: Type.GetSubtypes.Req.AsObject,
            typeGetSubtypesExplicitReq?: Type.GetSubtypesExplicit.Req.AsObject,
            roleTypeGetRelationTypesReq?: RoleType.GetRelationTypes.Req.AsObject,
            roleTypeGetPlayersReq?: RoleType.GetPlayers.Req.AsObject,
            thingTypeGetInstancesReq?: ThingType.GetInstances.Req.AsObject,
            thingTypeGetInstancesExplicitReq?: ThingType.GetInstancesExplicit.Req.AsObject,
            thingTypeSetAbstractReq?: ThingType.SetAbstract.Req.AsObject,
            thingTypeUnsetAbstractReq?: ThingType.UnsetAbstract.Req.AsObject,
            thingTypeGetOwnsReq?: ThingType.GetOwns.Req.AsObject,
            thingTypeGetOwnsExplicitReq?: ThingType.GetOwnsExplicit.Req.AsObject,
            thingTypeGetOwnsOverriddenReq?: ThingType.GetOwnsOverridden.Req.AsObject,
            thingTypeSetOwnsReq?: ThingType.SetOwns.Req.AsObject,
            thingTypeUnsetOwnsReq?: ThingType.UnsetOwns.Req.AsObject,
            thingTypeGetPlaysReq?: ThingType.GetPlays.Req.AsObject,
            thingTypeGetPlaysExplicitReq?: ThingType.GetPlaysExplicit.Req.AsObject,
            thingTypeGetPlaysOverriddenReq?: ThingType.GetPlaysOverridden.Req.AsObject,
            thingTypeSetPlaysReq?: ThingType.SetPlays.Req.AsObject,
            thingTypeUnsetPlaysReq?: ThingType.UnsetPlays.Req.AsObject,
            entityTypeCreateReq?: EntityType.Create.Req.AsObject,
            relationTypeCreateReq?: RelationType.Create.Req.AsObject,
            relationTypeGetRelatesReq?: RelationType.GetRelates.Req.AsObject,
            relationTypeGetRelatesExplicitReq?: RelationType.GetRelatesExplicit.Req.AsObject,
            relationTypeGetRelatesForRoleLabelReq?: RelationType.GetRelatesForRoleLabel.Req.AsObject,
            relationTypeGetRelatesOverriddenReq?: RelationType.GetRelatesOverridden.Req.AsObject,
            relationTypeSetRelatesReq?: RelationType.SetRelates.Req.AsObject,
            relationTypeUnsetRelatesReq?: RelationType.UnsetRelates.Req.AsObject,
            attributeTypePutReq?: AttributeType.Put.Req.AsObject,
            attributeTypeGetReq?: AttributeType.Get.Req.AsObject,
            attributeTypeGetRegexReq?: AttributeType.GetRegex.Req.AsObject,
            attributeTypeSetRegexReq?: AttributeType.SetRegex.Req.AsObject,
            attributeTypeGetOwnersReq?: AttributeType.GetOwners.Req.AsObject,
            attributeTypeGetOwnersExplicitReq?: AttributeType.GetOwnersExplicit.Req.AsObject,
        }

        export enum ReqCase {
            REQ_NOT_SET = 0,
            TYPE_DELETE_REQ = 100,
            TYPE_SET_LABEL_REQ = 101,
            TYPE_IS_ABSTRACT_REQ = 102,
            TYPE_GET_SUPERTYPE_REQ = 103,
            TYPE_SET_SUPERTYPE_REQ = 104,
            TYPE_GET_SUPERTYPES_REQ = 105,
            TYPE_GET_SUBTYPES_REQ = 106,
            TYPE_GET_SUBTYPES_EXPLICIT_REQ = 107,
            ROLE_TYPE_GET_RELATION_TYPES_REQ = 200,
            ROLE_TYPE_GET_PLAYERS_REQ = 201,
            THING_TYPE_GET_INSTANCES_REQ = 300,
            THING_TYPE_GET_INSTANCES_EXPLICIT_REQ = 309,
            THING_TYPE_SET_ABSTRACT_REQ = 301,
            THING_TYPE_UNSET_ABSTRACT_REQ = 302,
            THING_TYPE_GET_OWNS_REQ = 303,
            THING_TYPE_GET_OWNS_EXPLICIT_REQ = 310,
            THING_TYPE_GET_OWNS_OVERRIDDEN_REQ = 311,
            THING_TYPE_SET_OWNS_REQ = 304,
            THING_TYPE_UNSET_OWNS_REQ = 305,
            THING_TYPE_GET_PLAYS_REQ = 306,
            THING_TYPE_GET_PLAYS_EXPLICIT_REQ = 312,
            THING_TYPE_GET_PLAYS_OVERRIDDEN_REQ = 313,
            THING_TYPE_SET_PLAYS_REQ = 307,
            THING_TYPE_UNSET_PLAYS_REQ = 308,
            ENTITY_TYPE_CREATE_REQ = 400,
            RELATION_TYPE_CREATE_REQ = 500,
            RELATION_TYPE_GET_RELATES_REQ = 502,
            RELATION_TYPE_GET_RELATES_EXPLICIT_REQ = 505,
            RELATION_TYPE_GET_RELATES_FOR_ROLE_LABEL_REQ = 501,
            RELATION_TYPE_GET_RELATES_OVERRIDDEN_REQ = 506,
            RELATION_TYPE_SET_RELATES_REQ = 503,
            RELATION_TYPE_UNSET_RELATES_REQ = 504,
            ATTRIBUTE_TYPE_PUT_REQ = 600,
            ATTRIBUTE_TYPE_GET_REQ = 601,
            ATTRIBUTE_TYPE_GET_REGEX_REQ = 602,
            ATTRIBUTE_TYPE_SET_REGEX_REQ = 603,
            ATTRIBUTE_TYPE_GET_OWNERS_REQ = 604,
            ATTRIBUTE_TYPE_GET_OWNERS_EXPLICIT_REQ = 605,
        }

    }

    export class Res extends jspb.Message { 

        hasTypeDeleteRes(): boolean;
        clearTypeDeleteRes(): void;
        getTypeDeleteRes(): Type.Delete.Res | undefined;
        setTypeDeleteRes(value?: Type.Delete.Res): Res;

        hasTypeSetLabelRes(): boolean;
        clearTypeSetLabelRes(): void;
        getTypeSetLabelRes(): Type.SetLabel.Res | undefined;
        setTypeSetLabelRes(value?: Type.SetLabel.Res): Res;

        hasTypeIsAbstractRes(): boolean;
        clearTypeIsAbstractRes(): void;
        getTypeIsAbstractRes(): Type.IsAbstract.Res | undefined;
        setTypeIsAbstractRes(value?: Type.IsAbstract.Res): Res;

        hasTypeGetSupertypeRes(): boolean;
        clearTypeGetSupertypeRes(): void;
        getTypeGetSupertypeRes(): Type.GetSupertype.Res | undefined;
        setTypeGetSupertypeRes(value?: Type.GetSupertype.Res): Res;

        hasTypeSetSupertypeRes(): boolean;
        clearTypeSetSupertypeRes(): void;
        getTypeSetSupertypeRes(): Type.SetSupertype.Res | undefined;
        setTypeSetSupertypeRes(value?: Type.SetSupertype.Res): Res;

        hasThingTypeSetAbstractRes(): boolean;
        clearThingTypeSetAbstractRes(): void;
        getThingTypeSetAbstractRes(): ThingType.SetAbstract.Res | undefined;
        setThingTypeSetAbstractRes(value?: ThingType.SetAbstract.Res): Res;

        hasThingTypeUnsetAbstractRes(): boolean;
        clearThingTypeUnsetAbstractRes(): void;
        getThingTypeUnsetAbstractRes(): ThingType.UnsetAbstract.Res | undefined;
        setThingTypeUnsetAbstractRes(value?: ThingType.UnsetAbstract.Res): Res;

        hasThingTypeGetOwnsOverriddenRes(): boolean;
        clearThingTypeGetOwnsOverriddenRes(): void;
        getThingTypeGetOwnsOverriddenRes(): ThingType.GetOwnsOverridden.Res | undefined;
        setThingTypeGetOwnsOverriddenRes(value?: ThingType.GetOwnsOverridden.Res): Res;

        hasThingTypeSetOwnsRes(): boolean;
        clearThingTypeSetOwnsRes(): void;
        getThingTypeSetOwnsRes(): ThingType.SetOwns.Res | undefined;
        setThingTypeSetOwnsRes(value?: ThingType.SetOwns.Res): Res;

        hasThingTypeUnsetOwnsRes(): boolean;
        clearThingTypeUnsetOwnsRes(): void;
        getThingTypeUnsetOwnsRes(): ThingType.UnsetOwns.Res | undefined;
        setThingTypeUnsetOwnsRes(value?: ThingType.UnsetOwns.Res): Res;

        hasThingTypeGetPlaysOverriddenRes(): boolean;
        clearThingTypeGetPlaysOverriddenRes(): void;
        getThingTypeGetPlaysOverriddenRes(): ThingType.GetPlaysOverridden.Res | undefined;
        setThingTypeGetPlaysOverriddenRes(value?: ThingType.GetPlaysOverridden.Res): Res;

        hasThingTypeSetPlaysRes(): boolean;
        clearThingTypeSetPlaysRes(): void;
        getThingTypeSetPlaysRes(): ThingType.SetPlays.Res | undefined;
        setThingTypeSetPlaysRes(value?: ThingType.SetPlays.Res): Res;

        hasThingTypeUnsetPlaysRes(): boolean;
        clearThingTypeUnsetPlaysRes(): void;
        getThingTypeUnsetPlaysRes(): ThingType.UnsetPlays.Res | undefined;
        setThingTypeUnsetPlaysRes(value?: ThingType.UnsetPlays.Res): Res;

        hasEntityTypeCreateRes(): boolean;
        clearEntityTypeCreateRes(): void;
        getEntityTypeCreateRes(): EntityType.Create.Res | undefined;
        setEntityTypeCreateRes(value?: EntityType.Create.Res): Res;

        hasRelationTypeCreateRes(): boolean;
        clearRelationTypeCreateRes(): void;
        getRelationTypeCreateRes(): RelationType.Create.Res | undefined;
        setRelationTypeCreateRes(value?: RelationType.Create.Res): Res;

        hasRelationTypeGetRelatesForRoleLabelRes(): boolean;
        clearRelationTypeGetRelatesForRoleLabelRes(): void;
        getRelationTypeGetRelatesForRoleLabelRes(): RelationType.GetRelatesForRoleLabel.Res | undefined;
        setRelationTypeGetRelatesForRoleLabelRes(value?: RelationType.GetRelatesForRoleLabel.Res): Res;

        hasRelationTypeGetRelatesOverriddenRes(): boolean;
        clearRelationTypeGetRelatesOverriddenRes(): void;
        getRelationTypeGetRelatesOverriddenRes(): RelationType.GetRelatesOverridden.Res | undefined;
        setRelationTypeGetRelatesOverriddenRes(value?: RelationType.GetRelatesOverridden.Res): Res;

        hasRelationTypeSetRelatesRes(): boolean;
        clearRelationTypeSetRelatesRes(): void;
        getRelationTypeSetRelatesRes(): RelationType.SetRelates.Res | undefined;
        setRelationTypeSetRelatesRes(value?: RelationType.SetRelates.Res): Res;

        hasRelationTypeUnsetRelatesRes(): boolean;
        clearRelationTypeUnsetRelatesRes(): void;
        getRelationTypeUnsetRelatesRes(): RelationType.UnsetRelates.Res | undefined;
        setRelationTypeUnsetRelatesRes(value?: RelationType.UnsetRelates.Res): Res;

        hasAttributeTypePutRes(): boolean;
        clearAttributeTypePutRes(): void;
        getAttributeTypePutRes(): AttributeType.Put.Res | undefined;
        setAttributeTypePutRes(value?: AttributeType.Put.Res): Res;

        hasAttributeTypeGetRes(): boolean;
        clearAttributeTypeGetRes(): void;
        getAttributeTypeGetRes(): AttributeType.Get.Res | undefined;
        setAttributeTypeGetRes(value?: AttributeType.Get.Res): Res;

        hasAttributeTypeGetRegexRes(): boolean;
        clearAttributeTypeGetRegexRes(): void;
        getAttributeTypeGetRegexRes(): AttributeType.GetRegex.Res | undefined;
        setAttributeTypeGetRegexRes(value?: AttributeType.GetRegex.Res): Res;

        hasAttributeTypeSetRegexRes(): boolean;
        clearAttributeTypeSetRegexRes(): void;
        getAttributeTypeSetRegexRes(): AttributeType.SetRegex.Res | undefined;
        setAttributeTypeSetRegexRes(value?: AttributeType.SetRegex.Res): Res;

        getResCase(): Res.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Res.AsObject;
        static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Res;
        static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
    }

    export namespace Res {
        export type AsObject = {
            typeDeleteRes?: Type.Delete.Res.AsObject,
            typeSetLabelRes?: Type.SetLabel.Res.AsObject,
            typeIsAbstractRes?: Type.IsAbstract.Res.AsObject,
            typeGetSupertypeRes?: Type.GetSupertype.Res.AsObject,
            typeSetSupertypeRes?: Type.SetSupertype.Res.AsObject,
            thingTypeSetAbstractRes?: ThingType.SetAbstract.Res.AsObject,
            thingTypeUnsetAbstractRes?: ThingType.UnsetAbstract.Res.AsObject,
            thingTypeGetOwnsOverriddenRes?: ThingType.GetOwnsOverridden.Res.AsObject,
            thingTypeSetOwnsRes?: ThingType.SetOwns.Res.AsObject,
            thingTypeUnsetOwnsRes?: ThingType.UnsetOwns.Res.AsObject,
            thingTypeGetPlaysOverriddenRes?: ThingType.GetPlaysOverridden.Res.AsObject,
            thingTypeSetPlaysRes?: ThingType.SetPlays.Res.AsObject,
            thingTypeUnsetPlaysRes?: ThingType.UnsetPlays.Res.AsObject,
            entityTypeCreateRes?: EntityType.Create.Res.AsObject,
            relationTypeCreateRes?: RelationType.Create.Res.AsObject,
            relationTypeGetRelatesForRoleLabelRes?: RelationType.GetRelatesForRoleLabel.Res.AsObject,
            relationTypeGetRelatesOverriddenRes?: RelationType.GetRelatesOverridden.Res.AsObject,
            relationTypeSetRelatesRes?: RelationType.SetRelates.Res.AsObject,
            relationTypeUnsetRelatesRes?: RelationType.UnsetRelates.Res.AsObject,
            attributeTypePutRes?: AttributeType.Put.Res.AsObject,
            attributeTypeGetRes?: AttributeType.Get.Res.AsObject,
            attributeTypeGetRegexRes?: AttributeType.GetRegex.Res.AsObject,
            attributeTypeSetRegexRes?: AttributeType.SetRegex.Res.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            TYPE_DELETE_RES = 100,
            TYPE_SET_LABEL_RES = 101,
            TYPE_IS_ABSTRACT_RES = 102,
            TYPE_GET_SUPERTYPE_RES = 103,
            TYPE_SET_SUPERTYPE_RES = 104,
            THING_TYPE_SET_ABSTRACT_RES = 300,
            THING_TYPE_UNSET_ABSTRACT_RES = 301,
            THING_TYPE_GET_OWNS_OVERRIDDEN_RES = 306,
            THING_TYPE_SET_OWNS_RES = 302,
            THING_TYPE_UNSET_OWNS_RES = 303,
            THING_TYPE_GET_PLAYS_OVERRIDDEN_RES = 307,
            THING_TYPE_SET_PLAYS_RES = 304,
            THING_TYPE_UNSET_PLAYS_RES = 305,
            ENTITY_TYPE_CREATE_RES = 400,
            RELATION_TYPE_CREATE_RES = 500,
            RELATION_TYPE_GET_RELATES_FOR_ROLE_LABEL_RES = 501,
            RELATION_TYPE_GET_RELATES_OVERRIDDEN_RES = 504,
            RELATION_TYPE_SET_RELATES_RES = 502,
            RELATION_TYPE_UNSET_RELATES_RES = 503,
            ATTRIBUTE_TYPE_PUT_RES = 600,
            ATTRIBUTE_TYPE_GET_RES = 601,
            ATTRIBUTE_TYPE_GET_REGEX_RES = 602,
            ATTRIBUTE_TYPE_SET_REGEX_RES = 603,
        }

    }

    export class ResPart extends jspb.Message { 

        hasTypeGetSupertypesResPart(): boolean;
        clearTypeGetSupertypesResPart(): void;
        getTypeGetSupertypesResPart(): Type.GetSupertypes.ResPart | undefined;
        setTypeGetSupertypesResPart(value?: Type.GetSupertypes.ResPart): ResPart;

        hasTypeGetSubtypesResPart(): boolean;
        clearTypeGetSubtypesResPart(): void;
        getTypeGetSubtypesResPart(): Type.GetSubtypes.ResPart | undefined;
        setTypeGetSubtypesResPart(value?: Type.GetSubtypes.ResPart): ResPart;

        hasTypeGetSubtypesExplicitResPart(): boolean;
        clearTypeGetSubtypesExplicitResPart(): void;
        getTypeGetSubtypesExplicitResPart(): Type.GetSubtypesExplicit.ResPart | undefined;
        setTypeGetSubtypesExplicitResPart(value?: Type.GetSubtypesExplicit.ResPart): ResPart;

        hasRoleTypeGetRelationTypesResPart(): boolean;
        clearRoleTypeGetRelationTypesResPart(): void;
        getRoleTypeGetRelationTypesResPart(): RoleType.GetRelationTypes.ResPart | undefined;
        setRoleTypeGetRelationTypesResPart(value?: RoleType.GetRelationTypes.ResPart): ResPart;

        hasRoleTypeGetPlayersResPart(): boolean;
        clearRoleTypeGetPlayersResPart(): void;
        getRoleTypeGetPlayersResPart(): RoleType.GetPlayers.ResPart | undefined;
        setRoleTypeGetPlayersResPart(value?: RoleType.GetPlayers.ResPart): ResPart;

        hasThingTypeGetInstancesResPart(): boolean;
        clearThingTypeGetInstancesResPart(): void;
        getThingTypeGetInstancesResPart(): ThingType.GetInstances.ResPart | undefined;
        setThingTypeGetInstancesResPart(value?: ThingType.GetInstances.ResPart): ResPart;

        hasThingTypeGetInstancesExplicitResPart(): boolean;
        clearThingTypeGetInstancesExplicitResPart(): void;
        getThingTypeGetInstancesExplicitResPart(): ThingType.GetInstancesExplicit.ResPart | undefined;
        setThingTypeGetInstancesExplicitResPart(value?: ThingType.GetInstancesExplicit.ResPart): ResPart;

        hasThingTypeGetOwnsResPart(): boolean;
        clearThingTypeGetOwnsResPart(): void;
        getThingTypeGetOwnsResPart(): ThingType.GetOwns.ResPart | undefined;
        setThingTypeGetOwnsResPart(value?: ThingType.GetOwns.ResPart): ResPart;

        hasThingTypeGetOwnsExplicitResPart(): boolean;
        clearThingTypeGetOwnsExplicitResPart(): void;
        getThingTypeGetOwnsExplicitResPart(): ThingType.GetOwnsExplicit.ResPart | undefined;
        setThingTypeGetOwnsExplicitResPart(value?: ThingType.GetOwnsExplicit.ResPart): ResPart;

        hasThingTypeGetPlaysResPart(): boolean;
        clearThingTypeGetPlaysResPart(): void;
        getThingTypeGetPlaysResPart(): ThingType.GetPlays.ResPart | undefined;
        setThingTypeGetPlaysResPart(value?: ThingType.GetPlays.ResPart): ResPart;

        hasThingTypeGetPlaysExplicitResPart(): boolean;
        clearThingTypeGetPlaysExplicitResPart(): void;
        getThingTypeGetPlaysExplicitResPart(): ThingType.GetPlaysExplicit.ResPart | undefined;
        setThingTypeGetPlaysExplicitResPart(value?: ThingType.GetPlaysExplicit.ResPart): ResPart;

        hasRelationTypeGetRelatesResPart(): boolean;
        clearRelationTypeGetRelatesResPart(): void;
        getRelationTypeGetRelatesResPart(): RelationType.GetRelates.ResPart | undefined;
        setRelationTypeGetRelatesResPart(value?: RelationType.GetRelates.ResPart): ResPart;

        hasRelationTypeGetRelatesExplicitResPart(): boolean;
        clearRelationTypeGetRelatesExplicitResPart(): void;
        getRelationTypeGetRelatesExplicitResPart(): RelationType.GetRelatesExplicit.ResPart | undefined;
        setRelationTypeGetRelatesExplicitResPart(value?: RelationType.GetRelatesExplicit.ResPart): ResPart;

        hasAttributeTypeGetOwnersResPart(): boolean;
        clearAttributeTypeGetOwnersResPart(): void;
        getAttributeTypeGetOwnersResPart(): AttributeType.GetOwners.ResPart | undefined;
        setAttributeTypeGetOwnersResPart(value?: AttributeType.GetOwners.ResPart): ResPart;

        hasAttributeTypeGetOwnersExplicitResPart(): boolean;
        clearAttributeTypeGetOwnersExplicitResPart(): void;
        getAttributeTypeGetOwnersExplicitResPart(): AttributeType.GetOwnersExplicit.ResPart | undefined;
        setAttributeTypeGetOwnersExplicitResPart(value?: AttributeType.GetOwnersExplicit.ResPart): ResPart;

        getResCase(): ResPart.ResCase;

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): ResPart.AsObject;
        static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): ResPart;
        static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
    }

    export namespace ResPart {
        export type AsObject = {
            typeGetSupertypesResPart?: Type.GetSupertypes.ResPart.AsObject,
            typeGetSubtypesResPart?: Type.GetSubtypes.ResPart.AsObject,
            typeGetSubtypesExplicitResPart?: Type.GetSubtypesExplicit.ResPart.AsObject,
            roleTypeGetRelationTypesResPart?: RoleType.GetRelationTypes.ResPart.AsObject,
            roleTypeGetPlayersResPart?: RoleType.GetPlayers.ResPart.AsObject,
            thingTypeGetInstancesResPart?: ThingType.GetInstances.ResPart.AsObject,
            thingTypeGetInstancesExplicitResPart?: ThingType.GetInstancesExplicit.ResPart.AsObject,
            thingTypeGetOwnsResPart?: ThingType.GetOwns.ResPart.AsObject,
            thingTypeGetOwnsExplicitResPart?: ThingType.GetOwnsExplicit.ResPart.AsObject,
            thingTypeGetPlaysResPart?: ThingType.GetPlays.ResPart.AsObject,
            thingTypeGetPlaysExplicitResPart?: ThingType.GetPlaysExplicit.ResPart.AsObject,
            relationTypeGetRelatesResPart?: RelationType.GetRelates.ResPart.AsObject,
            relationTypeGetRelatesExplicitResPart?: RelationType.GetRelatesExplicit.ResPart.AsObject,
            attributeTypeGetOwnersResPart?: AttributeType.GetOwners.ResPart.AsObject,
            attributeTypeGetOwnersExplicitResPart?: AttributeType.GetOwnersExplicit.ResPart.AsObject,
        }

        export enum ResCase {
            RES_NOT_SET = 0,
            TYPE_GET_SUPERTYPES_RES_PART = 100,
            TYPE_GET_SUBTYPES_RES_PART = 101,
            TYPE_GET_SUBTYPES_EXPLICIT_RES_PART = 102,
            ROLE_TYPE_GET_RELATION_TYPES_RES_PART = 200,
            ROLE_TYPE_GET_PLAYERS_RES_PART = 201,
            THING_TYPE_GET_INSTANCES_RES_PART = 300,
            THING_TYPE_GET_INSTANCES_EXPLICIT_RES_PART = 303,
            THING_TYPE_GET_OWNS_RES_PART = 301,
            THING_TYPE_GET_OWNS_EXPLICIT_RES_PART = 304,
            THING_TYPE_GET_PLAYS_RES_PART = 302,
            THING_TYPE_GET_PLAYS_EXPLICIT_RES_PART = 305,
            RELATION_TYPE_GET_RELATES_RES_PART = 500,
            RELATION_TYPE_GET_RELATES_EXPLICIT_RES_PART = 501,
            ATTRIBUTE_TYPE_GET_OWNERS_RES_PART = 600,
            ATTRIBUTE_TYPE_GET_OWNERS_EXPLICIT_RES_PART = 601,
        }

    }

    export class Delete extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Delete.AsObject;
        static toObject(includeInstance: boolean, msg: Delete): Delete.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Delete, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Delete;
        static deserializeBinaryFromReader(message: Delete, reader: jspb.BinaryReader): Delete;
    }

    export namespace Delete {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class SetLabel extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetLabel.AsObject;
        static toObject(includeInstance: boolean, msg: SetLabel): SetLabel.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetLabel, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetLabel;
        static deserializeBinaryFromReader(message: SetLabel, reader: jspb.BinaryReader): SetLabel;
    }

    export namespace SetLabel {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class IsAbstract extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): IsAbstract.AsObject;
        static toObject(includeInstance: boolean, msg: IsAbstract): IsAbstract.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: IsAbstract, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): IsAbstract;
        static deserializeBinaryFromReader(message: IsAbstract, reader: jspb.BinaryReader): IsAbstract;
    }

    export namespace IsAbstract {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 
            getAbstract(): boolean;
            setAbstract(value: boolean): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                pb_abstract: boolean,
            }
        }

    }

    export class GetSupertype extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetSupertype.AsObject;
        static toObject(includeInstance: boolean, msg: GetSupertype): GetSupertype.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetSupertype, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetSupertype;
        static deserializeBinaryFromReader(message: GetSupertype, reader: jspb.BinaryReader): GetSupertype;
    }

    export namespace GetSupertype {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            hasType(): boolean;
            clearType(): void;
            getType(): Type | undefined;
            setType(value?: Type): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                type?: Type.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                TYPE = 1,
            }

        }

    }

    export class SetSupertype extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetSupertype.AsObject;
        static toObject(includeInstance: boolean, msg: SetSupertype): SetSupertype.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetSupertype, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetSupertype;
        static deserializeBinaryFromReader(message: SetSupertype, reader: jspb.BinaryReader): SetSupertype;
    }

    export namespace SetSupertype {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasType(): boolean;
            clearType(): void;
            getType(): Type | undefined;
            setType(value?: Type): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                type?: Type.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetSupertypes extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetSupertypes.AsObject;
        static toObject(includeInstance: boolean, msg: GetSupertypes): GetSupertypes.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetSupertypes, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetSupertypes;
        static deserializeBinaryFromReader(message: GetSupertypes, reader: jspb.BinaryReader): GetSupertypes;
    }

    export namespace GetSupertypes {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearTypesList(): void;
            getTypesList(): Array<Type>;
            setTypesList(value: Array<Type>): ResPart;
            addTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                typesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetSubtypes extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetSubtypes.AsObject;
        static toObject(includeInstance: boolean, msg: GetSubtypes): GetSubtypes.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetSubtypes, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetSubtypes;
        static deserializeBinaryFromReader(message: GetSubtypes, reader: jspb.BinaryReader): GetSubtypes;
    }

    export namespace GetSubtypes {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearTypesList(): void;
            getTypesList(): Array<Type>;
            setTypesList(value: Array<Type>): ResPart;
            addTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                typesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetSubtypesExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetSubtypesExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetSubtypesExplicit): GetSubtypesExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetSubtypesExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetSubtypesExplicit;
        static deserializeBinaryFromReader(message: GetSubtypesExplicit, reader: jspb.BinaryReader): GetSubtypesExplicit;
    }

    export namespace GetSubtypesExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearTypesList(): void;
            getTypesList(): Array<Type>;
            setTypesList(value: Array<Type>): ResPart;
            addTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                typesList: Array<Type.AsObject>,
            }
        }

    }


    export enum Encoding {
    THING_TYPE = 0,
    ENTITY_TYPE = 1,
    RELATION_TYPE = 2,
    ATTRIBUTE_TYPE = 3,
    ROLE_TYPE = 4,
    }

}

export class RoleType extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RoleType.AsObject;
    static toObject(includeInstance: boolean, msg: RoleType): RoleType.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RoleType, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RoleType;
    static deserializeBinaryFromReader(message: RoleType, reader: jspb.BinaryReader): RoleType;
}

export namespace RoleType {
    export type AsObject = {
    }


    export class GetRelationTypes extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelationTypes.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelationTypes): GetRelationTypes.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelationTypes, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelationTypes;
        static deserializeBinaryFromReader(message: GetRelationTypes, reader: jspb.BinaryReader): GetRelationTypes;
    }

    export namespace GetRelationTypes {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRelationTypesList(): void;
            getRelationTypesList(): Array<Type>;
            setRelationTypesList(value: Array<Type>): ResPart;
            addRelationTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                relationTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetPlayers extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlayers.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlayers): GetPlayers.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlayers, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlayers;
        static deserializeBinaryFromReader(message: GetPlayers, reader: jspb.BinaryReader): GetPlayers;
    }

    export namespace GetPlayers {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingTypesList(): void;
            getThingTypesList(): Array<Type>;
            setThingTypesList(value: Array<Type>): ResPart;
            addThingTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingTypesList: Array<Type.AsObject>,
            }
        }

    }

}

export class ThingType extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ThingType.AsObject;
    static toObject(includeInstance: boolean, msg: ThingType): ThingType.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ThingType, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ThingType;
    static deserializeBinaryFromReader(message: ThingType, reader: jspb.BinaryReader): ThingType;
}

export namespace ThingType {
    export type AsObject = {
    }


    export class SetAbstract extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetAbstract.AsObject;
        static toObject(includeInstance: boolean, msg: SetAbstract): SetAbstract.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetAbstract, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetAbstract;
        static deserializeBinaryFromReader(message: SetAbstract, reader: jspb.BinaryReader): SetAbstract;
    }

    export namespace SetAbstract {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class UnsetAbstract extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): UnsetAbstract.AsObject;
        static toObject(includeInstance: boolean, msg: UnsetAbstract): UnsetAbstract.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: UnsetAbstract, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): UnsetAbstract;
        static deserializeBinaryFromReader(message: UnsetAbstract, reader: jspb.BinaryReader): UnsetAbstract;
    }

    export namespace UnsetAbstract {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetInstances extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetInstances.AsObject;
        static toObject(includeInstance: boolean, msg: GetInstances): GetInstances.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetInstances, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetInstances;
        static deserializeBinaryFromReader(message: GetInstances, reader: jspb.BinaryReader): GetInstances;
    }

    export namespace GetInstances {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingsList(): void;
            getThingsList(): Array<Thing>;
            setThingsList(value: Array<Thing>): ResPart;
            addThings(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingsList: Array<Thing.AsObject>,
            }
        }

    }

    export class GetInstancesExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetInstancesExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetInstancesExplicit): GetInstancesExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetInstancesExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetInstancesExplicit;
        static deserializeBinaryFromReader(message: GetInstancesExplicit, reader: jspb.BinaryReader): GetInstancesExplicit;
    }

    export namespace GetInstancesExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingsList(): void;
            getThingsList(): Array<Thing>;
            setThingsList(value: Array<Thing>): ResPart;
            addThings(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingsList: Array<Thing.AsObject>,
            }
        }

    }

    export class GetOwns extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwns.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwns): GetOwns.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwns, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwns;
        static deserializeBinaryFromReader(message: GetOwns, reader: jspb.BinaryReader): GetOwns;
    }

    export namespace GetOwns {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValueType(): boolean;
            clearValueType(): void;
            getValueType(): AttributeType.ValueType;
            setValueType(value: AttributeType.ValueType): Req;
            getKeysOnly(): boolean;
            setKeysOnly(value: boolean): Req;

            getFilterCase(): Req.FilterCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                valueType: AttributeType.ValueType,
                keysOnly: boolean,
            }

            export enum FilterCase {
                FILTER_NOT_SET = 0,
                VALUE_TYPE = 1,
            }

        }

        export class ResPart extends jspb.Message { 
            clearAttributeTypesList(): void;
            getAttributeTypesList(): Array<Type>;
            setAttributeTypesList(value: Array<Type>): ResPart;
            addAttributeTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                attributeTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetOwnsExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwnsExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwnsExplicit): GetOwnsExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwnsExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwnsExplicit;
        static deserializeBinaryFromReader(message: GetOwnsExplicit, reader: jspb.BinaryReader): GetOwnsExplicit;
    }

    export namespace GetOwnsExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValueType(): boolean;
            clearValueType(): void;
            getValueType(): AttributeType.ValueType;
            setValueType(value: AttributeType.ValueType): Req;
            getKeysOnly(): boolean;
            setKeysOnly(value: boolean): Req;

            getFilterCase(): Req.FilterCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                valueType: AttributeType.ValueType,
                keysOnly: boolean,
            }

            export enum FilterCase {
                FILTER_NOT_SET = 0,
                VALUE_TYPE = 1,
            }

        }

        export class ResPart extends jspb.Message { 
            clearAttributeTypesList(): void;
            getAttributeTypesList(): Array<Type>;
            setAttributeTypesList(value: Array<Type>): ResPart;
            addAttributeTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                attributeTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetOwnsOverridden extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwnsOverridden.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwnsOverridden): GetOwnsOverridden.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwnsOverridden, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwnsOverridden;
        static deserializeBinaryFromReader(message: GetOwnsOverridden, reader: jspb.BinaryReader): GetOwnsOverridden;
    }

    export namespace GetOwnsOverridden {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasAttributeType(): boolean;
            clearAttributeType(): void;
            getAttributeType(): Type | undefined;
            setAttributeType(value?: Type): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attributeType?: Type.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            hasAttributeType(): boolean;
            clearAttributeType(): void;
            getAttributeType(): Type | undefined;
            setAttributeType(value?: Type): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                attributeType?: Type.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                ATTRIBUTE_TYPE = 1,
            }

        }

    }

    export class SetOwns extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetOwns.AsObject;
        static toObject(includeInstance: boolean, msg: SetOwns): SetOwns.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetOwns, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetOwns;
        static deserializeBinaryFromReader(message: SetOwns, reader: jspb.BinaryReader): SetOwns;
    }

    export namespace SetOwns {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasAttributeType(): boolean;
            clearAttributeType(): void;
            getAttributeType(): Type | undefined;
            setAttributeType(value?: Type): Req;

            hasOverriddenType(): boolean;
            clearOverriddenType(): void;
            getOverriddenType(): Type | undefined;
            setOverriddenType(value?: Type): Req;
            getIsKey(): boolean;
            setIsKey(value: boolean): Req;

            getOverriddenCase(): Req.OverriddenCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attributeType?: Type.AsObject,
                overriddenType?: Type.AsObject,
                isKey: boolean,
            }

            export enum OverriddenCase {
                OVERRIDDEN_NOT_SET = 0,
                OVERRIDDEN_TYPE = 2,
            }

        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class UnsetOwns extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): UnsetOwns.AsObject;
        static toObject(includeInstance: boolean, msg: UnsetOwns): UnsetOwns.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: UnsetOwns, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): UnsetOwns;
        static deserializeBinaryFromReader(message: UnsetOwns, reader: jspb.BinaryReader): UnsetOwns;
    }

    export namespace UnsetOwns {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasAttributeType(): boolean;
            clearAttributeType(): void;
            getAttributeType(): Type | undefined;
            setAttributeType(value?: Type): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                attributeType?: Type.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetPlays extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlays.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlays): GetPlays.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlays, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlays;
        static deserializeBinaryFromReader(message: GetPlays, reader: jspb.BinaryReader): GetPlays;
    }

    export namespace GetPlays {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetPlaysExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlaysExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlaysExplicit): GetPlaysExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlaysExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlaysExplicit;
        static deserializeBinaryFromReader(message: GetPlaysExplicit, reader: jspb.BinaryReader): GetPlaysExplicit;
    }

    export namespace GetPlaysExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetPlaysOverridden extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetPlaysOverridden.AsObject;
        static toObject(includeInstance: boolean, msg: GetPlaysOverridden): GetPlaysOverridden.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetPlaysOverridden, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetPlaysOverridden;
        static deserializeBinaryFromReader(message: GetPlaysOverridden, reader: jspb.BinaryReader): GetPlaysOverridden;
    }

    export namespace GetPlaysOverridden {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleType?: Type.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                roleType?: Type.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                ROLE_TYPE = 1,
            }

        }

    }

    export class SetPlays extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetPlays.AsObject;
        static toObject(includeInstance: boolean, msg: SetPlays): SetPlays.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetPlays, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetPlays;
        static deserializeBinaryFromReader(message: SetPlays, reader: jspb.BinaryReader): SetPlays;
    }

    export namespace SetPlays {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Req;

            hasOverriddenType(): boolean;
            clearOverriddenType(): void;
            getOverriddenType(): Type | undefined;
            setOverriddenType(value?: Type): Req;

            getOverriddenCase(): Req.OverriddenCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleType?: Type.AsObject,
                overriddenType?: Type.AsObject,
            }

            export enum OverriddenCase {
                OVERRIDDEN_NOT_SET = 0,
                OVERRIDDEN_TYPE = 2,
            }

        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class UnsetPlays extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): UnsetPlays.AsObject;
        static toObject(includeInstance: boolean, msg: UnsetPlays): UnsetPlays.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: UnsetPlays, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): UnsetPlays;
        static deserializeBinaryFromReader(message: UnsetPlays, reader: jspb.BinaryReader): UnsetPlays;
    }

    export namespace UnsetPlays {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                roleType?: Type.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

}

export class EntityType extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): EntityType.AsObject;
    static toObject(includeInstance: boolean, msg: EntityType): EntityType.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: EntityType, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): EntityType;
    static deserializeBinaryFromReader(message: EntityType, reader: jspb.BinaryReader): EntityType;
}

export namespace EntityType {
    export type AsObject = {
    }


    export class Create extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Create.AsObject;
        static toObject(includeInstance: boolean, msg: Create): Create.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Create, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Create;
        static deserializeBinaryFromReader(message: Create, reader: jspb.BinaryReader): Create;
    }

    export namespace Create {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            hasEntity(): boolean;
            clearEntity(): void;
            getEntity(): Thing | undefined;
            setEntity(value?: Thing): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                entity?: Thing.AsObject,
            }
        }

    }

}

export class RelationType extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RelationType.AsObject;
    static toObject(includeInstance: boolean, msg: RelationType): RelationType.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RelationType, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RelationType;
    static deserializeBinaryFromReader(message: RelationType, reader: jspb.BinaryReader): RelationType;
}

export namespace RelationType {
    export type AsObject = {
    }


    export class Create extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Create.AsObject;
        static toObject(includeInstance: boolean, msg: Create): Create.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Create, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Create;
        static deserializeBinaryFromReader(message: Create, reader: jspb.BinaryReader): Create;
    }

    export namespace Create {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 

            hasRelation(): boolean;
            clearRelation(): void;
            getRelation(): Thing | undefined;
            setRelation(value?: Thing): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                relation?: Thing.AsObject,
            }
        }

    }

    export class GetRelates extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelates.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelates): GetRelates.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelates, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelates;
        static deserializeBinaryFromReader(message: GetRelates, reader: jspb.BinaryReader): GetRelates;
    }

    export namespace GetRelates {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetRelatesExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelatesExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelatesExplicit): GetRelatesExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelatesExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelatesExplicit;
        static deserializeBinaryFromReader(message: GetRelatesExplicit, reader: jspb.BinaryReader): GetRelatesExplicit;
    }

    export namespace GetRelatesExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class ResPart extends jspb.Message { 
            clearRoleTypesList(): void;
            getRoleTypesList(): Array<Type>;
            setRoleTypesList(value: Array<Type>): ResPart;
            addRoleTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                roleTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetRelatesForRoleLabel extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelatesForRoleLabel.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelatesForRoleLabel): GetRelatesForRoleLabel.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelatesForRoleLabel, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelatesForRoleLabel;
        static deserializeBinaryFromReader(message: GetRelatesForRoleLabel, reader: jspb.BinaryReader): GetRelatesForRoleLabel;
    }

    export namespace GetRelatesForRoleLabel {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Res;

            getRoleCase(): Res.RoleCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                roleType?: Type.AsObject,
            }

            export enum RoleCase {
                ROLE_NOT_SET = 0,
                ROLE_TYPE = 1,
            }

        }

    }

    export class GetRelatesOverridden extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRelatesOverridden.AsObject;
        static toObject(includeInstance: boolean, msg: GetRelatesOverridden): GetRelatesOverridden.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRelatesOverridden, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRelatesOverridden;
        static deserializeBinaryFromReader(message: GetRelatesOverridden, reader: jspb.BinaryReader): GetRelatesOverridden;
    }

    export namespace GetRelatesOverridden {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            hasRoleType(): boolean;
            clearRoleType(): void;
            getRoleType(): Type | undefined;
            setRoleType(value?: Type): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                roleType?: Type.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                ROLE_TYPE = 1,
            }

        }

    }

    export class SetRelates extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetRelates.AsObject;
        static toObject(includeInstance: boolean, msg: SetRelates): SetRelates.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetRelates, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetRelates;
        static deserializeBinaryFromReader(message: SetRelates, reader: jspb.BinaryReader): SetRelates;
    }

    export namespace SetRelates {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            hasOverriddenLabel(): boolean;
            clearOverriddenLabel(): void;
            getOverriddenLabel(): string;
            setOverriddenLabel(value: string): Req;

            getOverriddenCase(): Req.OverriddenCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
                overriddenLabel: string,
            }

            export enum OverriddenCase {
                OVERRIDDEN_NOT_SET = 0,
                OVERRIDDEN_LABEL = 2,
            }

        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class UnsetRelates extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): UnsetRelates.AsObject;
        static toObject(includeInstance: boolean, msg: UnsetRelates): UnsetRelates.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: UnsetRelates, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): UnsetRelates;
        static deserializeBinaryFromReader(message: UnsetRelates, reader: jspb.BinaryReader): UnsetRelates;
    }

    export namespace UnsetRelates {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getLabel(): string;
            setLabel(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                label: string,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

}

export class AttributeType extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AttributeType.AsObject;
    static toObject(includeInstance: boolean, msg: AttributeType): AttributeType.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AttributeType, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AttributeType;
    static deserializeBinaryFromReader(message: AttributeType, reader: jspb.BinaryReader): AttributeType;
}

export namespace AttributeType {
    export type AsObject = {
    }


    export class Put extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Put.AsObject;
        static toObject(includeInstance: boolean, msg: Put): Put.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Put, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Put;
        static deserializeBinaryFromReader(message: Put, reader: jspb.BinaryReader): Put;
    }

    export namespace Put {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValue(): boolean;
            clearValue(): void;
            getValue(): Attribute.Value | undefined;
            setValue(value?: Attribute.Value): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                value?: Attribute.Value.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            hasAttribute(): boolean;
            clearAttribute(): void;
            getAttribute(): Thing | undefined;
            setAttribute(value?: Thing): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                attribute?: Thing.AsObject,
            }
        }

    }

    export class Get extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): Get.AsObject;
        static toObject(includeInstance: boolean, msg: Get): Get.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: Get, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): Get;
        static deserializeBinaryFromReader(message: Get, reader: jspb.BinaryReader): Get;
    }

    export namespace Get {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValue(): boolean;
            clearValue(): void;
            getValue(): Attribute.Value | undefined;
            setValue(value?: Attribute.Value): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                value?: Attribute.Value.AsObject,
            }
        }

        export class Res extends jspb.Message { 

            hasAttribute(): boolean;
            clearAttribute(): void;
            getAttribute(): Thing | undefined;
            setAttribute(value?: Thing): Res;

            getResCase(): Res.ResCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                attribute?: Thing.AsObject,
            }

            export enum ResCase {
                RES_NOT_SET = 0,
                ATTRIBUTE = 1,
            }

        }

    }

    export class GetOwners extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwners.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwners): GetOwners.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwners, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwners;
        static deserializeBinaryFromReader(message: GetOwners, reader: jspb.BinaryReader): GetOwners;
    }

    export namespace GetOwners {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getOnlyKey(): boolean;
            setOnlyKey(value: boolean): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                onlyKey: boolean,
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingTypesList(): void;
            getThingTypesList(): Array<Type>;
            setThingTypesList(value: Array<Type>): ResPart;
            addThingTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetOwnersExplicit extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetOwnersExplicit.AsObject;
        static toObject(includeInstance: boolean, msg: GetOwnersExplicit): GetOwnersExplicit.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetOwnersExplicit, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetOwnersExplicit;
        static deserializeBinaryFromReader(message: GetOwnersExplicit, reader: jspb.BinaryReader): GetOwnersExplicit;
    }

    export namespace GetOwnersExplicit {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getOnlyKey(): boolean;
            setOnlyKey(value: boolean): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                onlyKey: boolean,
            }
        }

        export class ResPart extends jspb.Message { 
            clearThingTypesList(): void;
            getThingTypesList(): Array<Type>;
            setThingTypesList(value: Array<Type>): ResPart;
            addThingTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                thingTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetRegex extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetRegex.AsObject;
        static toObject(includeInstance: boolean, msg: GetRegex): GetRegex.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetRegex, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetRegex;
        static deserializeBinaryFromReader(message: GetRegex, reader: jspb.BinaryReader): GetRegex;
    }

    export namespace GetRegex {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
            }
        }

        export class Res extends jspb.Message { 
            getRegex(): string;
            setRegex(value: string): Res;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
                regex: string,
            }
        }

    }

    export class SetRegex extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): SetRegex.AsObject;
        static toObject(includeInstance: boolean, msg: SetRegex): SetRegex.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: SetRegex, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): SetRegex;
        static deserializeBinaryFromReader(message: SetRegex, reader: jspb.BinaryReader): SetRegex;
    }

    export namespace SetRegex {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 
            getRegex(): string;
            setRegex(value: string): Req;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                regex: string,
            }
        }

        export class Res extends jspb.Message { 

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Res.AsObject;
            static toObject(includeInstance: boolean, msg: Res): Res.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Res, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Res;
            static deserializeBinaryFromReader(message: Res, reader: jspb.BinaryReader): Res;
        }

        export namespace Res {
            export type AsObject = {
            }
        }

    }

    export class GetSubtypes extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetSubtypes.AsObject;
        static toObject(includeInstance: boolean, msg: GetSubtypes): GetSubtypes.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetSubtypes, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetSubtypes;
        static deserializeBinaryFromReader(message: GetSubtypes, reader: jspb.BinaryReader): GetSubtypes;
    }

    export namespace GetSubtypes {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValueType(): boolean;
            clearValueType(): void;
            getValueType(): AttributeType.ValueType;
            setValueType(value: AttributeType.ValueType): Req;

            getReqCase(): Req.ReqCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                valueType: AttributeType.ValueType,
            }

            export enum ReqCase {
                REQ_NOT_SET = 0,
                VALUE_TYPE = 1,
            }

        }

        export class ResPart extends jspb.Message { 
            clearAttributeTypesList(): void;
            getAttributeTypesList(): Array<Type>;
            setAttributeTypesList(value: Array<Type>): ResPart;
            addAttributeTypes(value?: Type, index?: number): Type;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                attributeTypesList: Array<Type.AsObject>,
            }
        }

    }

    export class GetInstances extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): GetInstances.AsObject;
        static toObject(includeInstance: boolean, msg: GetInstances): GetInstances.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: GetInstances, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): GetInstances;
        static deserializeBinaryFromReader(message: GetInstances, reader: jspb.BinaryReader): GetInstances;
    }

    export namespace GetInstances {
        export type AsObject = {
        }


        export class Req extends jspb.Message { 

            hasValueType(): boolean;
            clearValueType(): void;
            getValueType(): AttributeType.ValueType;
            setValueType(value: AttributeType.ValueType): Req;

            getReqCase(): Req.ReqCase;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): Req.AsObject;
            static toObject(includeInstance: boolean, msg: Req): Req.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: Req, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): Req;
            static deserializeBinaryFromReader(message: Req, reader: jspb.BinaryReader): Req;
        }

        export namespace Req {
            export type AsObject = {
                valueType: AttributeType.ValueType,
            }

            export enum ReqCase {
                REQ_NOT_SET = 0,
                VALUE_TYPE = 1,
            }

        }

        export class ResPart extends jspb.Message { 
            clearAttributesList(): void;
            getAttributesList(): Array<Thing>;
            setAttributesList(value: Array<Thing>): ResPart;
            addAttributes(value?: Thing, index?: number): Thing;

            serializeBinary(): Uint8Array;
            toObject(includeInstance?: boolean): ResPart.AsObject;
            static toObject(includeInstance: boolean, msg: ResPart): ResPart.AsObject;
            static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
            static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
            static serializeBinaryToWriter(message: ResPart, writer: jspb.BinaryWriter): void;
            static deserializeBinary(bytes: Uint8Array): ResPart;
            static deserializeBinaryFromReader(message: ResPart, reader: jspb.BinaryReader): ResPart;
        }

        export namespace ResPart {
            export type AsObject = {
                attributesList: Array<Thing.AsObject>,
            }
        }

    }


    export enum ValueType {
    OBJECT = 0,
    BOOLEAN = 1,
    LONG = 2,
    DOUBLE = 3,
    STRING = 4,
    DATETIME = 5,
    }

}
