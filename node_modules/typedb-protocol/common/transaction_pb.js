// source: common/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_concept_pb = require('../common/concept_pb.js');
goog.object.extend(proto, common_concept_pb);
var common_logic_pb = require('../common/logic_pb.js');
goog.object.extend(proto, common_logic_pb);
var common_options_pb = require('../common/options_pb.js');
goog.object.extend(proto, common_options_pb);
var common_query_pb = require('../common/query_pb.js');
goog.object.extend(proto, common_query_pb);
goog.exportSymbol('proto.typedb.protocol.Transaction', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Client', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Commit', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Commit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Commit.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Open', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Open.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Open.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.ResPart.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Rollback', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Rollback.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Rollback.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Server', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Server.ServerCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Stream', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Stream.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Stream.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Stream.State', null, global);
goog.exportSymbol('proto.typedb.protocol.Transaction.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.displayName = 'proto.typedb.protocol.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Client = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Transaction.Client.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Client, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Client.displayName = 'proto.typedb.protocol.Transaction.Client';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Server = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Transaction.Server.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Transaction.Server, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Server.displayName = 'proto.typedb.protocol.Transaction.Server';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Transaction.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Transaction.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Req.displayName = 'proto.typedb.protocol.Transaction.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Transaction.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Transaction.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Res.displayName = 'proto.typedb.protocol.Transaction.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Transaction.ResPart.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Transaction.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.ResPart.displayName = 'proto.typedb.protocol.Transaction.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Open = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Open, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Open.displayName = 'proto.typedb.protocol.Transaction.Open';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Open.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Open.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Open.Req.displayName = 'proto.typedb.protocol.Transaction.Open.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Open.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Open.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Open.Res.displayName = 'proto.typedb.protocol.Transaction.Open.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Stream.displayName = 'proto.typedb.protocol.Transaction.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Stream.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Stream.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Stream.Req.displayName = 'proto.typedb.protocol.Transaction.Stream.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Stream.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Stream.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Stream.ResPart.displayName = 'proto.typedb.protocol.Transaction.Stream.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Commit.displayName = 'proto.typedb.protocol.Transaction.Commit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Commit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Commit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Commit.Req.displayName = 'proto.typedb.protocol.Transaction.Commit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Commit.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Commit.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Commit.Res.displayName = 'proto.typedb.protocol.Transaction.Commit.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Rollback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Rollback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Rollback.displayName = 'proto.typedb.protocol.Transaction.Rollback';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Rollback.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Rollback.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Rollback.Req.displayName = 'proto.typedb.protocol.Transaction.Rollback.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Transaction.Rollback.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Transaction.Rollback.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Transaction.Rollback.Res.displayName = 'proto.typedb.protocol.Transaction.Rollback.Res';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction}
 */
proto.typedb.protocol.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction;
  return proto.typedb.protocol.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction}
 */
proto.typedb.protocol.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.Type = {
  READ: 0,
  WRITE: 1
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Transaction.Client.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Client.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Client.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Client} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Client.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqsList: jspb.Message.toObjectList(msg.getReqsList(),
    proto.typedb.protocol.Transaction.Req.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Client}
 */
proto.typedb.protocol.Transaction.Client.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Client;
  return proto.typedb.protocol.Transaction.Client.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Client} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Client}
 */
proto.typedb.protocol.Transaction.Client.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Transaction.Req;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Req.deserializeBinaryFromReader);
      msg.addReqs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Client.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Client.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Client} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Client.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Transaction.Req.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Req reqs = 1;
 * @return {!Array<!proto.typedb.protocol.Transaction.Req>}
 */
proto.typedb.protocol.Transaction.Client.prototype.getReqsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Transaction.Req>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Transaction.Req, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Transaction.Req>} value
 * @return {!proto.typedb.protocol.Transaction.Client} returns this
*/
proto.typedb.protocol.Transaction.Client.prototype.setReqsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Transaction.Req=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Transaction.Req}
 */
proto.typedb.protocol.Transaction.Client.prototype.addReqs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Transaction.Req, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Transaction.Client} returns this
 */
proto.typedb.protocol.Transaction.Client.prototype.clearReqsList = function() {
  return this.setReqsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Transaction.Server.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.Server.ServerCase = {
  SERVER_NOT_SET: 0,
  RES: 2,
  RES_PART: 3
};

/**
 * @return {proto.typedb.protocol.Transaction.Server.ServerCase}
 */
proto.typedb.protocol.Transaction.Server.prototype.getServerCase = function() {
  return /** @type {proto.typedb.protocol.Transaction.Server.ServerCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Transaction.Server.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Server.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Server.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Server} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Server.toObject = function(includeInstance, msg) {
  var f, obj = {
    res: (f = msg.getRes()) && proto.typedb.protocol.Transaction.Res.toObject(includeInstance, f),
    resPart: (f = msg.getResPart()) && proto.typedb.protocol.Transaction.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Server}
 */
proto.typedb.protocol.Transaction.Server.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Server;
  return proto.typedb.protocol.Transaction.Server.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Server} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Server}
 */
proto.typedb.protocol.Transaction.Server.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.typedb.protocol.Transaction.Res;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Res.deserializeBinaryFromReader);
      msg.setRes(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.Transaction.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Transaction.ResPart.deserializeBinaryFromReader);
      msg.setResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Server.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Server.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Server} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Server.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Transaction.Res.serializeBinaryToWriter
    );
  }
  f = message.getResPart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.Transaction.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional Res res = 2;
 * @return {?proto.typedb.protocol.Transaction.Res}
 */
proto.typedb.protocol.Transaction.Server.prototype.getRes = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Res, 2));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Server} returns this
*/
proto.typedb.protocol.Transaction.Server.prototype.setRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.Transaction.Server.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Server} returns this
 */
proto.typedb.protocol.Transaction.Server.prototype.clearRes = function() {
  return this.setRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Server.prototype.hasRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResPart res_part = 3;
 * @return {?proto.typedb.protocol.Transaction.ResPart}
 */
proto.typedb.protocol.Transaction.Server.prototype.getResPart = function() {
  return /** @type{?proto.typedb.protocol.Transaction.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.ResPart, 3));
};


/**
 * @param {?proto.typedb.protocol.Transaction.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Server} returns this
*/
proto.typedb.protocol.Transaction.Server.prototype.setResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.Transaction.Server.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Server} returns this
 */
proto.typedb.protocol.Transaction.Server.prototype.clearResPart = function() {
  return this.setResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Server.prototype.hasResPart = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Transaction.Req.oneofGroups_ = [[3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.Req.ReqCase = {
  REQ_NOT_SET: 0,
  OPEN_REQ: 3,
  STREAM_REQ: 4,
  COMMIT_REQ: 5,
  ROLLBACK_REQ: 6,
  QUERY_MANAGER_REQ: 7,
  CONCEPT_MANAGER_REQ: 8,
  LOGIC_MANAGER_REQ: 9,
  RULE_REQ: 10,
  TYPE_REQ: 11,
  THING_REQ: 12
};

/**
 * @return {proto.typedb.protocol.Transaction.Req.ReqCase}
 */
proto.typedb.protocol.Transaction.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.Transaction.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Transaction.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqId: msg.getReqId_asB64(),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    openReq: (f = msg.getOpenReq()) && proto.typedb.protocol.Transaction.Open.Req.toObject(includeInstance, f),
    streamReq: (f = msg.getStreamReq()) && proto.typedb.protocol.Transaction.Stream.Req.toObject(includeInstance, f),
    commitReq: (f = msg.getCommitReq()) && proto.typedb.protocol.Transaction.Commit.Req.toObject(includeInstance, f),
    rollbackReq: (f = msg.getRollbackReq()) && proto.typedb.protocol.Transaction.Rollback.Req.toObject(includeInstance, f),
    queryManagerReq: (f = msg.getQueryManagerReq()) && common_query_pb.QueryManager.Req.toObject(includeInstance, f),
    conceptManagerReq: (f = msg.getConceptManagerReq()) && common_concept_pb.ConceptManager.Req.toObject(includeInstance, f),
    logicManagerReq: (f = msg.getLogicManagerReq()) && common_logic_pb.LogicManager.Req.toObject(includeInstance, f),
    ruleReq: (f = msg.getRuleReq()) && common_logic_pb.Rule.Req.toObject(includeInstance, f),
    typeReq: (f = msg.getTypeReq()) && common_concept_pb.Type.Req.toObject(includeInstance, f),
    thingReq: (f = msg.getThingReq()) && common_concept_pb.Thing.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Req}
 */
proto.typedb.protocol.Transaction.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Req;
  return proto.typedb.protocol.Transaction.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Req}
 */
proto.typedb.protocol.Transaction.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReqId(value);
      break;
    case 2:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = new proto.typedb.protocol.Transaction.Open.Req;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Open.Req.deserializeBinaryFromReader);
      msg.setOpenReq(value);
      break;
    case 4:
      var value = new proto.typedb.protocol.Transaction.Stream.Req;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Stream.Req.deserializeBinaryFromReader);
      msg.setStreamReq(value);
      break;
    case 5:
      var value = new proto.typedb.protocol.Transaction.Commit.Req;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Commit.Req.deserializeBinaryFromReader);
      msg.setCommitReq(value);
      break;
    case 6:
      var value = new proto.typedb.protocol.Transaction.Rollback.Req;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Rollback.Req.deserializeBinaryFromReader);
      msg.setRollbackReq(value);
      break;
    case 7:
      var value = new common_query_pb.QueryManager.Req;
      reader.readMessage(value,common_query_pb.QueryManager.Req.deserializeBinaryFromReader);
      msg.setQueryManagerReq(value);
      break;
    case 8:
      var value = new common_concept_pb.ConceptManager.Req;
      reader.readMessage(value,common_concept_pb.ConceptManager.Req.deserializeBinaryFromReader);
      msg.setConceptManagerReq(value);
      break;
    case 9:
      var value = new common_logic_pb.LogicManager.Req;
      reader.readMessage(value,common_logic_pb.LogicManager.Req.deserializeBinaryFromReader);
      msg.setLogicManagerReq(value);
      break;
    case 10:
      var value = new common_logic_pb.Rule.Req;
      reader.readMessage(value,common_logic_pb.Rule.Req.deserializeBinaryFromReader);
      msg.setRuleReq(value);
      break;
    case 11:
      var value = new common_concept_pb.Type.Req;
      reader.readMessage(value,common_concept_pb.Type.Req.deserializeBinaryFromReader);
      msg.setTypeReq(value);
      break;
    case 12:
      var value = new common_concept_pb.Thing.Req;
      reader.readMessage(value,common_concept_pb.Thing.Req.deserializeBinaryFromReader);
      msg.setThingReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getOpenReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.Transaction.Open.Req.serializeBinaryToWriter
    );
  }
  f = message.getStreamReq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.typedb.protocol.Transaction.Stream.Req.serializeBinaryToWriter
    );
  }
  f = message.getCommitReq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.typedb.protocol.Transaction.Commit.Req.serializeBinaryToWriter
    );
  }
  f = message.getRollbackReq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.typedb.protocol.Transaction.Rollback.Req.serializeBinaryToWriter
    );
  }
  f = message.getQueryManagerReq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_query_pb.QueryManager.Req.serializeBinaryToWriter
    );
  }
  f = message.getConceptManagerReq();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_concept_pb.ConceptManager.Req.serializeBinaryToWriter
    );
  }
  f = message.getLogicManagerReq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      common_logic_pb.LogicManager.Req.serializeBinaryToWriter
    );
  }
  f = message.getRuleReq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      common_logic_pb.Rule.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeReq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      common_concept_pb.Type.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingReq();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      common_concept_pb.Thing.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes req_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Transaction.Req.prototype.getReqId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes req_id = 1;
 * This is a type-conversion wrapper around `getReqId()`
 * @return {string}
 */
proto.typedb.protocol.Transaction.Req.prototype.getReqId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReqId()));
};


/**
 * optional bytes req_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReqId()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Req.prototype.getReqId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReqId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.setReqId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * map<string, string> metadata = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.typedb.protocol.Transaction.Req.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;};


/**
 * optional Open.Req open_req = 3;
 * @return {?proto.typedb.protocol.Transaction.Open.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getOpenReq = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Open.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Open.Req, 3));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Open.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setOpenReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearOpenReq = function() {
  return this.setOpenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasOpenReq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Stream.Req stream_req = 4;
 * @return {?proto.typedb.protocol.Transaction.Stream.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getStreamReq = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Stream.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Stream.Req, 4));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Stream.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setStreamReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearStreamReq = function() {
  return this.setStreamReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasStreamReq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Commit.Req commit_req = 5;
 * @return {?proto.typedb.protocol.Transaction.Commit.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getCommitReq = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Commit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Commit.Req, 5));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Commit.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setCommitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearCommitReq = function() {
  return this.setCommitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasCommitReq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Rollback.Req rollback_req = 6;
 * @return {?proto.typedb.protocol.Transaction.Rollback.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getRollbackReq = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Rollback.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Rollback.Req, 6));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Rollback.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setRollbackReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearRollbackReq = function() {
  return this.setRollbackReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasRollbackReq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional QueryManager.Req query_manager_req = 7;
 * @return {?proto.typedb.protocol.QueryManager.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getQueryManagerReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Req} */ (
    jspb.Message.getWrapperField(this, common_query_pb.QueryManager.Req, 7));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setQueryManagerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearQueryManagerReq = function() {
  return this.setQueryManagerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasQueryManagerReq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ConceptManager.Req concept_manager_req = 8;
 * @return {?proto.typedb.protocol.ConceptManager.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getConceptManagerReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.Req} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.ConceptManager.Req, 8));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setConceptManagerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearConceptManagerReq = function() {
  return this.setConceptManagerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasConceptManagerReq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional LogicManager.Req logic_manager_req = 9;
 * @return {?proto.typedb.protocol.LogicManager.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getLogicManagerReq = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.Req} */ (
    jspb.Message.getWrapperField(this, common_logic_pb.LogicManager.Req, 9));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setLogicManagerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearLogicManagerReq = function() {
  return this.setLogicManagerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasLogicManagerReq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Rule.Req rule_req = 10;
 * @return {?proto.typedb.protocol.Rule.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getRuleReq = function() {
  return /** @type{?proto.typedb.protocol.Rule.Req} */ (
    jspb.Message.getWrapperField(this, common_logic_pb.Rule.Req, 10));
};


/**
 * @param {?proto.typedb.protocol.Rule.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setRuleReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearRuleReq = function() {
  return this.setRuleReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasRuleReq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Type.Req type_req = 11;
 * @return {?proto.typedb.protocol.Type.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getTypeReq = function() {
  return /** @type{?proto.typedb.protocol.Type.Req} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Type.Req, 11));
};


/**
 * @param {?proto.typedb.protocol.Type.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearTypeReq = function() {
  return this.setTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasTypeReq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Thing.Req thing_req = 12;
 * @return {?proto.typedb.protocol.Thing.Req}
 */
proto.typedb.protocol.Transaction.Req.prototype.getThingReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.Req} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Thing.Req, 12));
};


/**
 * @param {?proto.typedb.protocol.Thing.Req|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
*/
proto.typedb.protocol.Transaction.Req.prototype.setThingReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.typedb.protocol.Transaction.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Req} returns this
 */
proto.typedb.protocol.Transaction.Req.prototype.clearThingReq = function() {
  return this.setThingReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Req.prototype.hasThingReq = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Transaction.Res.oneofGroups_ = [[2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.Res.ResCase = {
  RES_NOT_SET: 0,
  OPEN_RES: 2,
  COMMIT_RES: 3,
  ROLLBACK_RES: 4,
  QUERY_MANAGER_RES: 5,
  CONCEPT_MANAGER_RES: 6,
  LOGIC_MANAGER_RES: 7,
  RULE_RES: 8,
  TYPE_RES: 9,
  THING_RES: 10
};

/**
 * @return {proto.typedb.protocol.Transaction.Res.ResCase}
 */
proto.typedb.protocol.Transaction.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Transaction.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Transaction.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqId: msg.getReqId_asB64(),
    openRes: (f = msg.getOpenRes()) && proto.typedb.protocol.Transaction.Open.Res.toObject(includeInstance, f),
    commitRes: (f = msg.getCommitRes()) && proto.typedb.protocol.Transaction.Commit.Res.toObject(includeInstance, f),
    rollbackRes: (f = msg.getRollbackRes()) && proto.typedb.protocol.Transaction.Rollback.Res.toObject(includeInstance, f),
    queryManagerRes: (f = msg.getQueryManagerRes()) && common_query_pb.QueryManager.Res.toObject(includeInstance, f),
    conceptManagerRes: (f = msg.getConceptManagerRes()) && common_concept_pb.ConceptManager.Res.toObject(includeInstance, f),
    logicManagerRes: (f = msg.getLogicManagerRes()) && common_logic_pb.LogicManager.Res.toObject(includeInstance, f),
    ruleRes: (f = msg.getRuleRes()) && common_logic_pb.Rule.Res.toObject(includeInstance, f),
    typeRes: (f = msg.getTypeRes()) && common_concept_pb.Type.Res.toObject(includeInstance, f),
    thingRes: (f = msg.getThingRes()) && common_concept_pb.Thing.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Res}
 */
proto.typedb.protocol.Transaction.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Res;
  return proto.typedb.protocol.Transaction.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Res}
 */
proto.typedb.protocol.Transaction.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReqId(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Transaction.Open.Res;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Open.Res.deserializeBinaryFromReader);
      msg.setOpenRes(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.Transaction.Commit.Res;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Commit.Res.deserializeBinaryFromReader);
      msg.setCommitRes(value);
      break;
    case 4:
      var value = new proto.typedb.protocol.Transaction.Rollback.Res;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Rollback.Res.deserializeBinaryFromReader);
      msg.setRollbackRes(value);
      break;
    case 5:
      var value = new common_query_pb.QueryManager.Res;
      reader.readMessage(value,common_query_pb.QueryManager.Res.deserializeBinaryFromReader);
      msg.setQueryManagerRes(value);
      break;
    case 6:
      var value = new common_concept_pb.ConceptManager.Res;
      reader.readMessage(value,common_concept_pb.ConceptManager.Res.deserializeBinaryFromReader);
      msg.setConceptManagerRes(value);
      break;
    case 7:
      var value = new common_logic_pb.LogicManager.Res;
      reader.readMessage(value,common_logic_pb.LogicManager.Res.deserializeBinaryFromReader);
      msg.setLogicManagerRes(value);
      break;
    case 8:
      var value = new common_logic_pb.Rule.Res;
      reader.readMessage(value,common_logic_pb.Rule.Res.deserializeBinaryFromReader);
      msg.setRuleRes(value);
      break;
    case 9:
      var value = new common_concept_pb.Type.Res;
      reader.readMessage(value,common_concept_pb.Type.Res.deserializeBinaryFromReader);
      msg.setTypeRes(value);
      break;
    case 10:
      var value = new common_concept_pb.Thing.Res;
      reader.readMessage(value,common_concept_pb.Thing.Res.deserializeBinaryFromReader);
      msg.setThingRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOpenRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Transaction.Open.Res.serializeBinaryToWriter
    );
  }
  f = message.getCommitRes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.Transaction.Commit.Res.serializeBinaryToWriter
    );
  }
  f = message.getRollbackRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.typedb.protocol.Transaction.Rollback.Res.serializeBinaryToWriter
    );
  }
  f = message.getQueryManagerRes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_query_pb.QueryManager.Res.serializeBinaryToWriter
    );
  }
  f = message.getConceptManagerRes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_concept_pb.ConceptManager.Res.serializeBinaryToWriter
    );
  }
  f = message.getLogicManagerRes();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      common_logic_pb.LogicManager.Res.serializeBinaryToWriter
    );
  }
  f = message.getRuleRes();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_logic_pb.Rule.Res.serializeBinaryToWriter
    );
  }
  f = message.getTypeRes();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      common_concept_pb.Type.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingRes();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      common_concept_pb.Thing.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes req_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Transaction.Res.prototype.getReqId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes req_id = 1;
 * This is a type-conversion wrapper around `getReqId()`
 * @return {string}
 */
proto.typedb.protocol.Transaction.Res.prototype.getReqId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReqId()));
};


/**
 * optional bytes req_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReqId()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Res.prototype.getReqId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReqId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.setReqId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Open.Res open_res = 2;
 * @return {?proto.typedb.protocol.Transaction.Open.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getOpenRes = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Open.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Open.Res, 2));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Open.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setOpenRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearOpenRes = function() {
  return this.setOpenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasOpenRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Commit.Res commit_res = 3;
 * @return {?proto.typedb.protocol.Transaction.Commit.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getCommitRes = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Commit.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Commit.Res, 3));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Commit.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setCommitRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearCommitRes = function() {
  return this.setCommitRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasCommitRes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Rollback.Res rollback_res = 4;
 * @return {?proto.typedb.protocol.Transaction.Rollback.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getRollbackRes = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Rollback.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Rollback.Res, 4));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Rollback.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setRollbackRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearRollbackRes = function() {
  return this.setRollbackRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasRollbackRes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional QueryManager.Res query_manager_res = 5;
 * @return {?proto.typedb.protocol.QueryManager.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getQueryManagerRes = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Res} */ (
    jspb.Message.getWrapperField(this, common_query_pb.QueryManager.Res, 5));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setQueryManagerRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearQueryManagerRes = function() {
  return this.setQueryManagerRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasQueryManagerRes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ConceptManager.Res concept_manager_res = 6;
 * @return {?proto.typedb.protocol.ConceptManager.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getConceptManagerRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.Res} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.ConceptManager.Res, 6));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setConceptManagerRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearConceptManagerRes = function() {
  return this.setConceptManagerRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasConceptManagerRes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional LogicManager.Res logic_manager_res = 7;
 * @return {?proto.typedb.protocol.LogicManager.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getLogicManagerRes = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.Res} */ (
    jspb.Message.getWrapperField(this, common_logic_pb.LogicManager.Res, 7));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setLogicManagerRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearLogicManagerRes = function() {
  return this.setLogicManagerRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasLogicManagerRes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Rule.Res rule_res = 8;
 * @return {?proto.typedb.protocol.Rule.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getRuleRes = function() {
  return /** @type{?proto.typedb.protocol.Rule.Res} */ (
    jspb.Message.getWrapperField(this, common_logic_pb.Rule.Res, 8));
};


/**
 * @param {?proto.typedb.protocol.Rule.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setRuleRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearRuleRes = function() {
  return this.setRuleRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasRuleRes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Type.Res type_res = 9;
 * @return {?proto.typedb.protocol.Type.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getTypeRes = function() {
  return /** @type{?proto.typedb.protocol.Type.Res} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Type.Res, 9));
};


/**
 * @param {?proto.typedb.protocol.Type.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearTypeRes = function() {
  return this.setTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasTypeRes = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Thing.Res thing_res = 10;
 * @return {?proto.typedb.protocol.Thing.Res}
 */
proto.typedb.protocol.Transaction.Res.prototype.getThingRes = function() {
  return /** @type{?proto.typedb.protocol.Thing.Res} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Thing.Res, 10));
};


/**
 * @param {?proto.typedb.protocol.Thing.Res|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
*/
proto.typedb.protocol.Transaction.Res.prototype.setThingRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.typedb.protocol.Transaction.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Res} returns this
 */
proto.typedb.protocol.Transaction.Res.prototype.clearThingRes = function() {
  return this.setThingRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Res.prototype.hasThingRes = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Transaction.ResPart.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.ResPart.ResCase = {
  RES_NOT_SET: 0,
  STREAM_RES_PART: 2,
  QUERY_MANAGER_RES_PART: 3,
  LOGIC_MANAGER_RES_PART: 4,
  TYPE_RES_PART: 5,
  THING_RES_PART: 6
};

/**
 * @return {proto.typedb.protocol.Transaction.ResPart.ResCase}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Transaction.ResPart.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqId: msg.getReqId_asB64(),
    streamResPart: (f = msg.getStreamResPart()) && proto.typedb.protocol.Transaction.Stream.ResPart.toObject(includeInstance, f),
    queryManagerResPart: (f = msg.getQueryManagerResPart()) && common_query_pb.QueryManager.ResPart.toObject(includeInstance, f),
    logicManagerResPart: (f = msg.getLogicManagerResPart()) && common_logic_pb.LogicManager.ResPart.toObject(includeInstance, f),
    typeResPart: (f = msg.getTypeResPart()) && common_concept_pb.Type.ResPart.toObject(includeInstance, f),
    thingResPart: (f = msg.getThingResPart()) && common_concept_pb.Thing.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.ResPart;
  return proto.typedb.protocol.Transaction.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReqId(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Transaction.Stream.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Transaction.Stream.ResPart.deserializeBinaryFromReader);
      msg.setStreamResPart(value);
      break;
    case 3:
      var value = new common_query_pb.QueryManager.ResPart;
      reader.readMessage(value,common_query_pb.QueryManager.ResPart.deserializeBinaryFromReader);
      msg.setQueryManagerResPart(value);
      break;
    case 4:
      var value = new common_logic_pb.LogicManager.ResPart;
      reader.readMessage(value,common_logic_pb.LogicManager.ResPart.deserializeBinaryFromReader);
      msg.setLogicManagerResPart(value);
      break;
    case 5:
      var value = new common_concept_pb.Type.ResPart;
      reader.readMessage(value,common_concept_pb.Type.ResPart.deserializeBinaryFromReader);
      msg.setTypeResPart(value);
      break;
    case 6:
      var value = new common_concept_pb.Thing.ResPart;
      reader.readMessage(value,common_concept_pb.Thing.ResPart.deserializeBinaryFromReader);
      msg.setThingResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStreamResPart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Transaction.Stream.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getQueryManagerResPart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_query_pb.QueryManager.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getLogicManagerResPart();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_logic_pb.LogicManager.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getTypeResPart();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_concept_pb.Type.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingResPart();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      common_concept_pb.Thing.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes req_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getReqId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes req_id = 1;
 * This is a type-conversion wrapper around `getReqId()`
 * @return {string}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getReqId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReqId()));
};


/**
 * optional bytes req_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReqId()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getReqId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReqId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.setReqId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Stream.ResPart stream_res_part = 2;
 * @return {?proto.typedb.protocol.Transaction.Stream.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getStreamResPart = function() {
  return /** @type{?proto.typedb.protocol.Transaction.Stream.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Transaction.Stream.ResPart, 2));
};


/**
 * @param {?proto.typedb.protocol.Transaction.Stream.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
*/
proto.typedb.protocol.Transaction.ResPart.prototype.setStreamResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.clearStreamResPart = function() {
  return this.setStreamResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.hasStreamResPart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QueryManager.ResPart query_manager_res_part = 3;
 * @return {?proto.typedb.protocol.QueryManager.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getQueryManagerResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.ResPart} */ (
    jspb.Message.getWrapperField(this, common_query_pb.QueryManager.ResPart, 3));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
*/
proto.typedb.protocol.Transaction.ResPart.prototype.setQueryManagerResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.clearQueryManagerResPart = function() {
  return this.setQueryManagerResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.hasQueryManagerResPart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LogicManager.ResPart logic_manager_res_part = 4;
 * @return {?proto.typedb.protocol.LogicManager.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getLogicManagerResPart = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.ResPart} */ (
    jspb.Message.getWrapperField(this, common_logic_pb.LogicManager.ResPart, 4));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
*/
proto.typedb.protocol.Transaction.ResPart.prototype.setLogicManagerResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.clearLogicManagerResPart = function() {
  return this.setLogicManagerResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.hasLogicManagerResPart = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Type.ResPart type_res_part = 5;
 * @return {?proto.typedb.protocol.Type.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getTypeResPart = function() {
  return /** @type{?proto.typedb.protocol.Type.ResPart} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Type.ResPart, 5));
};


/**
 * @param {?proto.typedb.protocol.Type.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
*/
proto.typedb.protocol.Transaction.ResPart.prototype.setTypeResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.clearTypeResPart = function() {
  return this.setTypeResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.hasTypeResPart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Thing.ResPart thing_res_part = 6;
 * @return {?proto.typedb.protocol.Thing.ResPart}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.getThingResPart = function() {
  return /** @type{?proto.typedb.protocol.Thing.ResPart} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Thing.ResPart, 6));
};


/**
 * @param {?proto.typedb.protocol.Thing.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
*/
proto.typedb.protocol.Transaction.ResPart.prototype.setThingResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.typedb.protocol.Transaction.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.ResPart} returns this
 */
proto.typedb.protocol.Transaction.ResPart.prototype.clearThingResPart = function() {
  return this.setThingResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.ResPart.prototype.hasThingResPart = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Open.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Open.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Open} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Open}
 */
proto.typedb.protocol.Transaction.Open.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Open;
  return proto.typedb.protocol.Transaction.Open.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Open} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Open}
 */
proto.typedb.protocol.Transaction.Open.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Open.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Open.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Open} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Open.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Open.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: msg.getSessionId_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    options: (f = msg.getOptions()) && common_options_pb.Options.toObject(includeInstance, f),
    networkLatencyMillis: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Open.Req}
 */
proto.typedb.protocol.Transaction.Open.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Open.Req;
  return proto.typedb.protocol.Transaction.Open.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Open.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Open.Req}
 */
proto.typedb.protocol.Transaction.Open.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!proto.typedb.protocol.Transaction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new common_options_pb.Options;
      reader.readMessage(value,common_options_pb.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNetworkLatencyMillis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Open.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Open.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_options_pb.Options.serializeBinaryToWriter
    );
  }
  f = message.getNetworkLatencyMillis();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes session_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Transaction.Open.Req} returns this
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.typedb.protocol.Transaction.Type}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getType = function() {
  return /** @type {!proto.typedb.protocol.Transaction.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.typedb.protocol.Transaction.Type} value
 * @return {!proto.typedb.protocol.Transaction.Open.Req} returns this
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Options options = 3;
 * @return {?proto.typedb.protocol.Options}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getOptions = function() {
  return /** @type{?proto.typedb.protocol.Options} */ (
    jspb.Message.getWrapperField(this, common_options_pb.Options, 3));
};


/**
 * @param {?proto.typedb.protocol.Options|undefined} value
 * @return {!proto.typedb.protocol.Transaction.Open.Req} returns this
*/
proto.typedb.protocol.Transaction.Open.Req.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Transaction.Open.Req} returns this
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 network_latency_millis = 4;
 * @return {number}
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.getNetworkLatencyMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Transaction.Open.Req} returns this
 */
proto.typedb.protocol.Transaction.Open.Req.prototype.setNetworkLatencyMillis = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Open.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Open.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Open.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Open.Res}
 */
proto.typedb.protocol.Transaction.Open.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Open.Res;
  return proto.typedb.protocol.Transaction.Open.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Open.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Open.Res}
 */
proto.typedb.protocol.Transaction.Open.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Open.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Open.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Open.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Open.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Stream}
 */
proto.typedb.protocol.Transaction.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Stream;
  return proto.typedb.protocol.Transaction.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Stream}
 */
proto.typedb.protocol.Transaction.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.typedb.protocol.Transaction.Stream.State = {
  CONTINUE: 0,
  DONE: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Stream.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Stream.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Stream.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Stream.Req}
 */
proto.typedb.protocol.Transaction.Stream.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Stream.Req;
  return proto.typedb.protocol.Transaction.Stream.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Stream.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Stream.Req}
 */
proto.typedb.protocol.Transaction.Stream.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Stream.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Stream.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Stream.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Stream.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Stream.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Stream.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Stream.ResPart}
 */
proto.typedb.protocol.Transaction.Stream.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Stream.ResPart;
  return proto.typedb.protocol.Transaction.Stream.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Stream.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Stream.ResPart}
 */
proto.typedb.protocol.Transaction.Stream.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.typedb.protocol.Transaction.Stream.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Stream.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Stream.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Stream.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Stream.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional State state = 1;
 * @return {!proto.typedb.protocol.Transaction.Stream.State}
 */
proto.typedb.protocol.Transaction.Stream.ResPart.prototype.getState = function() {
  return /** @type {!proto.typedb.protocol.Transaction.Stream.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.typedb.protocol.Transaction.Stream.State} value
 * @return {!proto.typedb.protocol.Transaction.Stream.ResPart} returns this
 */
proto.typedb.protocol.Transaction.Stream.ResPart.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Commit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Commit}
 */
proto.typedb.protocol.Transaction.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Commit;
  return proto.typedb.protocol.Transaction.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Commit}
 */
proto.typedb.protocol.Transaction.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Commit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Commit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Commit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Commit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Commit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Commit.Req}
 */
proto.typedb.protocol.Transaction.Commit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Commit.Req;
  return proto.typedb.protocol.Transaction.Commit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Commit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Commit.Req}
 */
proto.typedb.protocol.Transaction.Commit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Commit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Commit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Commit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Commit.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Commit.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Commit.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Commit.Res}
 */
proto.typedb.protocol.Transaction.Commit.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Commit.Res;
  return proto.typedb.protocol.Transaction.Commit.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Commit.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Commit.Res}
 */
proto.typedb.protocol.Transaction.Commit.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Commit.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Commit.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Commit.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Commit.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Rollback.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Rollback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Rollback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Rollback}
 */
proto.typedb.protocol.Transaction.Rollback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Rollback;
  return proto.typedb.protocol.Transaction.Rollback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Rollback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Rollback}
 */
proto.typedb.protocol.Transaction.Rollback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Rollback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Rollback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Rollback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Rollback.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Rollback.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Rollback.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Rollback.Req}
 */
proto.typedb.protocol.Transaction.Rollback.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Rollback.Req;
  return proto.typedb.protocol.Transaction.Rollback.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Rollback.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Rollback.Req}
 */
proto.typedb.protocol.Transaction.Rollback.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Rollback.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Rollback.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Rollback.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Transaction.Rollback.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Transaction.Rollback.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Transaction.Rollback.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Transaction.Rollback.Res}
 */
proto.typedb.protocol.Transaction.Rollback.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Transaction.Rollback.Res;
  return proto.typedb.protocol.Transaction.Rollback.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Transaction.Rollback.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Transaction.Rollback.Res}
 */
proto.typedb.protocol.Transaction.Rollback.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Transaction.Rollback.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Transaction.Rollback.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Transaction.Rollback.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Transaction.Rollback.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.typedb.protocol);
