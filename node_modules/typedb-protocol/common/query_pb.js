// source: common/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_answer_pb = require('../common/answer_pb.js');
goog.object.extend(proto, common_answer_pb);
var common_logic_pb = require('../common/logic_pb.js');
goog.object.extend(proto, common_logic_pb);
var common_options_pb = require('../common/options_pb.js');
goog.object.extend(proto, common_options_pb);
goog.exportSymbol('proto.typedb.protocol.QueryManager', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Define', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Define.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Define.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Delete', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Delete.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Delete.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Explain', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Explain.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Explain.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Insert', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Insert.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Insert.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Match', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Match.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Match.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchAggregate', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchAggregate.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchAggregate.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroup', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroup.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroup.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroupAggregate', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.ResPart.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Undefine', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Undefine.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Undefine.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Update', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Update.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.QueryManager.Update.ResPart', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.displayName = 'proto.typedb.protocol.QueryManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.QueryManager.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.QueryManager.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Req.displayName = 'proto.typedb.protocol.QueryManager.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.QueryManager.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.QueryManager.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Res.displayName = 'proto.typedb.protocol.QueryManager.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.QueryManager.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.ResPart.displayName = 'proto.typedb.protocol.QueryManager.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Match = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Match, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Match.displayName = 'proto.typedb.protocol.QueryManager.Match';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Match.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Match.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Match.Req.displayName = 'proto.typedb.protocol.QueryManager.Match.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Match.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.Match.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Match.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Match.ResPart.displayName = 'proto.typedb.protocol.QueryManager.Match.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchAggregate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchAggregate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchAggregate.displayName = 'proto.typedb.protocol.QueryManager.MatchAggregate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchAggregate.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchAggregate.Req.displayName = 'proto.typedb.protocol.QueryManager.MatchAggregate.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchAggregate.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchAggregate.Res.displayName = 'proto.typedb.protocol.QueryManager.MatchAggregate.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroup.displayName = 'proto.typedb.protocol.QueryManager.MatchGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroup.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroup.Req.displayName = 'proto.typedb.protocol.QueryManager.MatchGroup.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.MatchGroup.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroup.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroup.ResPart.displayName = 'proto.typedb.protocol.QueryManager.MatchGroup.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroupAggregate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.displayName = 'proto.typedb.protocol.QueryManager.MatchGroupAggregate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.displayName = 'proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.displayName = 'proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Explain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Explain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Explain.displayName = 'proto.typedb.protocol.QueryManager.Explain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Explain.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Explain.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Explain.Req.displayName = 'proto.typedb.protocol.QueryManager.Explain.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Explain.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.Explain.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Explain.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Explain.ResPart.displayName = 'proto.typedb.protocol.QueryManager.Explain.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Insert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Insert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Insert.displayName = 'proto.typedb.protocol.QueryManager.Insert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Insert.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Insert.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Insert.Req.displayName = 'proto.typedb.protocol.QueryManager.Insert.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Insert.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.Insert.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Insert.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Insert.ResPart.displayName = 'proto.typedb.protocol.QueryManager.Insert.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Delete.displayName = 'proto.typedb.protocol.QueryManager.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Delete.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Delete.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Delete.Req.displayName = 'proto.typedb.protocol.QueryManager.Delete.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Delete.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Delete.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Delete.Res.displayName = 'proto.typedb.protocol.QueryManager.Delete.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Update.displayName = 'proto.typedb.protocol.QueryManager.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Update.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Update.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Update.Req.displayName = 'proto.typedb.protocol.QueryManager.Update.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Update.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.QueryManager.Update.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Update.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Update.ResPart.displayName = 'proto.typedb.protocol.QueryManager.Update.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Define = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Define, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Define.displayName = 'proto.typedb.protocol.QueryManager.Define';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Define.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Define.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Define.Req.displayName = 'proto.typedb.protocol.QueryManager.Define.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Define.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Define.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Define.Res.displayName = 'proto.typedb.protocol.QueryManager.Define.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Undefine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Undefine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Undefine.displayName = 'proto.typedb.protocol.QueryManager.Undefine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Undefine.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Undefine.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Undefine.Req.displayName = 'proto.typedb.protocol.QueryManager.Undefine.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.QueryManager.Undefine.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.QueryManager.Undefine.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.QueryManager.Undefine.Res.displayName = 'proto.typedb.protocol.QueryManager.Undefine.Res';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager}
 */
proto.typedb.protocol.QueryManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager;
  return proto.typedb.protocol.QueryManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager}
 */
proto.typedb.protocol.QueryManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.QueryManager.Req.oneofGroups_ = [[100,101,102,103,104,105,106,107,108,109]];

/**
 * @enum {number}
 */
proto.typedb.protocol.QueryManager.Req.ReqCase = {
  REQ_NOT_SET: 0,
  DEFINE_REQ: 100,
  UNDEFINE_REQ: 101,
  MATCH_REQ: 102,
  MATCH_AGGREGATE_REQ: 103,
  MATCH_GROUP_REQ: 104,
  MATCH_GROUP_AGGREGATE_REQ: 105,
  INSERT_REQ: 106,
  DELETE_REQ: 107,
  UPDATE_REQ: 108,
  EXPLAIN_REQ: 109
};

/**
 * @return {proto.typedb.protocol.QueryManager.Req.ReqCase}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.QueryManager.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    options: (f = msg.getOptions()) && common_options_pb.Options.toObject(includeInstance, f),
    defineReq: (f = msg.getDefineReq()) && proto.typedb.protocol.QueryManager.Define.Req.toObject(includeInstance, f),
    undefineReq: (f = msg.getUndefineReq()) && proto.typedb.protocol.QueryManager.Undefine.Req.toObject(includeInstance, f),
    matchReq: (f = msg.getMatchReq()) && proto.typedb.protocol.QueryManager.Match.Req.toObject(includeInstance, f),
    matchAggregateReq: (f = msg.getMatchAggregateReq()) && proto.typedb.protocol.QueryManager.MatchAggregate.Req.toObject(includeInstance, f),
    matchGroupReq: (f = msg.getMatchGroupReq()) && proto.typedb.protocol.QueryManager.MatchGroup.Req.toObject(includeInstance, f),
    matchGroupAggregateReq: (f = msg.getMatchGroupAggregateReq()) && proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.toObject(includeInstance, f),
    insertReq: (f = msg.getInsertReq()) && proto.typedb.protocol.QueryManager.Insert.Req.toObject(includeInstance, f),
    deleteReq: (f = msg.getDeleteReq()) && proto.typedb.protocol.QueryManager.Delete.Req.toObject(includeInstance, f),
    updateReq: (f = msg.getUpdateReq()) && proto.typedb.protocol.QueryManager.Update.Req.toObject(includeInstance, f),
    explainReq: (f = msg.getExplainReq()) && proto.typedb.protocol.QueryManager.Explain.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Req}
 */
proto.typedb.protocol.QueryManager.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Req;
  return proto.typedb.protocol.QueryManager.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Req}
 */
proto.typedb.protocol.QueryManager.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_options_pb.Options;
      reader.readMessage(value,common_options_pb.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 100:
      var value = new proto.typedb.protocol.QueryManager.Define.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Define.Req.deserializeBinaryFromReader);
      msg.setDefineReq(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.QueryManager.Undefine.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Undefine.Req.deserializeBinaryFromReader);
      msg.setUndefineReq(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.QueryManager.Match.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Match.Req.deserializeBinaryFromReader);
      msg.setMatchReq(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.QueryManager.MatchAggregate.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchAggregate.Req.deserializeBinaryFromReader);
      msg.setMatchAggregateReq(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.QueryManager.MatchGroup.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchGroup.Req.deserializeBinaryFromReader);
      msg.setMatchGroupReq(value);
      break;
    case 105:
      var value = new proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.deserializeBinaryFromReader);
      msg.setMatchGroupAggregateReq(value);
      break;
    case 106:
      var value = new proto.typedb.protocol.QueryManager.Insert.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Insert.Req.deserializeBinaryFromReader);
      msg.setInsertReq(value);
      break;
    case 107:
      var value = new proto.typedb.protocol.QueryManager.Delete.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Delete.Req.deserializeBinaryFromReader);
      msg.setDeleteReq(value);
      break;
    case 108:
      var value = new proto.typedb.protocol.QueryManager.Update.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Update.Req.deserializeBinaryFromReader);
      msg.setUpdateReq(value);
      break;
    case 109:
      var value = new proto.typedb.protocol.QueryManager.Explain.Req;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Explain.Req.deserializeBinaryFromReader);
      msg.setExplainReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_options_pb.Options.serializeBinaryToWriter
    );
  }
  f = message.getDefineReq();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.QueryManager.Define.Req.serializeBinaryToWriter
    );
  }
  f = message.getUndefineReq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.QueryManager.Undefine.Req.serializeBinaryToWriter
    );
  }
  f = message.getMatchReq();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.QueryManager.Match.Req.serializeBinaryToWriter
    );
  }
  f = message.getMatchAggregateReq();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.QueryManager.MatchAggregate.Req.serializeBinaryToWriter
    );
  }
  f = message.getMatchGroupReq();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.QueryManager.MatchGroup.Req.serializeBinaryToWriter
    );
  }
  f = message.getMatchGroupAggregateReq();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.serializeBinaryToWriter
    );
  }
  f = message.getInsertReq();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.typedb.protocol.QueryManager.Insert.Req.serializeBinaryToWriter
    );
  }
  f = message.getDeleteReq();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.typedb.protocol.QueryManager.Delete.Req.serializeBinaryToWriter
    );
  }
  f = message.getUpdateReq();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.typedb.protocol.QueryManager.Update.Req.serializeBinaryToWriter
    );
  }
  f = message.getExplainReq();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.typedb.protocol.QueryManager.Explain.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional Options options = 1;
 * @return {?proto.typedb.protocol.Options}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getOptions = function() {
  return /** @type{?proto.typedb.protocol.Options} */ (
    jspb.Message.getWrapperField(this, common_options_pb.Options, 1));
};


/**
 * @param {?proto.typedb.protocol.Options|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Define.Req define_req = 100;
 * @return {?proto.typedb.protocol.QueryManager.Define.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getDefineReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Define.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Define.Req, 100));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Define.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setDefineReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearDefineReq = function() {
  return this.setDefineReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasDefineReq = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional Undefine.Req undefine_req = 101;
 * @return {?proto.typedb.protocol.QueryManager.Undefine.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getUndefineReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Undefine.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Undefine.Req, 101));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Undefine.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setUndefineReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearUndefineReq = function() {
  return this.setUndefineReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasUndefineReq = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional Match.Req match_req = 102;
 * @return {?proto.typedb.protocol.QueryManager.Match.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getMatchReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Match.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Match.Req, 102));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Match.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setMatchReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearMatchReq = function() {
  return this.setMatchReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasMatchReq = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional MatchAggregate.Req match_aggregate_req = 103;
 * @return {?proto.typedb.protocol.QueryManager.MatchAggregate.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getMatchAggregateReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchAggregate.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchAggregate.Req, 103));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchAggregate.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setMatchAggregateReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearMatchAggregateReq = function() {
  return this.setMatchAggregateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasMatchAggregateReq = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional MatchGroup.Req match_group_req = 104;
 * @return {?proto.typedb.protocol.QueryManager.MatchGroup.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getMatchGroupReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchGroup.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchGroup.Req, 104));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchGroup.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setMatchGroupReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearMatchGroupReq = function() {
  return this.setMatchGroupReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasMatchGroupReq = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional MatchGroupAggregate.Req match_group_aggregate_req = 105;
 * @return {?proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getMatchGroupAggregateReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req, 105));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setMatchGroupAggregateReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearMatchGroupAggregateReq = function() {
  return this.setMatchGroupAggregateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasMatchGroupAggregateReq = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional Insert.Req insert_req = 106;
 * @return {?proto.typedb.protocol.QueryManager.Insert.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getInsertReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Insert.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Insert.Req, 106));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Insert.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setInsertReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearInsertReq = function() {
  return this.setInsertReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasInsertReq = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional Delete.Req delete_req = 107;
 * @return {?proto.typedb.protocol.QueryManager.Delete.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getDeleteReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Delete.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Delete.Req, 107));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Delete.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setDeleteReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 107, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearDeleteReq = function() {
  return this.setDeleteReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasDeleteReq = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional Update.Req update_req = 108;
 * @return {?proto.typedb.protocol.QueryManager.Update.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getUpdateReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Update.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Update.Req, 108));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Update.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setUpdateReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 108, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearUpdateReq = function() {
  return this.setUpdateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasUpdateReq = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional Explain.Req explain_req = 109;
 * @return {?proto.typedb.protocol.QueryManager.Explain.Req}
 */
proto.typedb.protocol.QueryManager.Req.prototype.getExplainReq = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Explain.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Explain.Req, 109));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Explain.Req|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
*/
proto.typedb.protocol.QueryManager.Req.prototype.setExplainReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 109, proto.typedb.protocol.QueryManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Req} returns this
 */
proto.typedb.protocol.QueryManager.Req.prototype.clearExplainReq = function() {
  return this.setExplainReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Req.prototype.hasExplainReq = function() {
  return jspb.Message.getField(this, 109) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.QueryManager.Res.oneofGroups_ = [[100,101,102,104]];

/**
 * @enum {number}
 */
proto.typedb.protocol.QueryManager.Res.ResCase = {
  RES_NOT_SET: 0,
  DEFINE_RES: 100,
  UNDEFINE_RES: 101,
  MATCH_AGGREGATE_RES: 102,
  DELETE_RES: 104
};

/**
 * @return {proto.typedb.protocol.QueryManager.Res.ResCase}
 */
proto.typedb.protocol.QueryManager.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.QueryManager.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.QueryManager.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    defineRes: (f = msg.getDefineRes()) && proto.typedb.protocol.QueryManager.Define.Res.toObject(includeInstance, f),
    undefineRes: (f = msg.getUndefineRes()) && proto.typedb.protocol.QueryManager.Undefine.Res.toObject(includeInstance, f),
    matchAggregateRes: (f = msg.getMatchAggregateRes()) && proto.typedb.protocol.QueryManager.MatchAggregate.Res.toObject(includeInstance, f),
    deleteRes: (f = msg.getDeleteRes()) && proto.typedb.protocol.QueryManager.Delete.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Res}
 */
proto.typedb.protocol.QueryManager.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Res;
  return proto.typedb.protocol.QueryManager.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Res}
 */
proto.typedb.protocol.QueryManager.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.QueryManager.Define.Res;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Define.Res.deserializeBinaryFromReader);
      msg.setDefineRes(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.QueryManager.Undefine.Res;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Undefine.Res.deserializeBinaryFromReader);
      msg.setUndefineRes(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.QueryManager.MatchAggregate.Res;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchAggregate.Res.deserializeBinaryFromReader);
      msg.setMatchAggregateRes(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.QueryManager.Delete.Res;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Delete.Res.deserializeBinaryFromReader);
      msg.setDeleteRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefineRes();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.QueryManager.Define.Res.serializeBinaryToWriter
    );
  }
  f = message.getUndefineRes();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.QueryManager.Undefine.Res.serializeBinaryToWriter
    );
  }
  f = message.getMatchAggregateRes();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.QueryManager.MatchAggregate.Res.serializeBinaryToWriter
    );
  }
  f = message.getDeleteRes();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.QueryManager.Delete.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Define.Res define_res = 100;
 * @return {?proto.typedb.protocol.QueryManager.Define.Res}
 */
proto.typedb.protocol.QueryManager.Res.prototype.getDefineRes = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Define.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Define.Res, 100));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Define.Res|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
*/
proto.typedb.protocol.QueryManager.Res.prototype.setDefineRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.QueryManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
 */
proto.typedb.protocol.QueryManager.Res.prototype.clearDefineRes = function() {
  return this.setDefineRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Res.prototype.hasDefineRes = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional Undefine.Res undefine_res = 101;
 * @return {?proto.typedb.protocol.QueryManager.Undefine.Res}
 */
proto.typedb.protocol.QueryManager.Res.prototype.getUndefineRes = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Undefine.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Undefine.Res, 101));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Undefine.Res|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
*/
proto.typedb.protocol.QueryManager.Res.prototype.setUndefineRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.QueryManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
 */
proto.typedb.protocol.QueryManager.Res.prototype.clearUndefineRes = function() {
  return this.setUndefineRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Res.prototype.hasUndefineRes = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional MatchAggregate.Res match_aggregate_res = 102;
 * @return {?proto.typedb.protocol.QueryManager.MatchAggregate.Res}
 */
proto.typedb.protocol.QueryManager.Res.prototype.getMatchAggregateRes = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchAggregate.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchAggregate.Res, 102));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchAggregate.Res|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
*/
proto.typedb.protocol.QueryManager.Res.prototype.setMatchAggregateRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.QueryManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
 */
proto.typedb.protocol.QueryManager.Res.prototype.clearMatchAggregateRes = function() {
  return this.setMatchAggregateRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Res.prototype.hasMatchAggregateRes = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional Delete.Res delete_res = 104;
 * @return {?proto.typedb.protocol.QueryManager.Delete.Res}
 */
proto.typedb.protocol.QueryManager.Res.prototype.getDeleteRes = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Delete.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Delete.Res, 104));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Delete.Res|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
*/
proto.typedb.protocol.QueryManager.Res.prototype.setDeleteRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.QueryManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.Res} returns this
 */
proto.typedb.protocol.QueryManager.Res.prototype.clearDeleteRes = function() {
  return this.setDeleteRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.Res.prototype.hasDeleteRes = function() {
  return jspb.Message.getField(this, 104) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.QueryManager.ResPart.oneofGroups_ = [[100,101,102,103,104,105]];

/**
 * @enum {number}
 */
proto.typedb.protocol.QueryManager.ResPart.ResCase = {
  RES_NOT_SET: 0,
  MATCH_RES_PART: 100,
  MATCH_GROUP_RES_PART: 101,
  MATCH_GROUP_AGGREGATE_RES_PART: 102,
  INSERT_RES_PART: 103,
  UPDATE_RES_PART: 104,
  EXPLAIN_RES_PART: 105
};

/**
 * @return {proto.typedb.protocol.QueryManager.ResPart.ResCase}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.QueryManager.ResPart.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchResPart: (f = msg.getMatchResPart()) && proto.typedb.protocol.QueryManager.Match.ResPart.toObject(includeInstance, f),
    matchGroupResPart: (f = msg.getMatchGroupResPart()) && proto.typedb.protocol.QueryManager.MatchGroup.ResPart.toObject(includeInstance, f),
    matchGroupAggregateResPart: (f = msg.getMatchGroupAggregateResPart()) && proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.toObject(includeInstance, f),
    insertResPart: (f = msg.getInsertResPart()) && proto.typedb.protocol.QueryManager.Insert.ResPart.toObject(includeInstance, f),
    updateResPart: (f = msg.getUpdateResPart()) && proto.typedb.protocol.QueryManager.Update.ResPart.toObject(includeInstance, f),
    explainResPart: (f = msg.getExplainResPart()) && proto.typedb.protocol.QueryManager.Explain.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.ResPart;
  return proto.typedb.protocol.QueryManager.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.QueryManager.Match.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Match.ResPart.deserializeBinaryFromReader);
      msg.setMatchResPart(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.QueryManager.MatchGroup.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchGroup.ResPart.deserializeBinaryFromReader);
      msg.setMatchGroupResPart(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.deserializeBinaryFromReader);
      msg.setMatchGroupAggregateResPart(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.QueryManager.Insert.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Insert.ResPart.deserializeBinaryFromReader);
      msg.setInsertResPart(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.QueryManager.Update.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Update.ResPart.deserializeBinaryFromReader);
      msg.setUpdateResPart(value);
      break;
    case 105:
      var value = new proto.typedb.protocol.QueryManager.Explain.ResPart;
      reader.readMessage(value,proto.typedb.protocol.QueryManager.Explain.ResPart.deserializeBinaryFromReader);
      msg.setExplainResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchResPart();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.QueryManager.Match.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getMatchGroupResPart();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.QueryManager.MatchGroup.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getMatchGroupAggregateResPart();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getInsertResPart();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.QueryManager.Insert.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getUpdateResPart();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.QueryManager.Update.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getExplainResPart();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.typedb.protocol.QueryManager.Explain.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional Match.ResPart match_res_part = 100;
 * @return {?proto.typedb.protocol.QueryManager.Match.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getMatchResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Match.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Match.ResPart, 100));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Match.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setMatchResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearMatchResPart = function() {
  return this.setMatchResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasMatchResPart = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional MatchGroup.ResPart match_group_res_part = 101;
 * @return {?proto.typedb.protocol.QueryManager.MatchGroup.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getMatchGroupResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchGroup.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchGroup.ResPart, 101));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchGroup.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setMatchGroupResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearMatchGroupResPart = function() {
  return this.setMatchGroupResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasMatchGroupResPart = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional MatchGroupAggregate.ResPart match_group_aggregate_res_part = 102;
 * @return {?proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getMatchGroupAggregateResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart, 102));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setMatchGroupAggregateResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearMatchGroupAggregateResPart = function() {
  return this.setMatchGroupAggregateResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasMatchGroupAggregateResPart = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional Insert.ResPart insert_res_part = 103;
 * @return {?proto.typedb.protocol.QueryManager.Insert.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getInsertResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Insert.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Insert.ResPart, 103));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Insert.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setInsertResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearInsertResPart = function() {
  return this.setInsertResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasInsertResPart = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional Update.ResPart update_res_part = 104;
 * @return {?proto.typedb.protocol.QueryManager.Update.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getUpdateResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Update.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Update.ResPart, 104));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Update.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setUpdateResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearUpdateResPart = function() {
  return this.setUpdateResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasUpdateResPart = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional Explain.ResPart explain_res_part = 105;
 * @return {?proto.typedb.protocol.QueryManager.Explain.ResPart}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.getExplainResPart = function() {
  return /** @type{?proto.typedb.protocol.QueryManager.Explain.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.QueryManager.Explain.ResPart, 105));
};


/**
 * @param {?proto.typedb.protocol.QueryManager.Explain.ResPart|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.ResPart.prototype.setExplainResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.typedb.protocol.QueryManager.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.clearExplainResPart = function() {
  return this.setExplainResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.ResPart.prototype.hasExplainResPart = function() {
  return jspb.Message.getField(this, 105) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Match.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Match.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Match} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Match}
 */
proto.typedb.protocol.QueryManager.Match.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Match;
  return proto.typedb.protocol.QueryManager.Match.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Match} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Match}
 */
proto.typedb.protocol.QueryManager.Match.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Match.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Match.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Match} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Match.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Match.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Match.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Match.Req}
 */
proto.typedb.protocol.QueryManager.Match.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Match.Req;
  return proto.typedb.protocol.QueryManager.Match.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Match.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Match.Req}
 */
proto.typedb.protocol.QueryManager.Match.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Match.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Match.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Match.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Match.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Match.Req} returns this
 */
proto.typedb.protocol.QueryManager.Match.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.Match.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Match.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Match.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    common_answer_pb.ConceptMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Match.ResPart}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Match.ResPart;
  return proto.typedb.protocol.QueryManager.Match.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Match.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Match.ResPart}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.ConceptMap;
      reader.readMessage(value,common_answer_pb.ConceptMap.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Match.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Match.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Match.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_answer_pb.ConceptMap.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptMap answers = 1;
 * @return {!Array<!proto.typedb.protocol.ConceptMap>}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ConceptMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_answer_pb.ConceptMap, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.ConceptMap>} value
 * @return {!proto.typedb.protocol.QueryManager.Match.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.ConceptMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.ConceptMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.Match.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.Match.ResPart.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchAggregate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchAggregate;
  return proto.typedb.protocol.QueryManager.MatchAggregate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchAggregate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchAggregate.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Req}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchAggregate.Req;
  return proto.typedb.protocol.QueryManager.MatchAggregate.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Req}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchAggregate.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Req} returns this
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchAggregate.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: (f = msg.getAnswer()) && common_answer_pb.Numeric.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Res}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchAggregate.Res;
  return proto.typedb.protocol.QueryManager.MatchAggregate.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Res}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.Numeric;
      reader.readMessage(value,common_answer_pb.Numeric.deserializeBinaryFromReader);
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchAggregate.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchAggregate.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_answer_pb.Numeric.serializeBinaryToWriter
    );
  }
};


/**
 * optional Numeric answer = 1;
 * @return {?proto.typedb.protocol.Numeric}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.getAnswer = function() {
  return /** @type{?proto.typedb.protocol.Numeric} */ (
    jspb.Message.getWrapperField(this, common_answer_pb.Numeric, 1));
};


/**
 * @param {?proto.typedb.protocol.Numeric|undefined} value
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Res} returns this
*/
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.setAnswer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.QueryManager.MatchAggregate.Res} returns this
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.clearAnswer = function() {
  return this.setAnswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.QueryManager.MatchAggregate.Res.prototype.hasAnswer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup}
 */
proto.typedb.protocol.QueryManager.MatchGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroup;
  return proto.typedb.protocol.QueryManager.MatchGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup}
 */
proto.typedb.protocol.QueryManager.MatchGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroup.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.Req}
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroup.Req;
  return proto.typedb.protocol.QueryManager.MatchGroup.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.Req}
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroup.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.Req} returns this
 */
proto.typedb.protocol.QueryManager.MatchGroup.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroup.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    common_answer_pb.ConceptMapGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroup.ResPart;
  return proto.typedb.protocol.QueryManager.MatchGroup.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.ConceptMapGroup;
      reader.readMessage(value,common_answer_pb.ConceptMapGroup.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroup.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_answer_pb.ConceptMapGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptMapGroup answers = 1;
 * @return {!Array<!proto.typedb.protocol.ConceptMapGroup>}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ConceptMapGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_answer_pb.ConceptMapGroup, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.ConceptMapGroup>} value
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.ConceptMapGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ConceptMapGroup}
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.ConceptMapGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroup.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.MatchGroup.ResPart.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroupAggregate;
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req;
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req} returns this
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    common_answer_pb.NumericGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart;
  return proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.NumericGroup;
      reader.readMessage(value,common_answer_pb.NumericGroup.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_answer_pb.NumericGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NumericGroup answers = 1;
 * @return {!Array<!proto.typedb.protocol.NumericGroup>}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.NumericGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_answer_pb.NumericGroup, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.NumericGroup>} value
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.NumericGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.NumericGroup}
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.NumericGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.MatchGroupAggregate.ResPart.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Explain.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Explain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Explain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Explain}
 */
proto.typedb.protocol.QueryManager.Explain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Explain;
  return proto.typedb.protocol.QueryManager.Explain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Explain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Explain}
 */
proto.typedb.protocol.QueryManager.Explain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Explain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Explain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Explain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Explain.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Explain.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Explain.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    explainableId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Explain.Req}
 */
proto.typedb.protocol.QueryManager.Explain.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Explain.Req;
  return proto.typedb.protocol.QueryManager.Explain.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Explain.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Explain.Req}
 */
proto.typedb.protocol.QueryManager.Explain.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExplainableId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Explain.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Explain.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Explain.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExplainableId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 explainable_id = 1;
 * @return {number}
 */
proto.typedb.protocol.QueryManager.Explain.Req.prototype.getExplainableId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.QueryManager.Explain.Req} returns this
 */
proto.typedb.protocol.QueryManager.Explain.Req.prototype.setExplainableId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Explain.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Explain.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    explanationsList: jspb.Message.toObjectList(msg.getExplanationsList(),
    common_logic_pb.Explanation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Explain.ResPart}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Explain.ResPart;
  return proto.typedb.protocol.QueryManager.Explain.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Explain.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Explain.ResPart}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_logic_pb.Explanation;
      reader.readMessage(value,common_logic_pb.Explanation.deserializeBinaryFromReader);
      msg.addExplanations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Explain.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Explain.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExplanationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_logic_pb.Explanation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Explanation explanations = 1;
 * @return {!Array<!proto.typedb.protocol.Explanation>}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.getExplanationsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Explanation>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_logic_pb.Explanation, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Explanation>} value
 * @return {!proto.typedb.protocol.QueryManager.Explain.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.setExplanationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Explanation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Explanation}
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.addExplanations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Explanation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.Explain.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.Explain.ResPart.prototype.clearExplanationsList = function() {
  return this.setExplanationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Insert.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Insert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Insert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Insert}
 */
proto.typedb.protocol.QueryManager.Insert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Insert;
  return proto.typedb.protocol.QueryManager.Insert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Insert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Insert}
 */
proto.typedb.protocol.QueryManager.Insert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Insert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Insert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Insert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Insert.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Insert.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Insert.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Insert.Req}
 */
proto.typedb.protocol.QueryManager.Insert.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Insert.Req;
  return proto.typedb.protocol.QueryManager.Insert.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Insert.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Insert.Req}
 */
proto.typedb.protocol.QueryManager.Insert.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Insert.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Insert.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Insert.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Insert.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Insert.Req} returns this
 */
proto.typedb.protocol.QueryManager.Insert.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Insert.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Insert.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    common_answer_pb.ConceptMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Insert.ResPart}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Insert.ResPart;
  return proto.typedb.protocol.QueryManager.Insert.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Insert.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Insert.ResPart}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.ConceptMap;
      reader.readMessage(value,common_answer_pb.ConceptMap.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Insert.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Insert.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_answer_pb.ConceptMap.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptMap answers = 1;
 * @return {!Array<!proto.typedb.protocol.ConceptMap>}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ConceptMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_answer_pb.ConceptMap, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.ConceptMap>} value
 * @return {!proto.typedb.protocol.QueryManager.Insert.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.ConceptMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.ConceptMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.Insert.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.Insert.ResPart.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Delete}
 */
proto.typedb.protocol.QueryManager.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Delete;
  return proto.typedb.protocol.QueryManager.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Delete}
 */
proto.typedb.protocol.QueryManager.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Delete.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Delete.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Delete.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Delete.Req}
 */
proto.typedb.protocol.QueryManager.Delete.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Delete.Req;
  return proto.typedb.protocol.QueryManager.Delete.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Delete.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Delete.Req}
 */
proto.typedb.protocol.QueryManager.Delete.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Delete.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Delete.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Delete.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Delete.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Delete.Req} returns this
 */
proto.typedb.protocol.QueryManager.Delete.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Delete.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Delete.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Delete.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Delete.Res}
 */
proto.typedb.protocol.QueryManager.Delete.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Delete.Res;
  return proto.typedb.protocol.QueryManager.Delete.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Delete.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Delete.Res}
 */
proto.typedb.protocol.QueryManager.Delete.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Delete.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Delete.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Delete.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Delete.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Update}
 */
proto.typedb.protocol.QueryManager.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Update;
  return proto.typedb.protocol.QueryManager.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Update}
 */
proto.typedb.protocol.QueryManager.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Update.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Update.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Update.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Update.Req}
 */
proto.typedb.protocol.QueryManager.Update.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Update.Req;
  return proto.typedb.protocol.QueryManager.Update.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Update.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Update.Req}
 */
proto.typedb.protocol.QueryManager.Update.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Update.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Update.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Update.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Update.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Update.Req} returns this
 */
proto.typedb.protocol.QueryManager.Update.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.QueryManager.Update.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Update.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Update.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    common_answer_pb.ConceptMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Update.ResPart}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Update.ResPart;
  return proto.typedb.protocol.QueryManager.Update.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Update.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Update.ResPart}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_answer_pb.ConceptMap;
      reader.readMessage(value,common_answer_pb.ConceptMap.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Update.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Update.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Update.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      common_answer_pb.ConceptMap.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptMap answers = 1;
 * @return {!Array<!proto.typedb.protocol.ConceptMap>}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ConceptMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_answer_pb.ConceptMap, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.ConceptMap>} value
 * @return {!proto.typedb.protocol.QueryManager.Update.ResPart} returns this
*/
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.ConceptMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.ConceptMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.QueryManager.Update.ResPart} returns this
 */
proto.typedb.protocol.QueryManager.Update.ResPart.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Define.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Define.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Define} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Define}
 */
proto.typedb.protocol.QueryManager.Define.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Define;
  return proto.typedb.protocol.QueryManager.Define.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Define} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Define}
 */
proto.typedb.protocol.QueryManager.Define.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Define.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Define.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Define} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Define.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Define.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Define.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Define.Req}
 */
proto.typedb.protocol.QueryManager.Define.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Define.Req;
  return proto.typedb.protocol.QueryManager.Define.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Define.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Define.Req}
 */
proto.typedb.protocol.QueryManager.Define.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Define.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Define.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Define.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Define.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Define.Req} returns this
 */
proto.typedb.protocol.QueryManager.Define.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Define.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Define.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Define.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Define.Res}
 */
proto.typedb.protocol.QueryManager.Define.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Define.Res;
  return proto.typedb.protocol.QueryManager.Define.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Define.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Define.Res}
 */
proto.typedb.protocol.QueryManager.Define.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Define.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Define.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Define.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Define.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Undefine.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Undefine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Undefine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Undefine}
 */
proto.typedb.protocol.QueryManager.Undefine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Undefine;
  return proto.typedb.protocol.QueryManager.Undefine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Undefine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Undefine}
 */
proto.typedb.protocol.QueryManager.Undefine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Undefine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Undefine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Undefine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Undefine.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Undefine.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Undefine.Req}
 */
proto.typedb.protocol.QueryManager.Undefine.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Undefine.Req;
  return proto.typedb.protocol.QueryManager.Undefine.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Undefine.Req}
 */
proto.typedb.protocol.QueryManager.Undefine.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Undefine.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Undefine.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.typedb.protocol.QueryManager.Undefine.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.QueryManager.Undefine.Req} returns this
 */
proto.typedb.protocol.QueryManager.Undefine.Req.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.QueryManager.Undefine.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.QueryManager.Undefine.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.QueryManager.Undefine.Res}
 */
proto.typedb.protocol.QueryManager.Undefine.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.QueryManager.Undefine.Res;
  return proto.typedb.protocol.QueryManager.Undefine.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.QueryManager.Undefine.Res}
 */
proto.typedb.protocol.QueryManager.Undefine.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.QueryManager.Undefine.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.QueryManager.Undefine.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.QueryManager.Undefine.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.QueryManager.Undefine.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.typedb.protocol);
