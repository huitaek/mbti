// source: common/answer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_concept_pb = require('../common/concept_pb.js');
goog.object.extend(proto, common_concept_pb);
goog.exportSymbol('proto.typedb.protocol.ConceptMap', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptMapGroup', null, global);
goog.exportSymbol('proto.typedb.protocol.Explainable', null, global);
goog.exportSymbol('proto.typedb.protocol.Explainables', null, global);
goog.exportSymbol('proto.typedb.protocol.Explainables.Owned', null, global);
goog.exportSymbol('proto.typedb.protocol.Numeric', null, global);
goog.exportSymbol('proto.typedb.protocol.Numeric.ValueCase', null, global);
goog.exportSymbol('proto.typedb.protocol.NumericGroup', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptMap.displayName = 'proto.typedb.protocol.ConceptMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Explainables = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Explainables, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Explainables.displayName = 'proto.typedb.protocol.Explainables';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Explainables.Owned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Explainables.Owned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Explainables.Owned.displayName = 'proto.typedb.protocol.Explainables.Owned';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Explainable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Explainable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Explainable.displayName = 'proto.typedb.protocol.Explainable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptMapGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ConceptMapGroup.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ConceptMapGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptMapGroup.displayName = 'proto.typedb.protocol.ConceptMapGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Numeric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Numeric.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Numeric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Numeric.displayName = 'proto.typedb.protocol.Numeric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.NumericGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.NumericGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.NumericGroup.displayName = 'proto.typedb.protocol.NumericGroup';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptMap.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapMap: (f = msg.getMapMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Concept.toObject) : [],
    explainables: (f = msg.getExplainables()) && proto.typedb.protocol.Explainables.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.ConceptMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptMap;
  return proto.typedb.protocol.ConceptMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.ConceptMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Concept.deserializeBinaryFromReader, "", new proto.typedb.protocol.Concept());
         });
      break;
    case 2:
      var value = new proto.typedb.protocol.Explainables;
      reader.readMessage(value,proto.typedb.protocol.Explainables.deserializeBinaryFromReader);
      msg.setExplainables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Concept.serializeBinaryToWriter);
  }
  f = message.getExplainables();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Explainables.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, Concept> map = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Concept>}
 */
proto.typedb.protocol.ConceptMap.prototype.getMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Concept>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.typedb.protocol.Concept));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.ConceptMap} returns this
 */
proto.typedb.protocol.ConceptMap.prototype.clearMapMap = function() {
  this.getMapMap().clear();
  return this;};


/**
 * optional Explainables explainables = 2;
 * @return {?proto.typedb.protocol.Explainables}
 */
proto.typedb.protocol.ConceptMap.prototype.getExplainables = function() {
  return /** @type{?proto.typedb.protocol.Explainables} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Explainables, 2));
};


/**
 * @param {?proto.typedb.protocol.Explainables|undefined} value
 * @return {!proto.typedb.protocol.ConceptMap} returns this
*/
proto.typedb.protocol.ConceptMap.prototype.setExplainables = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptMap} returns this
 */
proto.typedb.protocol.ConceptMap.prototype.clearExplainables = function() {
  return this.setExplainables(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptMap.prototype.hasExplainables = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Explainables.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Explainables.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Explainables} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainables.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationsMap: (f = msg.getRelationsMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Explainable.toObject) : [],
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Explainable.toObject) : [],
    ownershipsMap: (f = msg.getOwnershipsMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Explainables.Owned.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Explainables}
 */
proto.typedb.protocol.Explainables.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Explainables;
  return proto.typedb.protocol.Explainables.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Explainables} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Explainables}
 */
proto.typedb.protocol.Explainables.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getRelationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Explainable.deserializeBinaryFromReader, "", new proto.typedb.protocol.Explainable());
         });
      break;
    case 2:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Explainable.deserializeBinaryFromReader, "", new proto.typedb.protocol.Explainable());
         });
      break;
    case 3:
      var value = msg.getOwnershipsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Explainables.Owned.deserializeBinaryFromReader, "", new proto.typedb.protocol.Explainables.Owned());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Explainables.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Explainables.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Explainables} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainables.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Explainable.serializeBinaryToWriter);
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Explainable.serializeBinaryToWriter);
  }
  f = message.getOwnershipsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Explainables.Owned.serializeBinaryToWriter);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Explainables.Owned.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Explainables.Owned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Explainables.Owned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainables.Owned.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownedMap: (f = msg.getOwnedMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Explainable.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Explainables.Owned}
 */
proto.typedb.protocol.Explainables.Owned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Explainables.Owned;
  return proto.typedb.protocol.Explainables.Owned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Explainables.Owned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Explainables.Owned}
 */
proto.typedb.protocol.Explainables.Owned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getOwnedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Explainable.deserializeBinaryFromReader, "", new proto.typedb.protocol.Explainable());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Explainables.Owned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Explainables.Owned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Explainables.Owned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainables.Owned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Explainable.serializeBinaryToWriter);
  }
};


/**
 * map<string, Explainable> owned = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Explainable>}
 */
proto.typedb.protocol.Explainables.Owned.prototype.getOwnedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Explainable>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.typedb.protocol.Explainable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Explainables.Owned} returns this
 */
proto.typedb.protocol.Explainables.Owned.prototype.clearOwnedMap = function() {
  this.getOwnedMap().clear();
  return this;};


/**
 * map<string, Explainable> relations = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Explainable>}
 */
proto.typedb.protocol.Explainables.prototype.getRelationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Explainable>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.typedb.protocol.Explainable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Explainables} returns this
 */
proto.typedb.protocol.Explainables.prototype.clearRelationsMap = function() {
  this.getRelationsMap().clear();
  return this;};


/**
 * map<string, Explainable> attributes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Explainable>}
 */
proto.typedb.protocol.Explainables.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Explainable>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.typedb.protocol.Explainable));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Explainables} returns this
 */
proto.typedb.protocol.Explainables.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
  return this;};


/**
 * map<string, Owned> ownerships = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Explainables.Owned>}
 */
proto.typedb.protocol.Explainables.prototype.getOwnershipsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Explainables.Owned>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.typedb.protocol.Explainables.Owned));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Explainables} returns this
 */
proto.typedb.protocol.Explainables.prototype.clearOwnershipsMap = function() {
  this.getOwnershipsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Explainable.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Explainable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Explainable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainable.toObject = function(includeInstance, msg) {
  var f, obj = {
    conjunction: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Explainable}
 */
proto.typedb.protocol.Explainable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Explainable;
  return proto.typedb.protocol.Explainable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Explainable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Explainable}
 */
proto.typedb.protocol.Explainable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConjunction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Explainable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Explainable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Explainable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explainable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConjunction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string conjunction = 1;
 * @return {string}
 */
proto.typedb.protocol.Explainable.prototype.getConjunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Explainable} returns this
 */
proto.typedb.protocol.Explainable.prototype.setConjunction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.typedb.protocol.Explainable.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Explainable} returns this
 */
proto.typedb.protocol.Explainable.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ConceptMapGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptMapGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptMapGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptMapGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && common_concept_pb.Concept.toObject(includeInstance, f),
    conceptMapsList: jspb.Message.toObjectList(msg.getConceptMapsList(),
    proto.typedb.protocol.ConceptMap.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptMapGroup}
 */
proto.typedb.protocol.ConceptMapGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptMapGroup;
  return proto.typedb.protocol.ConceptMapGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptMapGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptMapGroup}
 */
proto.typedb.protocol.ConceptMapGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_concept_pb.Concept;
      reader.readMessage(value,common_concept_pb.Concept.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.ConceptMap;
      reader.readMessage(value,proto.typedb.protocol.ConceptMap.deserializeBinaryFromReader);
      msg.addConceptMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptMapGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptMapGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptMapGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_concept_pb.Concept.serializeBinaryToWriter
    );
  }
  f = message.getConceptMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.typedb.protocol.ConceptMap.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept owner = 1;
 * @return {?proto.typedb.protocol.Concept}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.getOwner = function() {
  return /** @type{?proto.typedb.protocol.Concept} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Concept, 1));
};


/**
 * @param {?proto.typedb.protocol.Concept|undefined} value
 * @return {!proto.typedb.protocol.ConceptMapGroup} returns this
*/
proto.typedb.protocol.ConceptMapGroup.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptMapGroup} returns this
 */
proto.typedb.protocol.ConceptMapGroup.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ConceptMap concept_maps = 2;
 * @return {!Array<!proto.typedb.protocol.ConceptMap>}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.getConceptMapsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.ConceptMap>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.ConceptMap, 2));
};


/**
 * @param {!Array<!proto.typedb.protocol.ConceptMap>} value
 * @return {!proto.typedb.protocol.ConceptMapGroup} returns this
*/
proto.typedb.protocol.ConceptMapGroup.prototype.setConceptMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.typedb.protocol.ConceptMap=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.ConceptMapGroup.prototype.addConceptMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.typedb.protocol.ConceptMap, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ConceptMapGroup} returns this
 */
proto.typedb.protocol.ConceptMapGroup.prototype.clearConceptMapsList = function() {
  return this.setConceptMapsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Numeric.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Numeric.ValueCase = {
  VALUE_NOT_SET: 0,
  LONG_VALUE: 1,
  DOUBLE_VALUE: 2,
  NAN: 3
};

/**
 * @return {proto.typedb.protocol.Numeric.ValueCase}
 */
proto.typedb.protocol.Numeric.prototype.getValueCase = function() {
  return /** @type {proto.typedb.protocol.Numeric.ValueCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Numeric.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Numeric.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Numeric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Numeric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Numeric.toObject = function(includeInstance, msg) {
  var f, obj = {
    longValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    doubleValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    nan: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Numeric}
 */
proto.typedb.protocol.Numeric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Numeric;
  return proto.typedb.protocol.Numeric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Numeric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Numeric}
 */
proto.typedb.protocol.Numeric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Numeric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Numeric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Numeric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Numeric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 long_value = 1;
 * @return {number}
 */
proto.typedb.protocol.Numeric.prototype.getLongValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.setLongValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.Numeric.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.clearLongValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.Numeric.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Numeric.prototype.hasLongValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double double_value = 2;
 * @return {number}
 */
proto.typedb.protocol.Numeric.prototype.getDoubleValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.setDoubleValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.Numeric.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.clearDoubleValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.Numeric.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Numeric.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool nan = 3;
 * @return {boolean}
 */
proto.typedb.protocol.Numeric.prototype.getNan = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.setNan = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.typedb.protocol.Numeric.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Numeric} returns this
 */
proto.typedb.protocol.Numeric.prototype.clearNan = function() {
  return jspb.Message.setOneofField(this, 3, proto.typedb.protocol.Numeric.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Numeric.prototype.hasNan = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.NumericGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.NumericGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.NumericGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.NumericGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && common_concept_pb.Concept.toObject(includeInstance, f),
    number: (f = msg.getNumber()) && proto.typedb.protocol.Numeric.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.NumericGroup}
 */
proto.typedb.protocol.NumericGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.NumericGroup;
  return proto.typedb.protocol.NumericGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.NumericGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.NumericGroup}
 */
proto.typedb.protocol.NumericGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_concept_pb.Concept;
      reader.readMessage(value,common_concept_pb.Concept.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Numeric;
      reader.readMessage(value,proto.typedb.protocol.Numeric.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.NumericGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.NumericGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.NumericGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.NumericGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_concept_pb.Concept.serializeBinaryToWriter
    );
  }
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Numeric.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept owner = 1;
 * @return {?proto.typedb.protocol.Concept}
 */
proto.typedb.protocol.NumericGroup.prototype.getOwner = function() {
  return /** @type{?proto.typedb.protocol.Concept} */ (
    jspb.Message.getWrapperField(this, common_concept_pb.Concept, 1));
};


/**
 * @param {?proto.typedb.protocol.Concept|undefined} value
 * @return {!proto.typedb.protocol.NumericGroup} returns this
*/
proto.typedb.protocol.NumericGroup.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.NumericGroup} returns this
 */
proto.typedb.protocol.NumericGroup.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.NumericGroup.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Numeric number = 2;
 * @return {?proto.typedb.protocol.Numeric}
 */
proto.typedb.protocol.NumericGroup.prototype.getNumber = function() {
  return /** @type{?proto.typedb.protocol.Numeric} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Numeric, 2));
};


/**
 * @param {?proto.typedb.protocol.Numeric|undefined} value
 * @return {!proto.typedb.protocol.NumericGroup} returns this
*/
proto.typedb.protocol.NumericGroup.prototype.setNumber = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.NumericGroup} returns this
 */
proto.typedb.protocol.NumericGroup.prototype.clearNumber = function() {
  return this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.NumericGroup.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.typedb.protocol);
