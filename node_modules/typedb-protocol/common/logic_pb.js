// source: common/logic.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_answer_pb = require('../common/answer_pb.js');
goog.object.extend(proto, common_answer_pb);
goog.exportSymbol('proto.typedb.protocol.Explanation', null, global);
goog.exportSymbol('proto.typedb.protocol.Explanation.VarList', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRule', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRule.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRule.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRule.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRules', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRules.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.GetRules.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.PutRule', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.PutRule.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.PutRule.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.LogicManager.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Delete', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Delete.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Delete.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.SetLabel', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.SetLabel.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Rule.SetLabel.Res', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.displayName = 'proto.typedb.protocol.LogicManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.LogicManager.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.LogicManager.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.Req.displayName = 'proto.typedb.protocol.LogicManager.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.LogicManager.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.LogicManager.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.Res.displayName = 'proto.typedb.protocol.LogicManager.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.ResPart.displayName = 'proto.typedb.protocol.LogicManager.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRule.displayName = 'proto.typedb.protocol.LogicManager.GetRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRule.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRule.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRule.Req.displayName = 'proto.typedb.protocol.LogicManager.GetRule.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRule.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.LogicManager.GetRule.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRule.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRule.Res.displayName = 'proto.typedb.protocol.LogicManager.GetRule.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.PutRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.PutRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.PutRule.displayName = 'proto.typedb.protocol.LogicManager.PutRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.PutRule.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.PutRule.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.PutRule.Req.displayName = 'proto.typedb.protocol.LogicManager.PutRule.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.PutRule.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.PutRule.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.PutRule.Res.displayName = 'proto.typedb.protocol.LogicManager.PutRule.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRules.displayName = 'proto.typedb.protocol.LogicManager.GetRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRules.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRules.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRules.Req.displayName = 'proto.typedb.protocol.LogicManager.GetRules.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.LogicManager.GetRules.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.LogicManager.GetRules.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.LogicManager.GetRules.ResPart.displayName = 'proto.typedb.protocol.LogicManager.GetRules.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.displayName = 'proto.typedb.protocol.Rule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Rule.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Rule.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.Req.displayName = 'proto.typedb.protocol.Rule.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Rule.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Rule.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.Res.displayName = 'proto.typedb.protocol.Rule.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.Delete.displayName = 'proto.typedb.protocol.Rule.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.Delete.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.Delete.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.Delete.Req.displayName = 'proto.typedb.protocol.Rule.Delete.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.Delete.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.Delete.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.Delete.Res.displayName = 'proto.typedb.protocol.Rule.Delete.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.SetLabel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.SetLabel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.SetLabel.displayName = 'proto.typedb.protocol.Rule.SetLabel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.SetLabel.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.SetLabel.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.SetLabel.Req.displayName = 'proto.typedb.protocol.Rule.SetLabel.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Rule.SetLabel.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Rule.SetLabel.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Rule.SetLabel.Res.displayName = 'proto.typedb.protocol.Rule.SetLabel.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Explanation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Explanation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Explanation.displayName = 'proto.typedb.protocol.Explanation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Explanation.VarList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Explanation.VarList.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Explanation.VarList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Explanation.VarList.displayName = 'proto.typedb.protocol.Explanation.VarList';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager}
 */
proto.typedb.protocol.LogicManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager;
  return proto.typedb.protocol.LogicManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager}
 */
proto.typedb.protocol.LogicManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.LogicManager.Req.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.typedb.protocol.LogicManager.Req.ReqCase = {
  REQ_NOT_SET: 0,
  GET_RULE_REQ: 1,
  PUT_RULE_REQ: 2,
  GET_RULES_REQ: 3
};

/**
 * @return {proto.typedb.protocol.LogicManager.Req.ReqCase}
 */
proto.typedb.protocol.LogicManager.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.LogicManager.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.LogicManager.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    getRuleReq: (f = msg.getGetRuleReq()) && proto.typedb.protocol.LogicManager.GetRule.Req.toObject(includeInstance, f),
    putRuleReq: (f = msg.getPutRuleReq()) && proto.typedb.protocol.LogicManager.PutRule.Req.toObject(includeInstance, f),
    getRulesReq: (f = msg.getGetRulesReq()) && proto.typedb.protocol.LogicManager.GetRules.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.Req}
 */
proto.typedb.protocol.LogicManager.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.Req;
  return proto.typedb.protocol.LogicManager.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.Req}
 */
proto.typedb.protocol.LogicManager.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.LogicManager.GetRule.Req;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.GetRule.Req.deserializeBinaryFromReader);
      msg.setGetRuleReq(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.LogicManager.PutRule.Req;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.PutRule.Req.deserializeBinaryFromReader);
      msg.setPutRuleReq(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.LogicManager.GetRules.Req;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.GetRules.Req.deserializeBinaryFromReader);
      msg.setGetRulesReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetRuleReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.LogicManager.GetRule.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutRuleReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.LogicManager.PutRule.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetRulesReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.LogicManager.GetRules.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetRule.Req get_rule_req = 1;
 * @return {?proto.typedb.protocol.LogicManager.GetRule.Req}
 */
proto.typedb.protocol.LogicManager.Req.prototype.getGetRuleReq = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.GetRule.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.GetRule.Req, 1));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.GetRule.Req|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
*/
proto.typedb.protocol.LogicManager.Req.prototype.setGetRuleReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.LogicManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
 */
proto.typedb.protocol.LogicManager.Req.prototype.clearGetRuleReq = function() {
  return this.setGetRuleReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.Req.prototype.hasGetRuleReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PutRule.Req put_rule_req = 2;
 * @return {?proto.typedb.protocol.LogicManager.PutRule.Req}
 */
proto.typedb.protocol.LogicManager.Req.prototype.getPutRuleReq = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.PutRule.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.PutRule.Req, 2));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.PutRule.Req|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
*/
proto.typedb.protocol.LogicManager.Req.prototype.setPutRuleReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.LogicManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
 */
proto.typedb.protocol.LogicManager.Req.prototype.clearPutRuleReq = function() {
  return this.setPutRuleReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.Req.prototype.hasPutRuleReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetRules.Req get_rules_req = 3;
 * @return {?proto.typedb.protocol.LogicManager.GetRules.Req}
 */
proto.typedb.protocol.LogicManager.Req.prototype.getGetRulesReq = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.GetRules.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.GetRules.Req, 3));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.GetRules.Req|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
*/
proto.typedb.protocol.LogicManager.Req.prototype.setGetRulesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.LogicManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.Req} returns this
 */
proto.typedb.protocol.LogicManager.Req.prototype.clearGetRulesReq = function() {
  return this.setGetRulesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.Req.prototype.hasGetRulesReq = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.LogicManager.Res.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.typedb.protocol.LogicManager.Res.ResCase = {
  RES_NOT_SET: 0,
  GET_RULE_RES: 1,
  PUT_RULE_RES: 2
};

/**
 * @return {proto.typedb.protocol.LogicManager.Res.ResCase}
 */
proto.typedb.protocol.LogicManager.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.LogicManager.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.LogicManager.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    getRuleRes: (f = msg.getGetRuleRes()) && proto.typedb.protocol.LogicManager.GetRule.Res.toObject(includeInstance, f),
    putRuleRes: (f = msg.getPutRuleRes()) && proto.typedb.protocol.LogicManager.PutRule.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.Res}
 */
proto.typedb.protocol.LogicManager.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.Res;
  return proto.typedb.protocol.LogicManager.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.Res}
 */
proto.typedb.protocol.LogicManager.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.LogicManager.GetRule.Res;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.GetRule.Res.deserializeBinaryFromReader);
      msg.setGetRuleRes(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.LogicManager.PutRule.Res;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.PutRule.Res.deserializeBinaryFromReader);
      msg.setPutRuleRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetRuleRes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.LogicManager.GetRule.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutRuleRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.LogicManager.PutRule.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetRule.Res get_rule_res = 1;
 * @return {?proto.typedb.protocol.LogicManager.GetRule.Res}
 */
proto.typedb.protocol.LogicManager.Res.prototype.getGetRuleRes = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.GetRule.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.GetRule.Res, 1));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.GetRule.Res|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.Res} returns this
*/
proto.typedb.protocol.LogicManager.Res.prototype.setGetRuleRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.LogicManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.Res} returns this
 */
proto.typedb.protocol.LogicManager.Res.prototype.clearGetRuleRes = function() {
  return this.setGetRuleRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.Res.prototype.hasGetRuleRes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PutRule.Res put_rule_res = 2;
 * @return {?proto.typedb.protocol.LogicManager.PutRule.Res}
 */
proto.typedb.protocol.LogicManager.Res.prototype.getPutRuleRes = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.PutRule.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.PutRule.Res, 2));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.PutRule.Res|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.Res} returns this
*/
proto.typedb.protocol.LogicManager.Res.prototype.setPutRuleRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.LogicManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.Res} returns this
 */
proto.typedb.protocol.LogicManager.Res.prototype.clearPutRuleRes = function() {
  return this.setPutRuleRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.Res.prototype.hasPutRuleRes = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    getRulesResPart: (f = msg.getGetRulesResPart()) && proto.typedb.protocol.LogicManager.GetRules.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.ResPart}
 */
proto.typedb.protocol.LogicManager.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.ResPart;
  return proto.typedb.protocol.LogicManager.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.ResPart}
 */
proto.typedb.protocol.LogicManager.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.LogicManager.GetRules.ResPart;
      reader.readMessage(value,proto.typedb.protocol.LogicManager.GetRules.ResPart.deserializeBinaryFromReader);
      msg.setGetRulesResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetRulesResPart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.LogicManager.GetRules.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetRules.ResPart get_rules_res_part = 1;
 * @return {?proto.typedb.protocol.LogicManager.GetRules.ResPart}
 */
proto.typedb.protocol.LogicManager.ResPart.prototype.getGetRulesResPart = function() {
  return /** @type{?proto.typedb.protocol.LogicManager.GetRules.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.LogicManager.GetRules.ResPart, 1));
};


/**
 * @param {?proto.typedb.protocol.LogicManager.GetRules.ResPart|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.ResPart} returns this
*/
proto.typedb.protocol.LogicManager.ResPart.prototype.setGetRulesResPart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.ResPart} returns this
 */
proto.typedb.protocol.LogicManager.ResPart.prototype.clearGetRulesResPart = function() {
  return this.setGetRulesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.ResPart.prototype.hasGetRulesResPart = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRule.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRule}
 */
proto.typedb.protocol.LogicManager.GetRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRule;
  return proto.typedb.protocol.LogicManager.GetRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRule}
 */
proto.typedb.protocol.LogicManager.GetRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRule.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRule.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Req}
 */
proto.typedb.protocol.LogicManager.GetRule.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRule.Req;
  return proto.typedb.protocol.LogicManager.GetRule.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Req}
 */
proto.typedb.protocol.LogicManager.GetRule.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRule.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRule.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.LogicManager.GetRule.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Req} returns this
 */
proto.typedb.protocol.LogicManager.GetRule.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.LogicManager.GetRule.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.ResCase = {
  RES_NOT_SET: 0,
  RULE: 1
};

/**
 * @return {proto.typedb.protocol.LogicManager.GetRule.Res.ResCase}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.LogicManager.GetRule.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.LogicManager.GetRule.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRule.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rule: (f = msg.getRule()) && proto.typedb.protocol.Rule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Res}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRule.Res;
  return proto.typedb.protocol.LogicManager.GetRule.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Res}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Rule;
      reader.readMessage(value,proto.typedb.protocol.Rule.deserializeBinaryFromReader);
      msg.setRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRule.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRule.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRule.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * optional Rule rule = 1;
 * @return {?proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.getRule = function() {
  return /** @type{?proto.typedb.protocol.Rule} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule, 1));
};


/**
 * @param {?proto.typedb.protocol.Rule|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Res} returns this
*/
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.setRule = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.LogicManager.GetRule.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.GetRule.Res} returns this
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.clearRule = function() {
  return this.setRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.GetRule.Res.prototype.hasRule = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.PutRule.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.PutRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.PutRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.PutRule}
 */
proto.typedb.protocol.LogicManager.PutRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.PutRule;
  return proto.typedb.protocol.LogicManager.PutRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.PutRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.PutRule}
 */
proto.typedb.protocol.LogicManager.PutRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.PutRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.PutRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.PutRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.PutRule.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    when: jspb.Message.getFieldWithDefault(msg, 2, ""),
    then: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Req}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.PutRule.Req;
  return proto.typedb.protocol.LogicManager.PutRule.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Req}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhen(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.PutRule.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWhen();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Req} returns this
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string when = 2;
 * @return {string}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.getWhen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Req} returns this
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.setWhen = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string then = 3;
 * @return {string}
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.getThen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Req} returns this
 */
proto.typedb.protocol.LogicManager.PutRule.Req.prototype.setThen = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.PutRule.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rule: (f = msg.getRule()) && proto.typedb.protocol.Rule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Res}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.PutRule.Res;
  return proto.typedb.protocol.LogicManager.PutRule.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Res}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Rule;
      reader.readMessage(value,proto.typedb.protocol.Rule.deserializeBinaryFromReader);
      msg.setRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.PutRule.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.PutRule.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.PutRule.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * optional Rule rule = 1;
 * @return {?proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.getRule = function() {
  return /** @type{?proto.typedb.protocol.Rule} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule, 1));
};


/**
 * @param {?proto.typedb.protocol.Rule|undefined} value
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Res} returns this
*/
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.setRule = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.LogicManager.PutRule.Res} returns this
 */
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.clearRule = function() {
  return this.setRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.LogicManager.PutRule.Res.prototype.hasRule = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRules.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRules}
 */
proto.typedb.protocol.LogicManager.GetRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRules;
  return proto.typedb.protocol.LogicManager.GetRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRules}
 */
proto.typedb.protocol.LogicManager.GetRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRules.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRules.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRules.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRules.Req}
 */
proto.typedb.protocol.LogicManager.GetRules.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRules.Req;
  return proto.typedb.protocol.LogicManager.GetRules.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRules.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRules.Req}
 */
proto.typedb.protocol.LogicManager.GetRules.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRules.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRules.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRules.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.LogicManager.GetRules.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.LogicManager.GetRules.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.typedb.protocol.Rule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.LogicManager.GetRules.ResPart}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.LogicManager.GetRules.ResPart;
  return proto.typedb.protocol.LogicManager.GetRules.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.LogicManager.GetRules.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.LogicManager.GetRules.ResPart}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Rule;
      reader.readMessage(value,proto.typedb.protocol.Rule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.LogicManager.GetRules.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.LogicManager.GetRules.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Rule rules = 1;
 * @return {!Array<!proto.typedb.protocol.Rule>}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Rule, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Rule>} value
 * @return {!proto.typedb.protocol.LogicManager.GetRules.ResPart} returns this
*/
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Rule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.LogicManager.GetRules.ResPart} returns this
 */
proto.typedb.protocol.LogicManager.GetRules.ResPart.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    when: jspb.Message.getFieldWithDefault(msg, 2, ""),
    then: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule;
  return proto.typedb.protocol.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhen(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWhen();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Rule.Req.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Rule.Req.ReqCase = {
  REQ_NOT_SET: 0,
  RULE_DELETE_REQ: 100,
  RULE_SET_LABEL_REQ: 101
};

/**
 * @return {proto.typedb.protocol.Rule.Req.ReqCase}
 */
proto.typedb.protocol.Rule.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.Rule.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Rule.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ruleDeleteReq: (f = msg.getRuleDeleteReq()) && proto.typedb.protocol.Rule.Delete.Req.toObject(includeInstance, f),
    ruleSetLabelReq: (f = msg.getRuleSetLabelReq()) && proto.typedb.protocol.Rule.SetLabel.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.Req}
 */
proto.typedb.protocol.Rule.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.Req;
  return proto.typedb.protocol.Rule.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.Req}
 */
proto.typedb.protocol.Rule.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 100:
      var value = new proto.typedb.protocol.Rule.Delete.Req;
      reader.readMessage(value,proto.typedb.protocol.Rule.Delete.Req.deserializeBinaryFromReader);
      msg.setRuleDeleteReq(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Rule.SetLabel.Req;
      reader.readMessage(value,proto.typedb.protocol.Rule.SetLabel.Req.deserializeBinaryFromReader);
      msg.setRuleSetLabelReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRuleDeleteReq();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Rule.Delete.Req.serializeBinaryToWriter
    );
  }
  f = message.getRuleSetLabelReq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Rule.SetLabel.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Rule.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Rule.Req} returns this
 */
proto.typedb.protocol.Rule.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Delete.Req rule_delete_req = 100;
 * @return {?proto.typedb.protocol.Rule.Delete.Req}
 */
proto.typedb.protocol.Rule.Req.prototype.getRuleDeleteReq = function() {
  return /** @type{?proto.typedb.protocol.Rule.Delete.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule.Delete.Req, 100));
};


/**
 * @param {?proto.typedb.protocol.Rule.Delete.Req|undefined} value
 * @return {!proto.typedb.protocol.Rule.Req} returns this
*/
proto.typedb.protocol.Rule.Req.prototype.setRuleDeleteReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Rule.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Rule.Req} returns this
 */
proto.typedb.protocol.Rule.Req.prototype.clearRuleDeleteReq = function() {
  return this.setRuleDeleteReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Rule.Req.prototype.hasRuleDeleteReq = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SetLabel.Req rule_set_label_req = 101;
 * @return {?proto.typedb.protocol.Rule.SetLabel.Req}
 */
proto.typedb.protocol.Rule.Req.prototype.getRuleSetLabelReq = function() {
  return /** @type{?proto.typedb.protocol.Rule.SetLabel.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule.SetLabel.Req, 101));
};


/**
 * @param {?proto.typedb.protocol.Rule.SetLabel.Req|undefined} value
 * @return {!proto.typedb.protocol.Rule.Req} returns this
*/
proto.typedb.protocol.Rule.Req.prototype.setRuleSetLabelReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Rule.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Rule.Req} returns this
 */
proto.typedb.protocol.Rule.Req.prototype.clearRuleSetLabelReq = function() {
  return this.setRuleSetLabelReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Rule.Req.prototype.hasRuleSetLabelReq = function() {
  return jspb.Message.getField(this, 101) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Rule.Res.oneofGroups_ = [[100,101]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Rule.Res.ResCase = {
  RES_NOT_SET: 0,
  RULE_DELETE_RES: 100,
  RULE_SET_LABEL_RES: 101
};

/**
 * @return {proto.typedb.protocol.Rule.Res.ResCase}
 */
proto.typedb.protocol.Rule.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Rule.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Rule.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    ruleDeleteRes: (f = msg.getRuleDeleteRes()) && proto.typedb.protocol.Rule.Delete.Res.toObject(includeInstance, f),
    ruleSetLabelRes: (f = msg.getRuleSetLabelRes()) && proto.typedb.protocol.Rule.SetLabel.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.Res}
 */
proto.typedb.protocol.Rule.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.Res;
  return proto.typedb.protocol.Rule.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.Res}
 */
proto.typedb.protocol.Rule.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.Rule.Delete.Res;
      reader.readMessage(value,proto.typedb.protocol.Rule.Delete.Res.deserializeBinaryFromReader);
      msg.setRuleDeleteRes(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Rule.SetLabel.Res;
      reader.readMessage(value,proto.typedb.protocol.Rule.SetLabel.Res.deserializeBinaryFromReader);
      msg.setRuleSetLabelRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRuleDeleteRes();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Rule.Delete.Res.serializeBinaryToWriter
    );
  }
  f = message.getRuleSetLabelRes();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Rule.SetLabel.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Delete.Res rule_delete_res = 100;
 * @return {?proto.typedb.protocol.Rule.Delete.Res}
 */
proto.typedb.protocol.Rule.Res.prototype.getRuleDeleteRes = function() {
  return /** @type{?proto.typedb.protocol.Rule.Delete.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule.Delete.Res, 100));
};


/**
 * @param {?proto.typedb.protocol.Rule.Delete.Res|undefined} value
 * @return {!proto.typedb.protocol.Rule.Res} returns this
*/
proto.typedb.protocol.Rule.Res.prototype.setRuleDeleteRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Rule.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Rule.Res} returns this
 */
proto.typedb.protocol.Rule.Res.prototype.clearRuleDeleteRes = function() {
  return this.setRuleDeleteRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Rule.Res.prototype.hasRuleDeleteRes = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SetLabel.Res rule_set_label_res = 101;
 * @return {?proto.typedb.protocol.Rule.SetLabel.Res}
 */
proto.typedb.protocol.Rule.Res.prototype.getRuleSetLabelRes = function() {
  return /** @type{?proto.typedb.protocol.Rule.SetLabel.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule.SetLabel.Res, 101));
};


/**
 * @param {?proto.typedb.protocol.Rule.SetLabel.Res|undefined} value
 * @return {!proto.typedb.protocol.Rule.Res} returns this
*/
proto.typedb.protocol.Rule.Res.prototype.setRuleSetLabelRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Rule.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Rule.Res} returns this
 */
proto.typedb.protocol.Rule.Res.prototype.clearRuleSetLabelRes = function() {
  return this.setRuleSetLabelRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Rule.Res.prototype.hasRuleSetLabelRes = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.Delete}
 */
proto.typedb.protocol.Rule.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.Delete;
  return proto.typedb.protocol.Rule.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.Delete}
 */
proto.typedb.protocol.Rule.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.Delete.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.Delete.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.Delete.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.Delete.Req}
 */
proto.typedb.protocol.Rule.Delete.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.Delete.Req;
  return proto.typedb.protocol.Rule.Delete.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.Delete.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.Delete.Req}
 */
proto.typedb.protocol.Rule.Delete.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.Delete.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.Delete.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.Delete.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.Delete.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.Delete.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.Delete.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.Delete.Res}
 */
proto.typedb.protocol.Rule.Delete.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.Delete.Res;
  return proto.typedb.protocol.Rule.Delete.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.Delete.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.Delete.Res}
 */
proto.typedb.protocol.Rule.Delete.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.Delete.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.Delete.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.Delete.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.Delete.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.SetLabel.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.SetLabel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.SetLabel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.SetLabel}
 */
proto.typedb.protocol.Rule.SetLabel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.SetLabel;
  return proto.typedb.protocol.Rule.SetLabel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.SetLabel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.SetLabel}
 */
proto.typedb.protocol.Rule.SetLabel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.SetLabel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.SetLabel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.SetLabel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.SetLabel.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.SetLabel.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.SetLabel.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.SetLabel.Req}
 */
proto.typedb.protocol.Rule.SetLabel.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.SetLabel.Req;
  return proto.typedb.protocol.Rule.SetLabel.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.SetLabel.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.SetLabel.Req}
 */
proto.typedb.protocol.Rule.SetLabel.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.SetLabel.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.SetLabel.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.SetLabel.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Rule.SetLabel.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Rule.SetLabel.Req} returns this
 */
proto.typedb.protocol.Rule.SetLabel.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Rule.SetLabel.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Rule.SetLabel.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Rule.SetLabel.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Rule.SetLabel.Res}
 */
proto.typedb.protocol.Rule.SetLabel.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Rule.SetLabel.Res;
  return proto.typedb.protocol.Rule.SetLabel.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Rule.SetLabel.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Rule.SetLabel.Res}
 */
proto.typedb.protocol.Rule.SetLabel.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Rule.SetLabel.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Rule.SetLabel.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Rule.SetLabel.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Rule.SetLabel.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Rule.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Rule} returns this
 */
proto.typedb.protocol.Rule.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string when = 2;
 * @return {string}
 */
proto.typedb.protocol.Rule.prototype.getWhen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Rule} returns this
 */
proto.typedb.protocol.Rule.prototype.setWhen = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string then = 3;
 * @return {string}
 */
proto.typedb.protocol.Rule.prototype.getThen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Rule} returns this
 */
proto.typedb.protocol.Rule.prototype.setThen = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Explanation.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Explanation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Explanation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explanation.toObject = function(includeInstance, msg) {
  var f, obj = {
    rule: (f = msg.getRule()) && proto.typedb.protocol.Rule.toObject(includeInstance, f),
    varMappingMap: (f = msg.getVarMappingMap()) ? f.toObject(includeInstance, proto.typedb.protocol.Explanation.VarList.toObject) : [],
    condition: (f = msg.getCondition()) && common_answer_pb.ConceptMap.toObject(includeInstance, f),
    conclusion: (f = msg.getConclusion()) && common_answer_pb.ConceptMap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Explanation}
 */
proto.typedb.protocol.Explanation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Explanation;
  return proto.typedb.protocol.Explanation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Explanation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Explanation}
 */
proto.typedb.protocol.Explanation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Rule;
      reader.readMessage(value,proto.typedb.protocol.Rule.deserializeBinaryFromReader);
      msg.setRule(value);
      break;
    case 2:
      var value = msg.getVarMappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.typedb.protocol.Explanation.VarList.deserializeBinaryFromReader, "", new proto.typedb.protocol.Explanation.VarList());
         });
      break;
    case 3:
      var value = new common_answer_pb.ConceptMap;
      reader.readMessage(value,common_answer_pb.ConceptMap.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 4:
      var value = new common_answer_pb.ConceptMap;
      reader.readMessage(value,common_answer_pb.ConceptMap.deserializeBinaryFromReader);
      msg.setConclusion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Explanation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Explanation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Explanation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explanation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Rule.serializeBinaryToWriter
    );
  }
  f = message.getVarMappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.typedb.protocol.Explanation.VarList.serializeBinaryToWriter);
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_answer_pb.ConceptMap.serializeBinaryToWriter
    );
  }
  f = message.getConclusion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_answer_pb.ConceptMap.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Explanation.VarList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Explanation.VarList.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Explanation.VarList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Explanation.VarList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explanation.VarList.toObject = function(includeInstance, msg) {
  var f, obj = {
    varsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Explanation.VarList}
 */
proto.typedb.protocol.Explanation.VarList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Explanation.VarList;
  return proto.typedb.protocol.Explanation.VarList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Explanation.VarList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Explanation.VarList}
 */
proto.typedb.protocol.Explanation.VarList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addVars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Explanation.VarList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Explanation.VarList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Explanation.VarList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Explanation.VarList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVarsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string vars = 1;
 * @return {!Array<string>}
 */
proto.typedb.protocol.Explanation.VarList.prototype.getVarsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.typedb.protocol.Explanation.VarList} returns this
 */
proto.typedb.protocol.Explanation.VarList.prototype.setVarsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Explanation.VarList} returns this
 */
proto.typedb.protocol.Explanation.VarList.prototype.addVars = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Explanation.VarList} returns this
 */
proto.typedb.protocol.Explanation.VarList.prototype.clearVarsList = function() {
  return this.setVarsList([]);
};


/**
 * optional Rule rule = 1;
 * @return {?proto.typedb.protocol.Rule}
 */
proto.typedb.protocol.Explanation.prototype.getRule = function() {
  return /** @type{?proto.typedb.protocol.Rule} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Rule, 1));
};


/**
 * @param {?proto.typedb.protocol.Rule|undefined} value
 * @return {!proto.typedb.protocol.Explanation} returns this
*/
proto.typedb.protocol.Explanation.prototype.setRule = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Explanation} returns this
 */
proto.typedb.protocol.Explanation.prototype.clearRule = function() {
  return this.setRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Explanation.prototype.hasRule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, VarList> var_mapping = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.typedb.protocol.Explanation.VarList>}
 */
proto.typedb.protocol.Explanation.prototype.getVarMappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.typedb.protocol.Explanation.VarList>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.typedb.protocol.Explanation.VarList));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.typedb.protocol.Explanation} returns this
 */
proto.typedb.protocol.Explanation.prototype.clearVarMappingMap = function() {
  this.getVarMappingMap().clear();
  return this;};


/**
 * optional ConceptMap condition = 3;
 * @return {?proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.Explanation.prototype.getCondition = function() {
  return /** @type{?proto.typedb.protocol.ConceptMap} */ (
    jspb.Message.getWrapperField(this, common_answer_pb.ConceptMap, 3));
};


/**
 * @param {?proto.typedb.protocol.ConceptMap|undefined} value
 * @return {!proto.typedb.protocol.Explanation} returns this
*/
proto.typedb.protocol.Explanation.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Explanation} returns this
 */
proto.typedb.protocol.Explanation.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Explanation.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ConceptMap conclusion = 4;
 * @return {?proto.typedb.protocol.ConceptMap}
 */
proto.typedb.protocol.Explanation.prototype.getConclusion = function() {
  return /** @type{?proto.typedb.protocol.ConceptMap} */ (
    jspb.Message.getWrapperField(this, common_answer_pb.ConceptMap, 4));
};


/**
 * @param {?proto.typedb.protocol.ConceptMap|undefined} value
 * @return {!proto.typedb.protocol.Explanation} returns this
*/
proto.typedb.protocol.Explanation.prototype.setConclusion = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Explanation} returns this
 */
proto.typedb.protocol.Explanation.prototype.clearConclusion = function() {
  return this.setConclusion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Explanation.prototype.hasConclusion = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.typedb.protocol);
