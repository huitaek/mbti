// source: common/concept.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.typedb.protocol.Attribute', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.GetOwners', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.GetOwners.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.GetOwners.Req.FilterCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.GetOwners.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.Value', null, global);
goog.exportSymbol('proto.typedb.protocol.Attribute.Value.ValueCase', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Get', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Get.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Get.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Get.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetInstances', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetInstances.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetInstances.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetInstances.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwners', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwners.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwners.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwnersExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetRegex', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetRegex.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetRegex.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetSubtypes', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetSubtypes.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetSubtypes.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.GetSubtypes.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Put', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Put.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.Put.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.SetRegex', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.SetRegex.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.SetRegex.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.AttributeType.ValueType', null, global);
goog.exportSymbol('proto.typedb.protocol.Concept', null, global);
goog.exportSymbol('proto.typedb.protocol.Concept.ConceptCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThing', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThing.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThing.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThing.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThingType', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThingType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThingType.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.GetThingType.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutAttributeType', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutAttributeType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutAttributeType.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutEntityType', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutEntityType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutEntityType.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutRelationType', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutRelationType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.PutRelationType.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ConceptManager.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.EntityType', null, global);
goog.exportSymbol('proto.typedb.protocol.EntityType.Create', null, global);
goog.exportSymbol('proto.typedb.protocol.EntityType.Create.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.EntityType.Create.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.AddPlayer', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.AddPlayer.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.AddPlayer.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayers', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayers.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayers.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayersByRoleType', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayersByRoleType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetRelating', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetRelating.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.GetRelating.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.RemovePlayer', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.RemovePlayer.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Relation.RemovePlayer.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.Create', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.Create.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.Create.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelates', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelates.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelates.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesForRoleLabel', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.RoleCase', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesOverridden', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesOverridden.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesOverridden.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.SetRelates', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.SetRelates.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.SetRelates.Req.OverriddenCase', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.SetRelates.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.UnsetRelates', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.UnsetRelates.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RelationType.UnsetRelates.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetPlayers', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetPlayers.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetPlayers.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetRelationTypes', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetRelationTypes.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.RoleType.GetRelationTypes.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Delete', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Delete.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Delete.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetHas', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetHas.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetHas.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetPlaying', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetPlaying.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetPlaying.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetRelations', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetRelations.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetRelations.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetType', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetType.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.GetType.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.ResPart.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.SetHas', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.SetHas.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.SetHas.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.UnsetHas', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.UnsetHas.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Thing.UnsetHas.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstances', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstances.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstances.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstancesExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstancesExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwns', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwns.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwns.Req.FilterCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwns.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.FilterCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsOverridden', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsOverridden.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsOverridden.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlays', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlays.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlays.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysOverridden', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysOverridden.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysOverridden.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetAbstract', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetAbstract.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetAbstract.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetOwns', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetOwns.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetOwns.Req.OverriddenCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetOwns.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetPlays', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetPlays.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetPlays.Req.OverriddenCase', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.SetPlays.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetAbstract', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetAbstract.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetAbstract.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetOwns', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetOwns.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetOwns.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetPlays', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetPlays.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.ThingType.UnsetPlays.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Delete', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Delete.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Delete.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Encoding', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypes', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypes.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypes.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypesExplicit', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypesExplicit.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertype', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertype.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertype.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertype.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertypes', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertypes.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.GetSupertypes.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.IsAbstract', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.IsAbstract.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.IsAbstract.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Req.ReqCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.Res.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.ResPart', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.ResPart.ResCase', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetLabel', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetLabel.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetLabel.Res', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetSupertype', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetSupertype.Req', null, global);
goog.exportSymbol('proto.typedb.protocol.Type.SetSupertype.Res', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.displayName = 'proto.typedb.protocol.ConceptManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ConceptManager.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ConceptManager.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.Req.displayName = 'proto.typedb.protocol.ConceptManager.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ConceptManager.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ConceptManager.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.Res.displayName = 'proto.typedb.protocol.ConceptManager.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThingType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThingType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThingType.displayName = 'proto.typedb.protocol.ConceptManager.GetThingType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThingType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThingType.Req.displayName = 'proto.typedb.protocol.ConceptManager.GetThingType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ConceptManager.GetThingType.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThingType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThingType.Res.displayName = 'proto.typedb.protocol.ConceptManager.GetThingType.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThing.displayName = 'proto.typedb.protocol.ConceptManager.GetThing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThing.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThing.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThing.Req.displayName = 'proto.typedb.protocol.ConceptManager.GetThing.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.GetThing.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ConceptManager.GetThing.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ConceptManager.GetThing.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.GetThing.Res.displayName = 'proto.typedb.protocol.ConceptManager.GetThing.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutEntityType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutEntityType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutEntityType.displayName = 'proto.typedb.protocol.ConceptManager.PutEntityType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutEntityType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutEntityType.Req.displayName = 'proto.typedb.protocol.ConceptManager.PutEntityType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutEntityType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutEntityType.Res.displayName = 'proto.typedb.protocol.ConceptManager.PutEntityType.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutAttributeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutAttributeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutAttributeType.displayName = 'proto.typedb.protocol.ConceptManager.PutAttributeType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutAttributeType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutAttributeType.Req.displayName = 'proto.typedb.protocol.ConceptManager.PutAttributeType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutAttributeType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutAttributeType.Res.displayName = 'proto.typedb.protocol.ConceptManager.PutAttributeType.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutRelationType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutRelationType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutRelationType.displayName = 'proto.typedb.protocol.ConceptManager.PutRelationType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutRelationType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutRelationType.Req.displayName = 'proto.typedb.protocol.ConceptManager.PutRelationType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ConceptManager.PutRelationType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ConceptManager.PutRelationType.Res.displayName = 'proto.typedb.protocol.ConceptManager.PutRelationType.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Concept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Concept.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Concept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Concept.displayName = 'proto.typedb.protocol.Concept';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.displayName = 'proto.typedb.protocol.Thing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Thing.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Thing.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.Req.displayName = 'proto.typedb.protocol.Thing.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Thing.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Thing.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.Res.displayName = 'proto.typedb.protocol.Thing.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Thing.ResPart.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Thing.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.ResPart.displayName = 'proto.typedb.protocol.Thing.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.Delete.displayName = 'proto.typedb.protocol.Thing.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.Delete.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.Delete.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.Delete.Req.displayName = 'proto.typedb.protocol.Thing.Delete.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.Delete.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.Delete.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.Delete.Res.displayName = 'proto.typedb.protocol.Thing.Delete.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetType.displayName = 'proto.typedb.protocol.Thing.GetType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetType.Req.displayName = 'proto.typedb.protocol.Thing.GetType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetType.Res.displayName = 'proto.typedb.protocol.Thing.GetType.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.SetHas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.SetHas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.SetHas.displayName = 'proto.typedb.protocol.Thing.SetHas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.SetHas.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.SetHas.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.SetHas.Req.displayName = 'proto.typedb.protocol.Thing.SetHas.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.SetHas.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.SetHas.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.SetHas.Res.displayName = 'proto.typedb.protocol.Thing.SetHas.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.UnsetHas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.UnsetHas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.UnsetHas.displayName = 'proto.typedb.protocol.Thing.UnsetHas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.UnsetHas.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.UnsetHas.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.UnsetHas.Req.displayName = 'proto.typedb.protocol.Thing.UnsetHas.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.UnsetHas.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.UnsetHas.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.UnsetHas.Res.displayName = 'proto.typedb.protocol.Thing.UnsetHas.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetHas = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetHas, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetHas.displayName = 'proto.typedb.protocol.Thing.GetHas';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetHas.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Thing.GetHas.Req.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetHas.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetHas.Req.displayName = 'proto.typedb.protocol.Thing.GetHas.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetHas.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Thing.GetHas.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetHas.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetHas.ResPart.displayName = 'proto.typedb.protocol.Thing.GetHas.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetPlaying = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetPlaying, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetPlaying.displayName = 'proto.typedb.protocol.Thing.GetPlaying';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetPlaying.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetPlaying.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetPlaying.Req.displayName = 'proto.typedb.protocol.Thing.GetPlaying.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Thing.GetPlaying.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetPlaying.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetPlaying.ResPart.displayName = 'proto.typedb.protocol.Thing.GetPlaying.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetRelations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetRelations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetRelations.displayName = 'proto.typedb.protocol.Thing.GetRelations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetRelations.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Thing.GetRelations.Req.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetRelations.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetRelations.Req.displayName = 'proto.typedb.protocol.Thing.GetRelations.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Thing.GetRelations.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Thing.GetRelations.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Thing.GetRelations.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Thing.GetRelations.ResPart.displayName = 'proto.typedb.protocol.Thing.GetRelations.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.displayName = 'proto.typedb.protocol.Relation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.AddPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.AddPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.AddPlayer.displayName = 'proto.typedb.protocol.Relation.AddPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.AddPlayer.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.AddPlayer.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.AddPlayer.Req.displayName = 'proto.typedb.protocol.Relation.AddPlayer.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.AddPlayer.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.AddPlayer.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.AddPlayer.Res.displayName = 'proto.typedb.protocol.Relation.AddPlayer.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.RemovePlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.RemovePlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.RemovePlayer.displayName = 'proto.typedb.protocol.Relation.RemovePlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.RemovePlayer.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.RemovePlayer.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.RemovePlayer.Req.displayName = 'proto.typedb.protocol.Relation.RemovePlayer.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.RemovePlayer.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.RemovePlayer.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.RemovePlayer.Res.displayName = 'proto.typedb.protocol.Relation.RemovePlayer.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayers.displayName = 'proto.typedb.protocol.Relation.GetPlayers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayers.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Relation.GetPlayers.Req.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayers.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayers.Req.displayName = 'proto.typedb.protocol.Relation.GetPlayers.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Relation.GetPlayers.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayers.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayers.ResPart.displayName = 'proto.typedb.protocol.Relation.GetPlayers.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayersByRoleType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayersByRoleType.displayName = 'proto.typedb.protocol.Relation.GetPlayersByRoleType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.displayName = 'proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayersByRoleType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.displayName = 'proto.typedb.protocol.Relation.GetPlayersByRoleType.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.displayName = 'proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetRelating = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetRelating, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetRelating.displayName = 'proto.typedb.protocol.Relation.GetRelating';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetRelating.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetRelating.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetRelating.Req.displayName = 'proto.typedb.protocol.Relation.GetRelating.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Relation.GetRelating.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Relation.GetRelating.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Relation.GetRelating.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Relation.GetRelating.ResPart.displayName = 'proto.typedb.protocol.Relation.GetRelating.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Attribute.displayName = 'proto.typedb.protocol.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Attribute.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Attribute.Value.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Attribute.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Attribute.Value.displayName = 'proto.typedb.protocol.Attribute.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Attribute.GetOwners = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Attribute.GetOwners, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Attribute.GetOwners.displayName = 'proto.typedb.protocol.Attribute.GetOwners';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Attribute.GetOwners.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Attribute.GetOwners.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Attribute.GetOwners.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Attribute.GetOwners.Req.displayName = 'proto.typedb.protocol.Attribute.GetOwners.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Attribute.GetOwners.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Attribute.GetOwners.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Attribute.GetOwners.ResPart.displayName = 'proto.typedb.protocol.Attribute.GetOwners.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.displayName = 'proto.typedb.protocol.Type';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.typedb.protocol.Type.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Type.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.Req.displayName = 'proto.typedb.protocol.Type.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.typedb.protocol.Type.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Type.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.Res.displayName = 'proto.typedb.protocol.Type.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, proto.typedb.protocol.Type.ResPart.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Type.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.ResPart.displayName = 'proto.typedb.protocol.Type.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.Delete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.Delete.displayName = 'proto.typedb.protocol.Type.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.Delete.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.Delete.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.Delete.Req.displayName = 'proto.typedb.protocol.Type.Delete.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.Delete.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.Delete.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.Delete.Res.displayName = 'proto.typedb.protocol.Type.Delete.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetLabel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetLabel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetLabel.displayName = 'proto.typedb.protocol.Type.SetLabel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetLabel.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetLabel.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetLabel.Req.displayName = 'proto.typedb.protocol.Type.SetLabel.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetLabel.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetLabel.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetLabel.Res.displayName = 'proto.typedb.protocol.Type.SetLabel.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.IsAbstract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.IsAbstract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.IsAbstract.displayName = 'proto.typedb.protocol.Type.IsAbstract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.IsAbstract.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.IsAbstract.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.IsAbstract.Req.displayName = 'proto.typedb.protocol.Type.IsAbstract.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.IsAbstract.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.IsAbstract.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.IsAbstract.Res.displayName = 'proto.typedb.protocol.Type.IsAbstract.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertype = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertype, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertype.displayName = 'proto.typedb.protocol.Type.GetSupertype';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertype.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertype.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertype.Req.displayName = 'proto.typedb.protocol.Type.GetSupertype.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertype.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.Type.GetSupertype.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertype.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertype.Res.displayName = 'proto.typedb.protocol.Type.GetSupertype.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetSupertype = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetSupertype, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetSupertype.displayName = 'proto.typedb.protocol.Type.SetSupertype';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetSupertype.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetSupertype.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetSupertype.Req.displayName = 'proto.typedb.protocol.Type.SetSupertype.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.SetSupertype.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.SetSupertype.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.SetSupertype.Res.displayName = 'proto.typedb.protocol.Type.SetSupertype.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertypes.displayName = 'proto.typedb.protocol.Type.GetSupertypes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertypes.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertypes.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertypes.Req.displayName = 'proto.typedb.protocol.Type.GetSupertypes.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Type.GetSupertypes.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSupertypes.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSupertypes.ResPart.displayName = 'proto.typedb.protocol.Type.GetSupertypes.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypes.displayName = 'proto.typedb.protocol.Type.GetSubtypes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypes.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypes.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypes.Req.displayName = 'proto.typedb.protocol.Type.GetSubtypes.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Type.GetSubtypes.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypes.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypes.ResPart.displayName = 'proto.typedb.protocol.Type.GetSubtypes.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypesExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypesExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypesExplicit.displayName = 'proto.typedb.protocol.Type.GetSubtypesExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypesExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypesExplicit.Req.displayName = 'proto.typedb.protocol.Type.GetSubtypesExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.displayName = 'proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RoleType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.displayName = 'proto.typedb.protocol.RoleType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetRelationTypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetRelationTypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetRelationTypes.displayName = 'proto.typedb.protocol.RoleType.GetRelationTypes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetRelationTypes.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetRelationTypes.Req.displayName = 'proto.typedb.protocol.RoleType.GetRelationTypes.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetRelationTypes.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.displayName = 'proto.typedb.protocol.RoleType.GetRelationTypes.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetPlayers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetPlayers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetPlayers.displayName = 'proto.typedb.protocol.RoleType.GetPlayers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetPlayers.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetPlayers.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetPlayers.Req.displayName = 'proto.typedb.protocol.RoleType.GetPlayers.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.RoleType.GetPlayers.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.RoleType.GetPlayers.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RoleType.GetPlayers.ResPart.displayName = 'proto.typedb.protocol.RoleType.GetPlayers.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.displayName = 'proto.typedb.protocol.ThingType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetAbstract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetAbstract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetAbstract.displayName = 'proto.typedb.protocol.ThingType.SetAbstract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetAbstract.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetAbstract.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetAbstract.Req.displayName = 'proto.typedb.protocol.ThingType.SetAbstract.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetAbstract.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetAbstract.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetAbstract.Res.displayName = 'proto.typedb.protocol.ThingType.SetAbstract.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetAbstract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetAbstract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetAbstract.displayName = 'proto.typedb.protocol.ThingType.UnsetAbstract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetAbstract.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetAbstract.Req.displayName = 'proto.typedb.protocol.ThingType.UnsetAbstract.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetAbstract.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetAbstract.Res.displayName = 'proto.typedb.protocol.ThingType.UnsetAbstract.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstances.displayName = 'proto.typedb.protocol.ThingType.GetInstances';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstances.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstances.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstances.Req.displayName = 'proto.typedb.protocol.ThingType.GetInstances.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetInstances.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstances.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstances.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetInstances.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstancesExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstancesExplicit.displayName = 'proto.typedb.protocol.ThingType.GetInstancesExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstancesExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.displayName = 'proto.typedb.protocol.ThingType.GetInstancesExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwns.displayName = 'proto.typedb.protocol.ThingType.GetOwns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwns.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.GetOwns.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwns.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwns.Req.displayName = 'proto.typedb.protocol.ThingType.GetOwns.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetOwns.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwns.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwns.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetOwns.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsExplicit.displayName = 'proto.typedb.protocol.ThingType.GetOwnsExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.displayName = 'proto.typedb.protocol.ThingType.GetOwnsExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsOverridden, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsOverridden.displayName = 'proto.typedb.protocol.ThingType.GetOwnsOverridden';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsOverridden.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.displayName = 'proto.typedb.protocol.ThingType.GetOwnsOverridden.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.GetOwnsOverridden.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.displayName = 'proto.typedb.protocol.ThingType.GetOwnsOverridden.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetOwns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetOwns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetOwns.displayName = 'proto.typedb.protocol.ThingType.SetOwns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetOwns.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.SetOwns.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.SetOwns.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetOwns.Req.displayName = 'proto.typedb.protocol.ThingType.SetOwns.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetOwns.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetOwns.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetOwns.Res.displayName = 'proto.typedb.protocol.ThingType.SetOwns.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetOwns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetOwns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetOwns.displayName = 'proto.typedb.protocol.ThingType.UnsetOwns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetOwns.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetOwns.Req.displayName = 'proto.typedb.protocol.ThingType.UnsetOwns.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetOwns.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetOwns.Res.displayName = 'proto.typedb.protocol.ThingType.UnsetOwns.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlays = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlays, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlays.displayName = 'proto.typedb.protocol.ThingType.GetPlays';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlays.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlays.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlays.Req.displayName = 'proto.typedb.protocol.ThingType.GetPlays.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetPlays.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlays.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlays.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetPlays.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysExplicit.displayName = 'proto.typedb.protocol.ThingType.GetPlaysExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.displayName = 'proto.typedb.protocol.ThingType.GetPlaysExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.displayName = 'proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysOverridden, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysOverridden.displayName = 'proto.typedb.protocol.ThingType.GetPlaysOverridden';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysOverridden.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.displayName = 'proto.typedb.protocol.ThingType.GetPlaysOverridden.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.GetPlaysOverridden.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.displayName = 'proto.typedb.protocol.ThingType.GetPlaysOverridden.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetPlays = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetPlays, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetPlays.displayName = 'proto.typedb.protocol.ThingType.SetPlays';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetPlays.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.ThingType.SetPlays.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.ThingType.SetPlays.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetPlays.Req.displayName = 'proto.typedb.protocol.ThingType.SetPlays.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.SetPlays.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.SetPlays.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.SetPlays.Res.displayName = 'proto.typedb.protocol.ThingType.SetPlays.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetPlays = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetPlays, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetPlays.displayName = 'proto.typedb.protocol.ThingType.UnsetPlays';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetPlays.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetPlays.Req.displayName = 'proto.typedb.protocol.ThingType.UnsetPlays.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.ThingType.UnsetPlays.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.ThingType.UnsetPlays.Res.displayName = 'proto.typedb.protocol.ThingType.UnsetPlays.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.EntityType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.EntityType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.EntityType.displayName = 'proto.typedb.protocol.EntityType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.EntityType.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.EntityType.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.EntityType.Create.displayName = 'proto.typedb.protocol.EntityType.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.EntityType.Create.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.EntityType.Create.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.EntityType.Create.Req.displayName = 'proto.typedb.protocol.EntityType.Create.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.EntityType.Create.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.EntityType.Create.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.EntityType.Create.Res.displayName = 'proto.typedb.protocol.EntityType.Create.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.displayName = 'proto.typedb.protocol.RelationType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.Create = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.Create.displayName = 'proto.typedb.protocol.RelationType.Create';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.Create.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.Create.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.Create.Req.displayName = 'proto.typedb.protocol.RelationType.Create.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.Create.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.Create.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.Create.Res.displayName = 'proto.typedb.protocol.RelationType.Create.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelates.displayName = 'proto.typedb.protocol.RelationType.GetRelates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelates.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelates.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelates.Req.displayName = 'proto.typedb.protocol.RelationType.GetRelates.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.RelationType.GetRelates.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelates.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelates.ResPart.displayName = 'proto.typedb.protocol.RelationType.GetRelates.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesExplicit.displayName = 'proto.typedb.protocol.RelationType.GetRelatesExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.displayName = 'proto.typedb.protocol.RelationType.GetRelatesExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.displayName = 'proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesForRoleLabel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.displayName = 'proto.typedb.protocol.RelationType.GetRelatesForRoleLabel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.displayName = 'proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.displayName = 'proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesOverridden, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesOverridden.displayName = 'proto.typedb.protocol.RelationType.GetRelatesOverridden';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesOverridden.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.displayName = 'proto.typedb.protocol.RelationType.GetRelatesOverridden.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.RelationType.GetRelatesOverridden.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.displayName = 'proto.typedb.protocol.RelationType.GetRelatesOverridden.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.SetRelates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.SetRelates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.SetRelates.displayName = 'proto.typedb.protocol.RelationType.SetRelates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.SetRelates.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.RelationType.SetRelates.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.RelationType.SetRelates.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.SetRelates.Req.displayName = 'proto.typedb.protocol.RelationType.SetRelates.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.SetRelates.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.SetRelates.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.SetRelates.Res.displayName = 'proto.typedb.protocol.RelationType.SetRelates.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.UnsetRelates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.UnsetRelates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.UnsetRelates.displayName = 'proto.typedb.protocol.RelationType.UnsetRelates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.UnsetRelates.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.UnsetRelates.Req.displayName = 'proto.typedb.protocol.RelationType.UnsetRelates.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.RelationType.UnsetRelates.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.RelationType.UnsetRelates.Res.displayName = 'proto.typedb.protocol.RelationType.UnsetRelates.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.displayName = 'proto.typedb.protocol.AttributeType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Put = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.Put, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Put.displayName = 'proto.typedb.protocol.AttributeType.Put';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Put.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.Put.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Put.Req.displayName = 'proto.typedb.protocol.AttributeType.Put.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Put.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.Put.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Put.Res.displayName = 'proto.typedb.protocol.AttributeType.Put.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Get.displayName = 'proto.typedb.protocol.AttributeType.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Get.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.Get.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Get.Req.displayName = 'proto.typedb.protocol.AttributeType.Get.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.Get.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.AttributeType.Get.Res.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.AttributeType.Get.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.Get.Res.displayName = 'proto.typedb.protocol.AttributeType.Get.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwners = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwners, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwners.displayName = 'proto.typedb.protocol.AttributeType.GetOwners';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwners.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwners.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwners.Req.displayName = 'proto.typedb.protocol.AttributeType.GetOwners.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.AttributeType.GetOwners.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwners.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwners.ResPart.displayName = 'proto.typedb.protocol.AttributeType.GetOwners.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwnersExplicit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.displayName = 'proto.typedb.protocol.AttributeType.GetOwnersExplicit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.displayName = 'proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.displayName = 'proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetRegex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetRegex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetRegex.displayName = 'proto.typedb.protocol.AttributeType.GetRegex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetRegex.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetRegex.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetRegex.Req.displayName = 'proto.typedb.protocol.AttributeType.GetRegex.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetRegex.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetRegex.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetRegex.Res.displayName = 'proto.typedb.protocol.AttributeType.GetRegex.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.SetRegex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.SetRegex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.SetRegex.displayName = 'proto.typedb.protocol.AttributeType.SetRegex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.SetRegex.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.SetRegex.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.SetRegex.Req.displayName = 'proto.typedb.protocol.AttributeType.SetRegex.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.SetRegex.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.SetRegex.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.SetRegex.Res.displayName = 'proto.typedb.protocol.AttributeType.SetRegex.Res';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetSubtypes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetSubtypes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetSubtypes.displayName = 'proto.typedb.protocol.AttributeType.GetSubtypes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.AttributeType.GetSubtypes.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetSubtypes.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetSubtypes.Req.displayName = 'proto.typedb.protocol.AttributeType.GetSubtypes.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetSubtypes.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.displayName = 'proto.typedb.protocol.AttributeType.GetSubtypes.ResPart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetInstances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetInstances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetInstances.displayName = 'proto.typedb.protocol.AttributeType.GetInstances';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetInstances.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.typedb.protocol.AttributeType.GetInstances.Req.oneofGroups_);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetInstances.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetInstances.Req.displayName = 'proto.typedb.protocol.AttributeType.GetInstances.Req';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.typedb.protocol.AttributeType.GetInstances.ResPart.repeatedFields_, null);
};
goog.inherits(proto.typedb.protocol.AttributeType.GetInstances.ResPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.typedb.protocol.AttributeType.GetInstances.ResPart.displayName = 'proto.typedb.protocol.AttributeType.GetInstances.ResPart';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager}
 */
proto.typedb.protocol.ConceptManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager;
  return proto.typedb.protocol.ConceptManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager}
 */
proto.typedb.protocol.ConceptManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ConceptManager.Req.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ConceptManager.Req.ReqCase = {
  REQ_NOT_SET: 0,
  GET_THING_TYPE_REQ: 1,
  GET_THING_REQ: 2,
  PUT_ENTITY_TYPE_REQ: 3,
  PUT_ATTRIBUTE_TYPE_REQ: 4,
  PUT_RELATION_TYPE_REQ: 5
};

/**
 * @return {proto.typedb.protocol.ConceptManager.Req.ReqCase}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.ConceptManager.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    getThingTypeReq: (f = msg.getGetThingTypeReq()) && proto.typedb.protocol.ConceptManager.GetThingType.Req.toObject(includeInstance, f),
    getThingReq: (f = msg.getGetThingReq()) && proto.typedb.protocol.ConceptManager.GetThing.Req.toObject(includeInstance, f),
    putEntityTypeReq: (f = msg.getPutEntityTypeReq()) && proto.typedb.protocol.ConceptManager.PutEntityType.Req.toObject(includeInstance, f),
    putAttributeTypeReq: (f = msg.getPutAttributeTypeReq()) && proto.typedb.protocol.ConceptManager.PutAttributeType.Req.toObject(includeInstance, f),
    putRelationTypeReq: (f = msg.getPutRelationTypeReq()) && proto.typedb.protocol.ConceptManager.PutRelationType.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.Req}
 */
proto.typedb.protocol.ConceptManager.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.Req;
  return proto.typedb.protocol.ConceptManager.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.Req}
 */
proto.typedb.protocol.ConceptManager.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.ConceptManager.GetThingType.Req;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.GetThingType.Req.deserializeBinaryFromReader);
      msg.setGetThingTypeReq(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.ConceptManager.GetThing.Req;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.GetThing.Req.deserializeBinaryFromReader);
      msg.setGetThingReq(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.ConceptManager.PutEntityType.Req;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutEntityType.Req.deserializeBinaryFromReader);
      msg.setPutEntityTypeReq(value);
      break;
    case 4:
      var value = new proto.typedb.protocol.ConceptManager.PutAttributeType.Req;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutAttributeType.Req.deserializeBinaryFromReader);
      msg.setPutAttributeTypeReq(value);
      break;
    case 5:
      var value = new proto.typedb.protocol.ConceptManager.PutRelationType.Req;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutRelationType.Req.deserializeBinaryFromReader);
      msg.setPutRelationTypeReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetThingTypeReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.ConceptManager.GetThingType.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetThingReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.ConceptManager.GetThing.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutEntityTypeReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.ConceptManager.PutEntityType.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutAttributeTypeReq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.typedb.protocol.ConceptManager.PutAttributeType.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutRelationTypeReq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.typedb.protocol.ConceptManager.PutRelationType.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetThingType.Req get_thing_type_req = 1;
 * @return {?proto.typedb.protocol.ConceptManager.GetThingType.Req}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getGetThingTypeReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.GetThingType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.GetThingType.Req, 1));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.GetThingType.Req|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
*/
proto.typedb.protocol.ConceptManager.Req.prototype.setGetThingTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
 */
proto.typedb.protocol.ConceptManager.Req.prototype.clearGetThingTypeReq = function() {
  return this.setGetThingTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.hasGetThingTypeReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetThing.Req get_thing_req = 2;
 * @return {?proto.typedb.protocol.ConceptManager.GetThing.Req}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getGetThingReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.GetThing.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.GetThing.Req, 2));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.GetThing.Req|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
*/
proto.typedb.protocol.ConceptManager.Req.prototype.setGetThingReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
 */
proto.typedb.protocol.ConceptManager.Req.prototype.clearGetThingReq = function() {
  return this.setGetThingReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.hasGetThingReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PutEntityType.Req put_entity_type_req = 3;
 * @return {?proto.typedb.protocol.ConceptManager.PutEntityType.Req}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getPutEntityTypeReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutEntityType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutEntityType.Req, 3));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutEntityType.Req|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
*/
proto.typedb.protocol.ConceptManager.Req.prototype.setPutEntityTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
 */
proto.typedb.protocol.ConceptManager.Req.prototype.clearPutEntityTypeReq = function() {
  return this.setPutEntityTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.hasPutEntityTypeReq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PutAttributeType.Req put_attribute_type_req = 4;
 * @return {?proto.typedb.protocol.ConceptManager.PutAttributeType.Req}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getPutAttributeTypeReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutAttributeType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutAttributeType.Req, 4));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutAttributeType.Req|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
*/
proto.typedb.protocol.ConceptManager.Req.prototype.setPutAttributeTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
 */
proto.typedb.protocol.ConceptManager.Req.prototype.clearPutAttributeTypeReq = function() {
  return this.setPutAttributeTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.hasPutAttributeTypeReq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PutRelationType.Req put_relation_type_req = 5;
 * @return {?proto.typedb.protocol.ConceptManager.PutRelationType.Req}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.getPutRelationTypeReq = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutRelationType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutRelationType.Req, 5));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutRelationType.Req|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
*/
proto.typedb.protocol.ConceptManager.Req.prototype.setPutRelationTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.typedb.protocol.ConceptManager.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Req} returns this
 */
proto.typedb.protocol.ConceptManager.Req.prototype.clearPutRelationTypeReq = function() {
  return this.setPutRelationTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Req.prototype.hasPutRelationTypeReq = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ConceptManager.Res.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ConceptManager.Res.ResCase = {
  RES_NOT_SET: 0,
  GET_THING_TYPE_RES: 1,
  GET_THING_RES: 2,
  PUT_ENTITY_TYPE_RES: 3,
  PUT_ATTRIBUTE_TYPE_RES: 4,
  PUT_RELATION_TYPE_RES: 5
};

/**
 * @return {proto.typedb.protocol.ConceptManager.Res.ResCase}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.ConceptManager.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    getThingTypeRes: (f = msg.getGetThingTypeRes()) && proto.typedb.protocol.ConceptManager.GetThingType.Res.toObject(includeInstance, f),
    getThingRes: (f = msg.getGetThingRes()) && proto.typedb.protocol.ConceptManager.GetThing.Res.toObject(includeInstance, f),
    putEntityTypeRes: (f = msg.getPutEntityTypeRes()) && proto.typedb.protocol.ConceptManager.PutEntityType.Res.toObject(includeInstance, f),
    putAttributeTypeRes: (f = msg.getPutAttributeTypeRes()) && proto.typedb.protocol.ConceptManager.PutAttributeType.Res.toObject(includeInstance, f),
    putRelationTypeRes: (f = msg.getPutRelationTypeRes()) && proto.typedb.protocol.ConceptManager.PutRelationType.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.Res}
 */
proto.typedb.protocol.ConceptManager.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.Res;
  return proto.typedb.protocol.ConceptManager.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.Res}
 */
proto.typedb.protocol.ConceptManager.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.ConceptManager.GetThingType.Res;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.GetThingType.Res.deserializeBinaryFromReader);
      msg.setGetThingTypeRes(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.ConceptManager.GetThing.Res;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.GetThing.Res.deserializeBinaryFromReader);
      msg.setGetThingRes(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.ConceptManager.PutEntityType.Res;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutEntityType.Res.deserializeBinaryFromReader);
      msg.setPutEntityTypeRes(value);
      break;
    case 4:
      var value = new proto.typedb.protocol.ConceptManager.PutAttributeType.Res;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutAttributeType.Res.deserializeBinaryFromReader);
      msg.setPutAttributeTypeRes(value);
      break;
    case 5:
      var value = new proto.typedb.protocol.ConceptManager.PutRelationType.Res;
      reader.readMessage(value,proto.typedb.protocol.ConceptManager.PutRelationType.Res.deserializeBinaryFromReader);
      msg.setPutRelationTypeRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGetThingTypeRes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.ConceptManager.GetThingType.Res.serializeBinaryToWriter
    );
  }
  f = message.getGetThingRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.ConceptManager.GetThing.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutEntityTypeRes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.ConceptManager.PutEntityType.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutAttributeTypeRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.typedb.protocol.ConceptManager.PutAttributeType.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutRelationTypeRes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.typedb.protocol.ConceptManager.PutRelationType.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetThingType.Res get_thing_type_res = 1;
 * @return {?proto.typedb.protocol.ConceptManager.GetThingType.Res}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getGetThingTypeRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.GetThingType.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.GetThingType.Res, 1));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.GetThingType.Res|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
*/
proto.typedb.protocol.ConceptManager.Res.prototype.setGetThingTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
 */
proto.typedb.protocol.ConceptManager.Res.prototype.clearGetThingTypeRes = function() {
  return this.setGetThingTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.hasGetThingTypeRes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetThing.Res get_thing_res = 2;
 * @return {?proto.typedb.protocol.ConceptManager.GetThing.Res}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getGetThingRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.GetThing.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.GetThing.Res, 2));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.GetThing.Res|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
*/
proto.typedb.protocol.ConceptManager.Res.prototype.setGetThingRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
 */
proto.typedb.protocol.ConceptManager.Res.prototype.clearGetThingRes = function() {
  return this.setGetThingRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.hasGetThingRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PutEntityType.Res put_entity_type_res = 3;
 * @return {?proto.typedb.protocol.ConceptManager.PutEntityType.Res}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getPutEntityTypeRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutEntityType.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutEntityType.Res, 3));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutEntityType.Res|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
*/
proto.typedb.protocol.ConceptManager.Res.prototype.setPutEntityTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
 */
proto.typedb.protocol.ConceptManager.Res.prototype.clearPutEntityTypeRes = function() {
  return this.setPutEntityTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.hasPutEntityTypeRes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PutAttributeType.Res put_attribute_type_res = 4;
 * @return {?proto.typedb.protocol.ConceptManager.PutAttributeType.Res}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getPutAttributeTypeRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutAttributeType.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutAttributeType.Res, 4));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutAttributeType.Res|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
*/
proto.typedb.protocol.ConceptManager.Res.prototype.setPutAttributeTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
 */
proto.typedb.protocol.ConceptManager.Res.prototype.clearPutAttributeTypeRes = function() {
  return this.setPutAttributeTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.hasPutAttributeTypeRes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PutRelationType.Res put_relation_type_res = 5;
 * @return {?proto.typedb.protocol.ConceptManager.PutRelationType.Res}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.getPutRelationTypeRes = function() {
  return /** @type{?proto.typedb.protocol.ConceptManager.PutRelationType.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ConceptManager.PutRelationType.Res, 5));
};


/**
 * @param {?proto.typedb.protocol.ConceptManager.PutRelationType.Res|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
*/
proto.typedb.protocol.ConceptManager.Res.prototype.setPutRelationTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.typedb.protocol.ConceptManager.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.Res} returns this
 */
proto.typedb.protocol.ConceptManager.Res.prototype.clearPutRelationTypeRes = function() {
  return this.setPutRelationTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.Res.prototype.hasPutRelationTypeRes = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThingType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThingType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType}
 */
proto.typedb.protocol.ConceptManager.GetThingType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThingType;
  return proto.typedb.protocol.ConceptManager.GetThingType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType}
 */
proto.typedb.protocol.ConceptManager.GetThingType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThingType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThingType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThingType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Req}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThingType.Req;
  return proto.typedb.protocol.ConceptManager.GetThingType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Req}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThingType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Req} returns this
 */
proto.typedb.protocol.ConceptManager.GetThingType.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.ResCase = {
  RES_NOT_SET: 0,
  THING_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.ConceptManager.GetThingType.Res.ResCase}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.ConceptManager.GetThingType.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ConceptManager.GetThingType.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThingType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingType: (f = msg.getThingType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Res}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThingType.Res;
  return proto.typedb.protocol.ConceptManager.GetThingType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Res}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setThingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThingType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThingType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type thing_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.getThingType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Res} returns this
*/
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.setThingType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ConceptManager.GetThingType.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.GetThingType.Res} returns this
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.clearThingType = function() {
  return this.setThingType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.GetThingType.Res.prototype.hasThingType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThing.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing}
 */
proto.typedb.protocol.ConceptManager.GetThing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThing;
  return proto.typedb.protocol.ConceptManager.GetThing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing}
 */
proto.typedb.protocol.ConceptManager.GetThing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThing.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    iid: msg.getIid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Req}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThing.Req;
  return proto.typedb.protocol.ConceptManager.GetThing.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Req}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThing.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes iid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.getIid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes iid = 1;
 * This is a type-conversion wrapper around `getIid()`
 * @return {string}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.getIid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIid()));
};


/**
 * optional bytes iid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIid()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.getIid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Req} returns this
 */
proto.typedb.protocol.ConceptManager.GetThing.Req.prototype.setIid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.ResCase = {
  RES_NOT_SET: 0,
  THING: 1
};

/**
 * @return {proto.typedb.protocol.ConceptManager.GetThing.Res.ResCase}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.ConceptManager.GetThing.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ConceptManager.GetThing.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.GetThing.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    thing: (f = msg.getThing()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Res}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.GetThing.Res;
  return proto.typedb.protocol.ConceptManager.GetThing.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Res}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setThing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.GetThing.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.GetThing.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThing();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing thing = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.getThing = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Res} returns this
*/
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.setThing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ConceptManager.GetThing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.GetThing.Res} returns this
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.clearThing = function() {
  return this.setThing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.GetThing.Res.prototype.hasThing = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutEntityType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutEntityType;
  return proto.typedb.protocol.ConceptManager.PutEntityType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutEntityType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutEntityType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Req}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutEntityType.Req;
  return proto.typedb.protocol.ConceptManager.PutEntityType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Req}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutEntityType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Req} returns this
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutEntityType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityType: (f = msg.getEntityType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Res}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutEntityType.Res;
  return proto.typedb.protocol.ConceptManager.PutEntityType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Res}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setEntityType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutEntityType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutEntityType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type entity_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.getEntityType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Res} returns this
*/
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.setEntityType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.PutEntityType.Res} returns this
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.clearEntityType = function() {
  return this.setEntityType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.PutEntityType.Res.prototype.hasEntityType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutAttributeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutAttributeType;
  return proto.typedb.protocol.ConceptManager.PutAttributeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutAttributeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutAttributeType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutAttributeType.Req;
  return proto.typedb.protocol.ConceptManager.PutAttributeType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutAttributeType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req} returns this
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AttributeType.ValueType value_type = 2;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Req} returns this
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Req.prototype.setValueType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutAttributeType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeType: (f = msg.getAttributeType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutAttributeType.Res;
  return proto.typedb.protocol.ConceptManager.PutAttributeType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setAttributeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutAttributeType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type attribute_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.getAttributeType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res} returns this
*/
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.setAttributeType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.PutAttributeType.Res} returns this
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.clearAttributeType = function() {
  return this.setAttributeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.PutAttributeType.Res.prototype.hasAttributeType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutRelationType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutRelationType;
  return proto.typedb.protocol.ConceptManager.PutRelationType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutRelationType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutRelationType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Req}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutRelationType.Req;
  return proto.typedb.protocol.ConceptManager.PutRelationType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Req}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutRelationType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Req} returns this
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ConceptManager.PutRelationType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationType: (f = msg.getRelationType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Res}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ConceptManager.PutRelationType.Res;
  return proto.typedb.protocol.ConceptManager.PutRelationType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Res}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRelationType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ConceptManager.PutRelationType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ConceptManager.PutRelationType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type relation_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.getRelationType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Res} returns this
*/
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.setRelationType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ConceptManager.PutRelationType.Res} returns this
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.clearRelationType = function() {
  return this.setRelationType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ConceptManager.PutRelationType.Res.prototype.hasRelationType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Concept.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Concept.ConceptCase = {
  CONCEPT_NOT_SET: 0,
  THING: 1,
  TYPE: 2
};

/**
 * @return {proto.typedb.protocol.Concept.ConceptCase}
 */
proto.typedb.protocol.Concept.prototype.getConceptCase = function() {
  return /** @type {proto.typedb.protocol.Concept.ConceptCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Concept.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Concept.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Concept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Concept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Concept.toObject = function(includeInstance, msg) {
  var f, obj = {
    thing: (f = msg.getThing()) && proto.typedb.protocol.Thing.toObject(includeInstance, f),
    type: (f = msg.getType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Concept}
 */
proto.typedb.protocol.Concept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Concept;
  return proto.typedb.protocol.Concept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Concept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Concept}
 */
proto.typedb.protocol.Concept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setThing(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Concept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Concept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Concept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Concept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThing();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing thing = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Concept.prototype.getThing = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Concept} returns this
*/
proto.typedb.protocol.Concept.prototype.setThing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.Concept.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Concept} returns this
 */
proto.typedb.protocol.Concept.prototype.clearThing = function() {
  return this.setThing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Concept.prototype.hasThing = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type type = 2;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Concept.prototype.getType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 2));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Concept} returns this
*/
proto.typedb.protocol.Concept.prototype.setType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.Concept.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Concept} returns this
 */
proto.typedb.protocol.Concept.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Concept.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.toObject = function(includeInstance, msg) {
  var f, obj = {
    iid: msg.getIid_asB64(),
    type: (f = msg.getType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.typedb.protocol.Attribute.Value.toObject(includeInstance, f),
    inferred: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing;
  return proto.typedb.protocol.Thing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIid(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 3:
      var value = new proto.typedb.protocol.Attribute.Value;
      reader.readMessage(value,proto.typedb.protocol.Attribute.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInferred(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.typedb.protocol.Attribute.Value.serializeBinaryToWriter
    );
  }
  f = message.getInferred();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Thing.Req.oneofGroups_ = [[100,101,102,103,104,105,106,200,201,202,203,204,300]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Thing.Req.ReqCase = {
  REQ_NOT_SET: 0,
  THING_DELETE_REQ: 100,
  THING_GET_TYPE_REQ: 101,
  THING_GET_HAS_REQ: 102,
  THING_SET_HAS_REQ: 103,
  THING_UNSET_HAS_REQ: 104,
  THING_GET_RELATIONS_REQ: 105,
  THING_GET_PLAYING_REQ: 106,
  RELATION_ADD_PLAYER_REQ: 200,
  RELATION_REMOVE_PLAYER_REQ: 201,
  RELATION_GET_PLAYERS_REQ: 202,
  RELATION_GET_PLAYERS_BY_ROLE_TYPE_REQ: 203,
  RELATION_GET_RELATING_REQ: 204,
  ATTRIBUTE_GET_OWNERS_REQ: 300
};

/**
 * @return {proto.typedb.protocol.Thing.Req.ReqCase}
 */
proto.typedb.protocol.Thing.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.Thing.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Thing.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    iid: msg.getIid_asB64(),
    thingDeleteReq: (f = msg.getThingDeleteReq()) && proto.typedb.protocol.Thing.Delete.Req.toObject(includeInstance, f),
    thingGetTypeReq: (f = msg.getThingGetTypeReq()) && proto.typedb.protocol.Thing.GetType.Req.toObject(includeInstance, f),
    thingGetHasReq: (f = msg.getThingGetHasReq()) && proto.typedb.protocol.Thing.GetHas.Req.toObject(includeInstance, f),
    thingSetHasReq: (f = msg.getThingSetHasReq()) && proto.typedb.protocol.Thing.SetHas.Req.toObject(includeInstance, f),
    thingUnsetHasReq: (f = msg.getThingUnsetHasReq()) && proto.typedb.protocol.Thing.UnsetHas.Req.toObject(includeInstance, f),
    thingGetRelationsReq: (f = msg.getThingGetRelationsReq()) && proto.typedb.protocol.Thing.GetRelations.Req.toObject(includeInstance, f),
    thingGetPlayingReq: (f = msg.getThingGetPlayingReq()) && proto.typedb.protocol.Thing.GetPlaying.Req.toObject(includeInstance, f),
    relationAddPlayerReq: (f = msg.getRelationAddPlayerReq()) && proto.typedb.protocol.Relation.AddPlayer.Req.toObject(includeInstance, f),
    relationRemovePlayerReq: (f = msg.getRelationRemovePlayerReq()) && proto.typedb.protocol.Relation.RemovePlayer.Req.toObject(includeInstance, f),
    relationGetPlayersReq: (f = msg.getRelationGetPlayersReq()) && proto.typedb.protocol.Relation.GetPlayers.Req.toObject(includeInstance, f),
    relationGetPlayersByRoleTypeReq: (f = msg.getRelationGetPlayersByRoleTypeReq()) && proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.toObject(includeInstance, f),
    relationGetRelatingReq: (f = msg.getRelationGetRelatingReq()) && proto.typedb.protocol.Relation.GetRelating.Req.toObject(includeInstance, f),
    attributeGetOwnersReq: (f = msg.getAttributeGetOwnersReq()) && proto.typedb.protocol.Attribute.GetOwners.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.Req}
 */
proto.typedb.protocol.Thing.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.Req;
  return proto.typedb.protocol.Thing.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.Req}
 */
proto.typedb.protocol.Thing.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIid(value);
      break;
    case 100:
      var value = new proto.typedb.protocol.Thing.Delete.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.Delete.Req.deserializeBinaryFromReader);
      msg.setThingDeleteReq(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Thing.GetType.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetType.Req.deserializeBinaryFromReader);
      msg.setThingGetTypeReq(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Thing.GetHas.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetHas.Req.deserializeBinaryFromReader);
      msg.setThingGetHasReq(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.Thing.SetHas.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.SetHas.Req.deserializeBinaryFromReader);
      msg.setThingSetHasReq(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.Thing.UnsetHas.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.UnsetHas.Req.deserializeBinaryFromReader);
      msg.setThingUnsetHasReq(value);
      break;
    case 105:
      var value = new proto.typedb.protocol.Thing.GetRelations.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetRelations.Req.deserializeBinaryFromReader);
      msg.setThingGetRelationsReq(value);
      break;
    case 106:
      var value = new proto.typedb.protocol.Thing.GetPlaying.Req;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetPlaying.Req.deserializeBinaryFromReader);
      msg.setThingGetPlayingReq(value);
      break;
    case 200:
      var value = new proto.typedb.protocol.Relation.AddPlayer.Req;
      reader.readMessage(value,proto.typedb.protocol.Relation.AddPlayer.Req.deserializeBinaryFromReader);
      msg.setRelationAddPlayerReq(value);
      break;
    case 201:
      var value = new proto.typedb.protocol.Relation.RemovePlayer.Req;
      reader.readMessage(value,proto.typedb.protocol.Relation.RemovePlayer.Req.deserializeBinaryFromReader);
      msg.setRelationRemovePlayerReq(value);
      break;
    case 202:
      var value = new proto.typedb.protocol.Relation.GetPlayers.Req;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetPlayers.Req.deserializeBinaryFromReader);
      msg.setRelationGetPlayersReq(value);
      break;
    case 203:
      var value = new proto.typedb.protocol.Relation.GetPlayersByRoleType.Req;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.deserializeBinaryFromReader);
      msg.setRelationGetPlayersByRoleTypeReq(value);
      break;
    case 204:
      var value = new proto.typedb.protocol.Relation.GetRelating.Req;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetRelating.Req.deserializeBinaryFromReader);
      msg.setRelationGetRelatingReq(value);
      break;
    case 300:
      var value = new proto.typedb.protocol.Attribute.GetOwners.Req;
      reader.readMessage(value,proto.typedb.protocol.Attribute.GetOwners.Req.deserializeBinaryFromReader);
      msg.setAttributeGetOwnersReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getThingDeleteReq();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Thing.Delete.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingGetTypeReq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Thing.GetType.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingGetHasReq();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Thing.GetHas.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingSetHasReq();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.Thing.SetHas.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingUnsetHasReq();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.Thing.UnsetHas.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingGetRelationsReq();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.typedb.protocol.Thing.GetRelations.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingGetPlayingReq();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.typedb.protocol.Thing.GetPlaying.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationAddPlayerReq();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.typedb.protocol.Relation.AddPlayer.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationRemovePlayerReq();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.typedb.protocol.Relation.RemovePlayer.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetPlayersReq();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.typedb.protocol.Relation.GetPlayers.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetPlayersByRoleTypeReq();
  if (f != null) {
    writer.writeMessage(
      203,
      f,
      proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetRelatingReq();
  if (f != null) {
    writer.writeMessage(
      204,
      f,
      proto.typedb.protocol.Relation.GetRelating.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeGetOwnersReq();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.typedb.protocol.Attribute.GetOwners.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes iid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Thing.Req.prototype.getIid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes iid = 1;
 * This is a type-conversion wrapper around `getIid()`
 * @return {string}
 */
proto.typedb.protocol.Thing.Req.prototype.getIid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIid()));
};


/**
 * optional bytes iid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIid()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Req.prototype.getIid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.setIid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Delete.Req thing_delete_req = 100;
 * @return {?proto.typedb.protocol.Thing.Delete.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingDeleteReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.Delete.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.Delete.Req, 100));
};


/**
 * @param {?proto.typedb.protocol.Thing.Delete.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingDeleteReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingDeleteReq = function() {
  return this.setThingDeleteReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingDeleteReq = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional GetType.Req thing_get_type_req = 101;
 * @return {?proto.typedb.protocol.Thing.GetType.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingGetTypeReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetType.Req, 101));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetType.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingGetTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingGetTypeReq = function() {
  return this.setThingGetTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingGetTypeReq = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional GetHas.Req thing_get_has_req = 102;
 * @return {?proto.typedb.protocol.Thing.GetHas.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingGetHasReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetHas.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetHas.Req, 102));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetHas.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingGetHasReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingGetHasReq = function() {
  return this.setThingGetHasReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingGetHasReq = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional SetHas.Req thing_set_has_req = 103;
 * @return {?proto.typedb.protocol.Thing.SetHas.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingSetHasReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.SetHas.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.SetHas.Req, 103));
};


/**
 * @param {?proto.typedb.protocol.Thing.SetHas.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingSetHasReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingSetHasReq = function() {
  return this.setThingSetHasReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingSetHasReq = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional UnsetHas.Req thing_unset_has_req = 104;
 * @return {?proto.typedb.protocol.Thing.UnsetHas.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingUnsetHasReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.UnsetHas.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.UnsetHas.Req, 104));
};


/**
 * @param {?proto.typedb.protocol.Thing.UnsetHas.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingUnsetHasReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingUnsetHasReq = function() {
  return this.setThingUnsetHasReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingUnsetHasReq = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional GetRelations.Req thing_get_relations_req = 105;
 * @return {?proto.typedb.protocol.Thing.GetRelations.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingGetRelationsReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetRelations.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetRelations.Req, 105));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetRelations.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingGetRelationsReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingGetRelationsReq = function() {
  return this.setThingGetRelationsReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingGetRelationsReq = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional GetPlaying.Req thing_get_playing_req = 106;
 * @return {?proto.typedb.protocol.Thing.GetPlaying.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getThingGetPlayingReq = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetPlaying.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetPlaying.Req, 106));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetPlaying.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setThingGetPlayingReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearThingGetPlayingReq = function() {
  return this.setThingGetPlayingReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasThingGetPlayingReq = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional Relation.AddPlayer.Req relation_add_player_req = 200;
 * @return {?proto.typedb.protocol.Relation.AddPlayer.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getRelationAddPlayerReq = function() {
  return /** @type{?proto.typedb.protocol.Relation.AddPlayer.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.AddPlayer.Req, 200));
};


/**
 * @param {?proto.typedb.protocol.Relation.AddPlayer.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setRelationAddPlayerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearRelationAddPlayerReq = function() {
  return this.setRelationAddPlayerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasRelationAddPlayerReq = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional Relation.RemovePlayer.Req relation_remove_player_req = 201;
 * @return {?proto.typedb.protocol.Relation.RemovePlayer.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getRelationRemovePlayerReq = function() {
  return /** @type{?proto.typedb.protocol.Relation.RemovePlayer.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.RemovePlayer.Req, 201));
};


/**
 * @param {?proto.typedb.protocol.Relation.RemovePlayer.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setRelationRemovePlayerReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 201, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearRelationRemovePlayerReq = function() {
  return this.setRelationRemovePlayerReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasRelationRemovePlayerReq = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional Relation.GetPlayers.Req relation_get_players_req = 202;
 * @return {?proto.typedb.protocol.Relation.GetPlayers.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getRelationGetPlayersReq = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetPlayers.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetPlayers.Req, 202));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetPlayers.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setRelationGetPlayersReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 202, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearRelationGetPlayersReq = function() {
  return this.setRelationGetPlayersReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasRelationGetPlayersReq = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional Relation.GetPlayersByRoleType.Req relation_get_players_by_role_type_req = 203;
 * @return {?proto.typedb.protocol.Relation.GetPlayersByRoleType.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getRelationGetPlayersByRoleTypeReq = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetPlayersByRoleType.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetPlayersByRoleType.Req, 203));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetPlayersByRoleType.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setRelationGetPlayersByRoleTypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 203, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearRelationGetPlayersByRoleTypeReq = function() {
  return this.setRelationGetPlayersByRoleTypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasRelationGetPlayersByRoleTypeReq = function() {
  return jspb.Message.getField(this, 203) != null;
};


/**
 * optional Relation.GetRelating.Req relation_get_relating_req = 204;
 * @return {?proto.typedb.protocol.Relation.GetRelating.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getRelationGetRelatingReq = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetRelating.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetRelating.Req, 204));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetRelating.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setRelationGetRelatingReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 204, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearRelationGetRelatingReq = function() {
  return this.setRelationGetRelatingReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasRelationGetRelatingReq = function() {
  return jspb.Message.getField(this, 204) != null;
};


/**
 * optional Attribute.GetOwners.Req attribute_get_owners_req = 300;
 * @return {?proto.typedb.protocol.Attribute.GetOwners.Req}
 */
proto.typedb.protocol.Thing.Req.prototype.getAttributeGetOwnersReq = function() {
  return /** @type{?proto.typedb.protocol.Attribute.GetOwners.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Attribute.GetOwners.Req, 300));
};


/**
 * @param {?proto.typedb.protocol.Attribute.GetOwners.Req|undefined} value
 * @return {!proto.typedb.protocol.Thing.Req} returns this
*/
proto.typedb.protocol.Thing.Req.prototype.setAttributeGetOwnersReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 300, proto.typedb.protocol.Thing.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Req} returns this
 */
proto.typedb.protocol.Thing.Req.prototype.clearAttributeGetOwnersReq = function() {
  return this.setAttributeGetOwnersReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Req.prototype.hasAttributeGetOwnersReq = function() {
  return jspb.Message.getField(this, 300) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Thing.Res.oneofGroups_ = [[100,101,102,103,200,201]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Thing.Res.ResCase = {
  RES_NOT_SET: 0,
  THING_DELETE_RES: 100,
  THING_GET_TYPE_RES: 101,
  THING_SET_HAS_RES: 102,
  THING_UNSET_HAS_RES: 103,
  RELATION_ADD_PLAYER_RES: 200,
  RELATION_REMOVE_PLAYER_RES: 201
};

/**
 * @return {proto.typedb.protocol.Thing.Res.ResCase}
 */
proto.typedb.protocol.Thing.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Thing.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Thing.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingDeleteRes: (f = msg.getThingDeleteRes()) && proto.typedb.protocol.Thing.Delete.Res.toObject(includeInstance, f),
    thingGetTypeRes: (f = msg.getThingGetTypeRes()) && proto.typedb.protocol.Thing.GetType.Res.toObject(includeInstance, f),
    thingSetHasRes: (f = msg.getThingSetHasRes()) && proto.typedb.protocol.Thing.SetHas.Res.toObject(includeInstance, f),
    thingUnsetHasRes: (f = msg.getThingUnsetHasRes()) && proto.typedb.protocol.Thing.UnsetHas.Res.toObject(includeInstance, f),
    relationAddPlayerRes: (f = msg.getRelationAddPlayerRes()) && proto.typedb.protocol.Relation.AddPlayer.Res.toObject(includeInstance, f),
    relationRemovePlayerRes: (f = msg.getRelationRemovePlayerRes()) && proto.typedb.protocol.Relation.RemovePlayer.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.Res}
 */
proto.typedb.protocol.Thing.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.Res;
  return proto.typedb.protocol.Thing.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.Res}
 */
proto.typedb.protocol.Thing.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.Thing.Delete.Res;
      reader.readMessage(value,proto.typedb.protocol.Thing.Delete.Res.deserializeBinaryFromReader);
      msg.setThingDeleteRes(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Thing.GetType.Res;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetType.Res.deserializeBinaryFromReader);
      msg.setThingGetTypeRes(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Thing.SetHas.Res;
      reader.readMessage(value,proto.typedb.protocol.Thing.SetHas.Res.deserializeBinaryFromReader);
      msg.setThingSetHasRes(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.Thing.UnsetHas.Res;
      reader.readMessage(value,proto.typedb.protocol.Thing.UnsetHas.Res.deserializeBinaryFromReader);
      msg.setThingUnsetHasRes(value);
      break;
    case 200:
      var value = new proto.typedb.protocol.Relation.AddPlayer.Res;
      reader.readMessage(value,proto.typedb.protocol.Relation.AddPlayer.Res.deserializeBinaryFromReader);
      msg.setRelationAddPlayerRes(value);
      break;
    case 201:
      var value = new proto.typedb.protocol.Relation.RemovePlayer.Res;
      reader.readMessage(value,proto.typedb.protocol.Relation.RemovePlayer.Res.deserializeBinaryFromReader);
      msg.setRelationRemovePlayerRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingDeleteRes();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Thing.Delete.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingGetTypeRes();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Thing.GetType.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingSetHasRes();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Thing.SetHas.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingUnsetHasRes();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.Thing.UnsetHas.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationAddPlayerRes();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.typedb.protocol.Relation.AddPlayer.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationRemovePlayerRes();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.typedb.protocol.Relation.RemovePlayer.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Delete.Res thing_delete_res = 100;
 * @return {?proto.typedb.protocol.Thing.Delete.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getThingDeleteRes = function() {
  return /** @type{?proto.typedb.protocol.Thing.Delete.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.Delete.Res, 100));
};


/**
 * @param {?proto.typedb.protocol.Thing.Delete.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setThingDeleteRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearThingDeleteRes = function() {
  return this.setThingDeleteRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasThingDeleteRes = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional GetType.Res thing_get_type_res = 101;
 * @return {?proto.typedb.protocol.Thing.GetType.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getThingGetTypeRes = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetType.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetType.Res, 101));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetType.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setThingGetTypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearThingGetTypeRes = function() {
  return this.setThingGetTypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasThingGetTypeRes = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional SetHas.Res thing_set_has_res = 102;
 * @return {?proto.typedb.protocol.Thing.SetHas.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getThingSetHasRes = function() {
  return /** @type{?proto.typedb.protocol.Thing.SetHas.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.SetHas.Res, 102));
};


/**
 * @param {?proto.typedb.protocol.Thing.SetHas.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setThingSetHasRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearThingSetHasRes = function() {
  return this.setThingSetHasRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasThingSetHasRes = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional UnsetHas.Res thing_unset_has_res = 103;
 * @return {?proto.typedb.protocol.Thing.UnsetHas.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getThingUnsetHasRes = function() {
  return /** @type{?proto.typedb.protocol.Thing.UnsetHas.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.UnsetHas.Res, 103));
};


/**
 * @param {?proto.typedb.protocol.Thing.UnsetHas.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setThingUnsetHasRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearThingUnsetHasRes = function() {
  return this.setThingUnsetHasRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasThingUnsetHasRes = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional Relation.AddPlayer.Res relation_add_player_res = 200;
 * @return {?proto.typedb.protocol.Relation.AddPlayer.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getRelationAddPlayerRes = function() {
  return /** @type{?proto.typedb.protocol.Relation.AddPlayer.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.AddPlayer.Res, 200));
};


/**
 * @param {?proto.typedb.protocol.Relation.AddPlayer.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setRelationAddPlayerRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearRelationAddPlayerRes = function() {
  return this.setRelationAddPlayerRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasRelationAddPlayerRes = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional Relation.RemovePlayer.Res relation_remove_player_res = 201;
 * @return {?proto.typedb.protocol.Relation.RemovePlayer.Res}
 */
proto.typedb.protocol.Thing.Res.prototype.getRelationRemovePlayerRes = function() {
  return /** @type{?proto.typedb.protocol.Relation.RemovePlayer.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.RemovePlayer.Res, 201));
};


/**
 * @param {?proto.typedb.protocol.Relation.RemovePlayer.Res|undefined} value
 * @return {!proto.typedb.protocol.Thing.Res} returns this
*/
proto.typedb.protocol.Thing.Res.prototype.setRelationRemovePlayerRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 201, proto.typedb.protocol.Thing.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.Res} returns this
 */
proto.typedb.protocol.Thing.Res.prototype.clearRelationRemovePlayerRes = function() {
  return this.setRelationRemovePlayerRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.Res.prototype.hasRelationRemovePlayerRes = function() {
  return jspb.Message.getField(this, 201) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Thing.ResPart.oneofGroups_ = [[100,101,102,200,201,202,300]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Thing.ResPart.ResCase = {
  RES_NOT_SET: 0,
  THING_GET_HAS_RES_PART: 100,
  THING_GET_RELATIONS_RES_PART: 101,
  THING_GET_PLAYING_RES_PART: 102,
  RELATION_GET_PLAYERS_RES_PART: 200,
  RELATION_GET_PLAYERS_BY_ROLE_TYPE_RES_PART: 201,
  RELATION_GET_RELATING_RES_PART: 202,
  ATTRIBUTE_GET_OWNERS_RES_PART: 300
};

/**
 * @return {proto.typedb.protocol.Thing.ResPart.ResCase}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Thing.ResPart.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingGetHasResPart: (f = msg.getThingGetHasResPart()) && proto.typedb.protocol.Thing.GetHas.ResPart.toObject(includeInstance, f),
    thingGetRelationsResPart: (f = msg.getThingGetRelationsResPart()) && proto.typedb.protocol.Thing.GetRelations.ResPart.toObject(includeInstance, f),
    thingGetPlayingResPart: (f = msg.getThingGetPlayingResPart()) && proto.typedb.protocol.Thing.GetPlaying.ResPart.toObject(includeInstance, f),
    relationGetPlayersResPart: (f = msg.getRelationGetPlayersResPart()) && proto.typedb.protocol.Relation.GetPlayers.ResPart.toObject(includeInstance, f),
    relationGetPlayersByRoleTypeResPart: (f = msg.getRelationGetPlayersByRoleTypeResPart()) && proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.toObject(includeInstance, f),
    relationGetRelatingResPart: (f = msg.getRelationGetRelatingResPart()) && proto.typedb.protocol.Relation.GetRelating.ResPart.toObject(includeInstance, f),
    attributeGetOwnersResPart: (f = msg.getAttributeGetOwnersResPart()) && proto.typedb.protocol.Attribute.GetOwners.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.ResPart;
  return proto.typedb.protocol.Thing.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.Thing.GetHas.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetHas.ResPart.deserializeBinaryFromReader);
      msg.setThingGetHasResPart(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Thing.GetRelations.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetRelations.ResPart.deserializeBinaryFromReader);
      msg.setThingGetRelationsResPart(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Thing.GetPlaying.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Thing.GetPlaying.ResPart.deserializeBinaryFromReader);
      msg.setThingGetPlayingResPart(value);
      break;
    case 200:
      var value = new proto.typedb.protocol.Relation.GetPlayers.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetPlayers.ResPart.deserializeBinaryFromReader);
      msg.setRelationGetPlayersResPart(value);
      break;
    case 201:
      var value = new proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.deserializeBinaryFromReader);
      msg.setRelationGetPlayersByRoleTypeResPart(value);
      break;
    case 202:
      var value = new proto.typedb.protocol.Relation.GetRelating.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetRelating.ResPart.deserializeBinaryFromReader);
      msg.setRelationGetRelatingResPart(value);
      break;
    case 300:
      var value = new proto.typedb.protocol.Attribute.GetOwners.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Attribute.GetOwners.ResPart.deserializeBinaryFromReader);
      msg.setAttributeGetOwnersResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingGetHasResPart();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Thing.GetHas.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingGetRelationsResPart();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Thing.GetRelations.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingGetPlayingResPart();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Thing.GetPlaying.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetPlayersResPart();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.typedb.protocol.Relation.GetPlayers.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetPlayersByRoleTypeResPart();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRelationGetRelatingResPart();
  if (f != null) {
    writer.writeMessage(
      202,
      f,
      proto.typedb.protocol.Relation.GetRelating.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getAttributeGetOwnersResPart();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.typedb.protocol.Attribute.GetOwners.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetHas.ResPart thing_get_has_res_part = 100;
 * @return {?proto.typedb.protocol.Thing.GetHas.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getThingGetHasResPart = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetHas.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetHas.ResPart, 100));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetHas.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setThingGetHasResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearThingGetHasResPart = function() {
  return this.setThingGetHasResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasThingGetHasResPart = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional GetRelations.ResPart thing_get_relations_res_part = 101;
 * @return {?proto.typedb.protocol.Thing.GetRelations.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getThingGetRelationsResPart = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetRelations.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetRelations.ResPart, 101));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetRelations.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setThingGetRelationsResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearThingGetRelationsResPart = function() {
  return this.setThingGetRelationsResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasThingGetRelationsResPart = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional GetPlaying.ResPart thing_get_playing_res_part = 102;
 * @return {?proto.typedb.protocol.Thing.GetPlaying.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getThingGetPlayingResPart = function() {
  return /** @type{?proto.typedb.protocol.Thing.GetPlaying.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing.GetPlaying.ResPart, 102));
};


/**
 * @param {?proto.typedb.protocol.Thing.GetPlaying.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setThingGetPlayingResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearThingGetPlayingResPart = function() {
  return this.setThingGetPlayingResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasThingGetPlayingResPart = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional Relation.GetPlayers.ResPart relation_get_players_res_part = 200;
 * @return {?proto.typedb.protocol.Relation.GetPlayers.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getRelationGetPlayersResPart = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetPlayers.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetPlayers.ResPart, 200));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetPlayers.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setRelationGetPlayersResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearRelationGetPlayersResPart = function() {
  return this.setRelationGetPlayersResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasRelationGetPlayersResPart = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional Relation.GetPlayersByRoleType.ResPart relation_get_players_by_role_type_res_part = 201;
 * @return {?proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getRelationGetPlayersByRoleTypeResPart = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart, 201));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setRelationGetPlayersByRoleTypeResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 201, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearRelationGetPlayersByRoleTypeResPart = function() {
  return this.setRelationGetPlayersByRoleTypeResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasRelationGetPlayersByRoleTypeResPart = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional Relation.GetRelating.ResPart relation_get_relating_res_part = 202;
 * @return {?proto.typedb.protocol.Relation.GetRelating.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getRelationGetRelatingResPart = function() {
  return /** @type{?proto.typedb.protocol.Relation.GetRelating.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Relation.GetRelating.ResPart, 202));
};


/**
 * @param {?proto.typedb.protocol.Relation.GetRelating.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setRelationGetRelatingResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 202, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearRelationGetRelatingResPart = function() {
  return this.setRelationGetRelatingResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasRelationGetRelatingResPart = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional Attribute.GetOwners.ResPart attribute_get_owners_res_part = 300;
 * @return {?proto.typedb.protocol.Attribute.GetOwners.ResPart}
 */
proto.typedb.protocol.Thing.ResPart.prototype.getAttributeGetOwnersResPart = function() {
  return /** @type{?proto.typedb.protocol.Attribute.GetOwners.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Attribute.GetOwners.ResPart, 300));
};


/**
 * @param {?proto.typedb.protocol.Attribute.GetOwners.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
*/
proto.typedb.protocol.Thing.ResPart.prototype.setAttributeGetOwnersResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 300, proto.typedb.protocol.Thing.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.ResPart} returns this
 */
proto.typedb.protocol.Thing.ResPart.prototype.clearAttributeGetOwnersResPart = function() {
  return this.setAttributeGetOwnersResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.ResPart.prototype.hasAttributeGetOwnersResPart = function() {
  return jspb.Message.getField(this, 300) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.Delete}
 */
proto.typedb.protocol.Thing.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.Delete;
  return proto.typedb.protocol.Thing.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.Delete}
 */
proto.typedb.protocol.Thing.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.Delete.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.Delete.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.Delete.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.Delete.Req}
 */
proto.typedb.protocol.Thing.Delete.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.Delete.Req;
  return proto.typedb.protocol.Thing.Delete.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.Delete.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.Delete.Req}
 */
proto.typedb.protocol.Thing.Delete.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Delete.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.Delete.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.Delete.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.Delete.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.Delete.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.Delete.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.Delete.Res}
 */
proto.typedb.protocol.Thing.Delete.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.Delete.Res;
  return proto.typedb.protocol.Thing.Delete.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.Delete.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.Delete.Res}
 */
proto.typedb.protocol.Thing.Delete.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.Delete.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.Delete.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.Delete.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.Delete.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetType}
 */
proto.typedb.protocol.Thing.GetType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetType;
  return proto.typedb.protocol.Thing.GetType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetType}
 */
proto.typedb.protocol.Thing.GetType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetType.Req}
 */
proto.typedb.protocol.Thing.GetType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetType.Req;
  return proto.typedb.protocol.Thing.GetType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetType.Req}
 */
proto.typedb.protocol.Thing.GetType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingType: (f = msg.getThingType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetType.Res}
 */
proto.typedb.protocol.Thing.GetType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetType.Res;
  return proto.typedb.protocol.Thing.GetType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetType.Res}
 */
proto.typedb.protocol.Thing.GetType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setThingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type thing_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Thing.GetType.Res.prototype.getThingType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Thing.GetType.Res} returns this
*/
proto.typedb.protocol.Thing.GetType.Res.prototype.setThingType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.GetType.Res} returns this
 */
proto.typedb.protocol.Thing.GetType.Res.prototype.clearThingType = function() {
  return this.setThingType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.GetType.Res.prototype.hasThingType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.SetHas.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.SetHas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.SetHas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.SetHas}
 */
proto.typedb.protocol.Thing.SetHas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.SetHas;
  return proto.typedb.protocol.Thing.SetHas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.SetHas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.SetHas}
 */
proto.typedb.protocol.Thing.SetHas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.SetHas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.SetHas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.SetHas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.SetHas.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.SetHas.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.SetHas.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: (f = msg.getAttribute()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.SetHas.Req}
 */
proto.typedb.protocol.Thing.SetHas.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.SetHas.Req;
  return proto.typedb.protocol.Thing.SetHas.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.SetHas.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.SetHas.Req}
 */
proto.typedb.protocol.Thing.SetHas.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.SetHas.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.SetHas.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.SetHas.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing attribute = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.SetHas.Req.prototype.getAttribute = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Thing.SetHas.Req} returns this
*/
proto.typedb.protocol.Thing.SetHas.Req.prototype.setAttribute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.SetHas.Req} returns this
 */
proto.typedb.protocol.Thing.SetHas.Req.prototype.clearAttribute = function() {
  return this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.SetHas.Req.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.SetHas.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.SetHas.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.SetHas.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.SetHas.Res}
 */
proto.typedb.protocol.Thing.SetHas.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.SetHas.Res;
  return proto.typedb.protocol.Thing.SetHas.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.SetHas.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.SetHas.Res}
 */
proto.typedb.protocol.Thing.SetHas.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.SetHas.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.SetHas.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.SetHas.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.SetHas.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.UnsetHas.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.UnsetHas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.UnsetHas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.UnsetHas}
 */
proto.typedb.protocol.Thing.UnsetHas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.UnsetHas;
  return proto.typedb.protocol.Thing.UnsetHas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.UnsetHas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.UnsetHas}
 */
proto.typedb.protocol.Thing.UnsetHas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.UnsetHas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.UnsetHas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.UnsetHas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.UnsetHas.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: (f = msg.getAttribute()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Req}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.UnsetHas.Req;
  return proto.typedb.protocol.Thing.UnsetHas.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Req}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.UnsetHas.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing attribute = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.getAttribute = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Req} returns this
*/
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.setAttribute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Req} returns this
 */
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.clearAttribute = function() {
  return this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.UnsetHas.Req.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.UnsetHas.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.UnsetHas.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Res}
 */
proto.typedb.protocol.Thing.UnsetHas.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.UnsetHas.Res;
  return proto.typedb.protocol.Thing.UnsetHas.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.UnsetHas.Res}
 */
proto.typedb.protocol.Thing.UnsetHas.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.UnsetHas.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.UnsetHas.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.UnsetHas.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.UnsetHas.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetHas.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetHas.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetHas} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetHas}
 */
proto.typedb.protocol.Thing.GetHas.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetHas;
  return proto.typedb.protocol.Thing.GetHas.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetHas} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetHas}
 */
proto.typedb.protocol.Thing.GetHas.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetHas.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetHas.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetHas} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Thing.GetHas.Req.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetHas.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetHas.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeTypesList: jspb.Message.toObjectList(msg.getAttributeTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance),
    keysOnly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetHas.Req}
 */
proto.typedb.protocol.Thing.GetHas.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetHas.Req;
  return proto.typedb.protocol.Thing.GetHas.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetHas.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetHas.Req}
 */
proto.typedb.protocol.Thing.GetHas.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addAttributeTypes(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetHas.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetHas.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated Type attribute_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.getAttributeTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Thing.GetHas.Req} returns this
*/
proto.typedb.protocol.Thing.GetHas.Req.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.addAttributeTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Thing.GetHas.Req} returns this
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};


/**
 * optional bool keys_only = 2;
 * @return {boolean}
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Thing.GetHas.Req} returns this
 */
proto.typedb.protocol.Thing.GetHas.Req.prototype.setKeysOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Thing.GetHas.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetHas.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetHas.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetHas.ResPart}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetHas.ResPart;
  return proto.typedb.protocol.Thing.GetHas.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetHas.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetHas.ResPart}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetHas.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetHas.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetHas.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing attributes = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.Thing.GetHas.ResPart} returns this
*/
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Thing.GetHas.ResPart} returns this
 */
proto.typedb.protocol.Thing.GetHas.ResPart.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetPlaying.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetPlaying.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetPlaying} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetPlaying}
 */
proto.typedb.protocol.Thing.GetPlaying.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetPlaying;
  return proto.typedb.protocol.Thing.GetPlaying.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetPlaying} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetPlaying}
 */
proto.typedb.protocol.Thing.GetPlaying.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetPlaying.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetPlaying.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetPlaying} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetPlaying.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetPlaying.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetPlaying.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetPlaying.Req}
 */
proto.typedb.protocol.Thing.GetPlaying.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetPlaying.Req;
  return proto.typedb.protocol.Thing.GetPlaying.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetPlaying.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetPlaying.Req}
 */
proto.typedb.protocol.Thing.GetPlaying.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetPlaying.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetPlaying.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetPlaying.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetPlaying.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetPlaying.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetPlaying.ResPart}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetPlaying.ResPart;
  return proto.typedb.protocol.Thing.GetPlaying.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetPlaying.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetPlaying.ResPart}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetPlaying.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetPlaying.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Thing.GetPlaying.ResPart} returns this
*/
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Thing.GetPlaying.ResPart} returns this
 */
proto.typedb.protocol.Thing.GetPlaying.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetRelations.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetRelations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetRelations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetRelations}
 */
proto.typedb.protocol.Thing.GetRelations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetRelations;
  return proto.typedb.protocol.Thing.GetRelations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetRelations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetRelations}
 */
proto.typedb.protocol.Thing.GetRelations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetRelations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetRelations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetRelations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Thing.GetRelations.Req.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetRelations.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetRelations.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetRelations.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetRelations.Req}
 */
proto.typedb.protocol.Thing.GetRelations.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetRelations.Req;
  return proto.typedb.protocol.Thing.GetRelations.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetRelations.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetRelations.Req}
 */
proto.typedb.protocol.Thing.GetRelations.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetRelations.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetRelations.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetRelations.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Thing.GetRelations.Req.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Thing.GetRelations.Req} returns this
*/
proto.typedb.protocol.Thing.GetRelations.Req.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Thing.GetRelations.Req.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Thing.GetRelations.Req} returns this
 */
proto.typedb.protocol.Thing.GetRelations.Req.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Thing.GetRelations.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Thing.GetRelations.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationsList: jspb.Message.toObjectList(msg.getRelationsList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Thing.GetRelations.ResPart}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Thing.GetRelations.ResPart;
  return proto.typedb.protocol.Thing.GetRelations.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Thing.GetRelations.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Thing.GetRelations.ResPart}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addRelations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Thing.GetRelations.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Thing.GetRelations.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing relations = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.getRelationsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.Thing.GetRelations.ResPart} returns this
*/
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.setRelationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.addRelations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Thing.GetRelations.ResPart} returns this
 */
proto.typedb.protocol.Thing.GetRelations.ResPart.prototype.clearRelationsList = function() {
  return this.setRelationsList([]);
};


/**
 * optional bytes iid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.typedb.protocol.Thing.prototype.getIid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes iid = 1;
 * This is a type-conversion wrapper around `getIid()`
 * @return {string}
 */
proto.typedb.protocol.Thing.prototype.getIid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIid()));
};


/**
 * optional bytes iid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIid()`
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Thing.prototype.getIid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.typedb.protocol.Thing} returns this
 */
proto.typedb.protocol.Thing.prototype.setIid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Thing.prototype.getType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 2));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Thing} returns this
*/
proto.typedb.protocol.Thing.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing} returns this
 */
proto.typedb.protocol.Thing.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Attribute.Value value = 3;
 * @return {?proto.typedb.protocol.Attribute.Value}
 */
proto.typedb.protocol.Thing.prototype.getValue = function() {
  return /** @type{?proto.typedb.protocol.Attribute.Value} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Attribute.Value, 3));
};


/**
 * @param {?proto.typedb.protocol.Attribute.Value|undefined} value
 * @return {!proto.typedb.protocol.Thing} returns this
*/
proto.typedb.protocol.Thing.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Thing} returns this
 */
proto.typedb.protocol.Thing.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Thing.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool inferred = 4;
 * @return {boolean}
 */
proto.typedb.protocol.Thing.prototype.getInferred = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Thing} returns this
 */
proto.typedb.protocol.Thing.prototype.setInferred = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation}
 */
proto.typedb.protocol.Relation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation;
  return proto.typedb.protocol.Relation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation}
 */
proto.typedb.protocol.Relation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.AddPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.AddPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.AddPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.AddPlayer}
 */
proto.typedb.protocol.Relation.AddPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.AddPlayer;
  return proto.typedb.protocol.Relation.AddPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.AddPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.AddPlayer}
 */
proto.typedb.protocol.Relation.AddPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.AddPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.AddPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.AddPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.AddPlayer.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    player: (f = msg.getPlayer()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.AddPlayer.Req;
  return proto.typedb.protocol.Relation.AddPlayer.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.AddPlayer.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req} returns this
*/
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req} returns this
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Thing player = 2;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.getPlayer = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 2));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req} returns this
*/
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Req} returns this
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.AddPlayer.Req.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.AddPlayer.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.AddPlayer.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Res}
 */
proto.typedb.protocol.Relation.AddPlayer.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.AddPlayer.Res;
  return proto.typedb.protocol.Relation.AddPlayer.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.AddPlayer.Res}
 */
proto.typedb.protocol.Relation.AddPlayer.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.AddPlayer.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.AddPlayer.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.AddPlayer.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.AddPlayer.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.RemovePlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.RemovePlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.RemovePlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer}
 */
proto.typedb.protocol.Relation.RemovePlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.RemovePlayer;
  return proto.typedb.protocol.Relation.RemovePlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer}
 */
proto.typedb.protocol.Relation.RemovePlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.RemovePlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.RemovePlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.RemovePlayer.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    player: (f = msg.getPlayer()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.RemovePlayer.Req;
  return proto.typedb.protocol.Relation.RemovePlayer.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.RemovePlayer.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req} returns this
*/
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req} returns this
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Thing player = 2;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.getPlayer = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 2));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req} returns this
*/
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Req} returns this
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.RemovePlayer.Req.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.RemovePlayer.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Res}
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.RemovePlayer.Res;
  return proto.typedb.protocol.Relation.RemovePlayer.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.RemovePlayer.Res}
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.RemovePlayer.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.RemovePlayer.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.RemovePlayer.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayers.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayers}
 */
proto.typedb.protocol.Relation.GetPlayers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayers;
  return proto.typedb.protocol.Relation.GetPlayers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayers}
 */
proto.typedb.protocol.Relation.GetPlayers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Relation.GetPlayers.Req.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayers.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayers.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.Req}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayers.Req;
  return proto.typedb.protocol.Relation.GetPlayers.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayers.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.Req}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayers.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayers.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Relation.GetPlayers.Req} returns this
*/
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.Req} returns this
 */
proto.typedb.protocol.Relation.GetPlayers.Req.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayers.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayers.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.ResPart}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayers.ResPart;
  return proto.typedb.protocol.Relation.GetPlayers.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayers.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.ResPart}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayers.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayers.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing things = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.Relation.GetPlayers.ResPart} returns this
*/
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.setThingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Relation.GetPlayers.ResPart} returns this
 */
proto.typedb.protocol.Relation.GetPlayers.ResPart.prototype.clearThingsList = function() {
  return this.setThingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayersByRoleType;
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayersByRoleType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    player: (f = msg.getPlayer()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer;
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} returns this
*/
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} returns this
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Thing player = 2;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.getPlayer = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 2));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} returns this
*/
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer} returns this
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.Req}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayersByRoleType.Req;
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.Req}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesWithPlayersList: jspb.Message.toObjectList(msg.getRoleTypesWithPlayersList(),
    proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart;
  return proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer;
      reader.readMessage(value,proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.deserializeBinaryFromReader);
      msg.addRoleTypesWithPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesWithPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoleTypeWithPlayer role_types_with_players = 1;
 * @return {!Array<!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer>}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.getRoleTypesWithPlayersList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer>} value
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} returns this
*/
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.setRoleTypesWithPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer}
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.addRoleTypesWithPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Relation.GetPlayersByRoleType.RoleTypeWithPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart} returns this
 */
proto.typedb.protocol.Relation.GetPlayersByRoleType.ResPart.prototype.clearRoleTypesWithPlayersList = function() {
  return this.setRoleTypesWithPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetRelating.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetRelating.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetRelating} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetRelating}
 */
proto.typedb.protocol.Relation.GetRelating.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetRelating;
  return proto.typedb.protocol.Relation.GetRelating.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetRelating} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetRelating}
 */
proto.typedb.protocol.Relation.GetRelating.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetRelating.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetRelating.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetRelating} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetRelating.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetRelating.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetRelating.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetRelating.Req}
 */
proto.typedb.protocol.Relation.GetRelating.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetRelating.Req;
  return proto.typedb.protocol.Relation.GetRelating.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetRelating.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetRelating.Req}
 */
proto.typedb.protocol.Relation.GetRelating.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetRelating.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetRelating.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetRelating.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Relation.GetRelating.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Relation.GetRelating.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Relation.GetRelating.ResPart}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Relation.GetRelating.ResPart;
  return proto.typedb.protocol.Relation.GetRelating.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Relation.GetRelating.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Relation.GetRelating.ResPart}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Relation.GetRelating.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Relation.GetRelating.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Relation.GetRelating.ResPart} returns this
*/
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Relation.GetRelating.ResPart} returns this
 */
proto.typedb.protocol.Relation.GetRelating.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Attribute}
 */
proto.typedb.protocol.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Attribute;
  return proto.typedb.protocol.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Attribute}
 */
proto.typedb.protocol.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Attribute.Value.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Attribute.Value.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING: 1,
  BOOLEAN: 2,
  LONG: 3,
  DOUBLE: 4,
  DATE_TIME: 5
};

/**
 * @return {proto.typedb.protocol.Attribute.Value.ValueCase}
 */
proto.typedb.protocol.Attribute.Value.prototype.getValueCase = function() {
  return /** @type {proto.typedb.protocol.Attribute.Value.ValueCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Attribute.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Attribute.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Attribute.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Attribute.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    string: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pb_boolean: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pb_long: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pb_double: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    dateTime: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Attribute.Value}
 */
proto.typedb.protocol.Attribute.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Attribute.Value;
  return proto.typedb.protocol.Attribute.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Attribute.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Attribute.Value}
 */
proto.typedb.protocol.Attribute.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLong(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDateTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Attribute.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Attribute.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Attribute.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string string = 1;
 * @return {string}
 */
proto.typedb.protocol.Attribute.Value.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.hasString = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool boolean = 2;
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.setBoolean = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.clearBoolean = function() {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 long = 3;
 * @return {number}
 */
proto.typedb.protocol.Attribute.Value.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.setLong = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.clearLong = function() {
  return jspb.Message.setOneofField(this, 3, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.hasLong = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double double = 4;
 * @return {number}
 */
proto.typedb.protocol.Attribute.Value.prototype.getDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.setDouble = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.clearDouble = function() {
  return jspb.Message.setOneofField(this, 4, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 date_time = 5;
 * @return {number}
 */
proto.typedb.protocol.Attribute.Value.prototype.getDateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.setDateTime = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.Value} returns this
 */
proto.typedb.protocol.Attribute.Value.prototype.clearDateTime = function() {
  return jspb.Message.setOneofField(this, 5, proto.typedb.protocol.Attribute.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.Value.prototype.hasDateTime = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Attribute.GetOwners.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Attribute.GetOwners.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Attribute.GetOwners} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Attribute.GetOwners}
 */
proto.typedb.protocol.Attribute.GetOwners.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Attribute.GetOwners;
  return proto.typedb.protocol.Attribute.GetOwners.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Attribute.GetOwners} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Attribute.GetOwners}
 */
proto.typedb.protocol.Attribute.GetOwners.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Attribute.GetOwners.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Attribute.GetOwners.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Attribute.GetOwners} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Attribute.GetOwners.Req.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.FilterCase = {
  FILTER_NOT_SET: 0,
  THING_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.Attribute.GetOwners.Req.FilterCase}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.getFilterCase = function() {
  return /** @type {proto.typedb.protocol.Attribute.GetOwners.Req.FilterCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Attribute.GetOwners.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Attribute.GetOwners.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Attribute.GetOwners.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingType: (f = msg.getThingType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.Req}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Attribute.GetOwners.Req;
  return proto.typedb.protocol.Attribute.GetOwners.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Attribute.GetOwners.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.Req}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setThingType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Attribute.GetOwners.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Attribute.GetOwners.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type thing_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.getThingType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Attribute.GetOwners.Req} returns this
*/
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.setThingType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.Attribute.GetOwners.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.Req} returns this
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.clearThingType = function() {
  return this.setThingType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Attribute.GetOwners.Req.prototype.hasThingType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Attribute.GetOwners.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Attribute.GetOwners.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.ResPart}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Attribute.GetOwners.ResPart;
  return proto.typedb.protocol.Attribute.GetOwners.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Attribute.GetOwners.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.ResPart}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Attribute.GetOwners.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Attribute.GetOwners.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing things = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.Attribute.GetOwners.ResPart} returns this
*/
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.setThingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Attribute.GetOwners.ResPart} returns this
 */
proto.typedb.protocol.Attribute.GetOwners.ResPart.prototype.clearThingsList = function() {
  return this.setThingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    encoding: jspb.Message.getFieldWithDefault(msg, 3, 0),
    valueType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    root: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type;
  return proto.typedb.protocol.Type.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {!proto.typedb.protocol.Type.Encoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 4:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getValueType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getRoot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.typedb.protocol.Type.Encoding = {
  THING_TYPE: 0,
  ENTITY_TYPE: 1,
  RELATION_TYPE: 2,
  ATTRIBUTE_TYPE: 3,
  ROLE_TYPE: 4
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Type.Req.oneofGroups_ = [[100,101,102,103,104,105,106,107,200,201,300,309,301,302,303,310,311,304,305,306,312,313,307,308,400,500,502,505,501,506,503,504,600,601,602,603,604,605]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Type.Req.ReqCase = {
  REQ_NOT_SET: 0,
  TYPE_DELETE_REQ: 100,
  TYPE_SET_LABEL_REQ: 101,
  TYPE_IS_ABSTRACT_REQ: 102,
  TYPE_GET_SUPERTYPE_REQ: 103,
  TYPE_SET_SUPERTYPE_REQ: 104,
  TYPE_GET_SUPERTYPES_REQ: 105,
  TYPE_GET_SUBTYPES_REQ: 106,
  TYPE_GET_SUBTYPES_EXPLICIT_REQ: 107,
  ROLE_TYPE_GET_RELATION_TYPES_REQ: 200,
  ROLE_TYPE_GET_PLAYERS_REQ: 201,
  THING_TYPE_GET_INSTANCES_REQ: 300,
  THING_TYPE_GET_INSTANCES_EXPLICIT_REQ: 309,
  THING_TYPE_SET_ABSTRACT_REQ: 301,
  THING_TYPE_UNSET_ABSTRACT_REQ: 302,
  THING_TYPE_GET_OWNS_REQ: 303,
  THING_TYPE_GET_OWNS_EXPLICIT_REQ: 310,
  THING_TYPE_GET_OWNS_OVERRIDDEN_REQ: 311,
  THING_TYPE_SET_OWNS_REQ: 304,
  THING_TYPE_UNSET_OWNS_REQ: 305,
  THING_TYPE_GET_PLAYS_REQ: 306,
  THING_TYPE_GET_PLAYS_EXPLICIT_REQ: 312,
  THING_TYPE_GET_PLAYS_OVERRIDDEN_REQ: 313,
  THING_TYPE_SET_PLAYS_REQ: 307,
  THING_TYPE_UNSET_PLAYS_REQ: 308,
  ENTITY_TYPE_CREATE_REQ: 400,
  RELATION_TYPE_CREATE_REQ: 500,
  RELATION_TYPE_GET_RELATES_REQ: 502,
  RELATION_TYPE_GET_RELATES_EXPLICIT_REQ: 505,
  RELATION_TYPE_GET_RELATES_FOR_ROLE_LABEL_REQ: 501,
  RELATION_TYPE_GET_RELATES_OVERRIDDEN_REQ: 506,
  RELATION_TYPE_SET_RELATES_REQ: 503,
  RELATION_TYPE_UNSET_RELATES_REQ: 504,
  ATTRIBUTE_TYPE_PUT_REQ: 600,
  ATTRIBUTE_TYPE_GET_REQ: 601,
  ATTRIBUTE_TYPE_GET_REGEX_REQ: 602,
  ATTRIBUTE_TYPE_SET_REGEX_REQ: 603,
  ATTRIBUTE_TYPE_GET_OWNERS_REQ: 604,
  ATTRIBUTE_TYPE_GET_OWNERS_EXPLICIT_REQ: 605
};

/**
 * @return {proto.typedb.protocol.Type.Req.ReqCase}
 */
proto.typedb.protocol.Type.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.Type.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Type.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, ""),
    typeDeleteReq: (f = msg.getTypeDeleteReq()) && proto.typedb.protocol.Type.Delete.Req.toObject(includeInstance, f),
    typeSetLabelReq: (f = msg.getTypeSetLabelReq()) && proto.typedb.protocol.Type.SetLabel.Req.toObject(includeInstance, f),
    typeIsAbstractReq: (f = msg.getTypeIsAbstractReq()) && proto.typedb.protocol.Type.IsAbstract.Req.toObject(includeInstance, f),
    typeGetSupertypeReq: (f = msg.getTypeGetSupertypeReq()) && proto.typedb.protocol.Type.GetSupertype.Req.toObject(includeInstance, f),
    typeSetSupertypeReq: (f = msg.getTypeSetSupertypeReq()) && proto.typedb.protocol.Type.SetSupertype.Req.toObject(includeInstance, f),
    typeGetSupertypesReq: (f = msg.getTypeGetSupertypesReq()) && proto.typedb.protocol.Type.GetSupertypes.Req.toObject(includeInstance, f),
    typeGetSubtypesReq: (f = msg.getTypeGetSubtypesReq()) && proto.typedb.protocol.Type.GetSubtypes.Req.toObject(includeInstance, f),
    typeGetSubtypesExplicitReq: (f = msg.getTypeGetSubtypesExplicitReq()) && proto.typedb.protocol.Type.GetSubtypesExplicit.Req.toObject(includeInstance, f),
    roleTypeGetRelationTypesReq: (f = msg.getRoleTypeGetRelationTypesReq()) && proto.typedb.protocol.RoleType.GetRelationTypes.Req.toObject(includeInstance, f),
    roleTypeGetPlayersReq: (f = msg.getRoleTypeGetPlayersReq()) && proto.typedb.protocol.RoleType.GetPlayers.Req.toObject(includeInstance, f),
    thingTypeGetInstancesReq: (f = msg.getThingTypeGetInstancesReq()) && proto.typedb.protocol.ThingType.GetInstances.Req.toObject(includeInstance, f),
    thingTypeGetInstancesExplicitReq: (f = msg.getThingTypeGetInstancesExplicitReq()) && proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.toObject(includeInstance, f),
    thingTypeSetAbstractReq: (f = msg.getThingTypeSetAbstractReq()) && proto.typedb.protocol.ThingType.SetAbstract.Req.toObject(includeInstance, f),
    thingTypeUnsetAbstractReq: (f = msg.getThingTypeUnsetAbstractReq()) && proto.typedb.protocol.ThingType.UnsetAbstract.Req.toObject(includeInstance, f),
    thingTypeGetOwnsReq: (f = msg.getThingTypeGetOwnsReq()) && proto.typedb.protocol.ThingType.GetOwns.Req.toObject(includeInstance, f),
    thingTypeGetOwnsExplicitReq: (f = msg.getThingTypeGetOwnsExplicitReq()) && proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.toObject(includeInstance, f),
    thingTypeGetOwnsOverriddenReq: (f = msg.getThingTypeGetOwnsOverriddenReq()) && proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.toObject(includeInstance, f),
    thingTypeSetOwnsReq: (f = msg.getThingTypeSetOwnsReq()) && proto.typedb.protocol.ThingType.SetOwns.Req.toObject(includeInstance, f),
    thingTypeUnsetOwnsReq: (f = msg.getThingTypeUnsetOwnsReq()) && proto.typedb.protocol.ThingType.UnsetOwns.Req.toObject(includeInstance, f),
    thingTypeGetPlaysReq: (f = msg.getThingTypeGetPlaysReq()) && proto.typedb.protocol.ThingType.GetPlays.Req.toObject(includeInstance, f),
    thingTypeGetPlaysExplicitReq: (f = msg.getThingTypeGetPlaysExplicitReq()) && proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.toObject(includeInstance, f),
    thingTypeGetPlaysOverriddenReq: (f = msg.getThingTypeGetPlaysOverriddenReq()) && proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.toObject(includeInstance, f),
    thingTypeSetPlaysReq: (f = msg.getThingTypeSetPlaysReq()) && proto.typedb.protocol.ThingType.SetPlays.Req.toObject(includeInstance, f),
    thingTypeUnsetPlaysReq: (f = msg.getThingTypeUnsetPlaysReq()) && proto.typedb.protocol.ThingType.UnsetPlays.Req.toObject(includeInstance, f),
    entityTypeCreateReq: (f = msg.getEntityTypeCreateReq()) && proto.typedb.protocol.EntityType.Create.Req.toObject(includeInstance, f),
    relationTypeCreateReq: (f = msg.getRelationTypeCreateReq()) && proto.typedb.protocol.RelationType.Create.Req.toObject(includeInstance, f),
    relationTypeGetRelatesReq: (f = msg.getRelationTypeGetRelatesReq()) && proto.typedb.protocol.RelationType.GetRelates.Req.toObject(includeInstance, f),
    relationTypeGetRelatesExplicitReq: (f = msg.getRelationTypeGetRelatesExplicitReq()) && proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.toObject(includeInstance, f),
    relationTypeGetRelatesForRoleLabelReq: (f = msg.getRelationTypeGetRelatesForRoleLabelReq()) && proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.toObject(includeInstance, f),
    relationTypeGetRelatesOverriddenReq: (f = msg.getRelationTypeGetRelatesOverriddenReq()) && proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.toObject(includeInstance, f),
    relationTypeSetRelatesReq: (f = msg.getRelationTypeSetRelatesReq()) && proto.typedb.protocol.RelationType.SetRelates.Req.toObject(includeInstance, f),
    relationTypeUnsetRelatesReq: (f = msg.getRelationTypeUnsetRelatesReq()) && proto.typedb.protocol.RelationType.UnsetRelates.Req.toObject(includeInstance, f),
    attributeTypePutReq: (f = msg.getAttributeTypePutReq()) && proto.typedb.protocol.AttributeType.Put.Req.toObject(includeInstance, f),
    attributeTypeGetReq: (f = msg.getAttributeTypeGetReq()) && proto.typedb.protocol.AttributeType.Get.Req.toObject(includeInstance, f),
    attributeTypeGetRegexReq: (f = msg.getAttributeTypeGetRegexReq()) && proto.typedb.protocol.AttributeType.GetRegex.Req.toObject(includeInstance, f),
    attributeTypeSetRegexReq: (f = msg.getAttributeTypeSetRegexReq()) && proto.typedb.protocol.AttributeType.SetRegex.Req.toObject(includeInstance, f),
    attributeTypeGetOwnersReq: (f = msg.getAttributeTypeGetOwnersReq()) && proto.typedb.protocol.AttributeType.GetOwners.Req.toObject(includeInstance, f),
    attributeTypeGetOwnersExplicitReq: (f = msg.getAttributeTypeGetOwnersExplicitReq()) && proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.Req}
 */
proto.typedb.protocol.Type.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.Req;
  return proto.typedb.protocol.Type.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.Req}
 */
proto.typedb.protocol.Type.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 100:
      var value = new proto.typedb.protocol.Type.Delete.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.Delete.Req.deserializeBinaryFromReader);
      msg.setTypeDeleteReq(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Type.SetLabel.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.SetLabel.Req.deserializeBinaryFromReader);
      msg.setTypeSetLabelReq(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Type.IsAbstract.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.IsAbstract.Req.deserializeBinaryFromReader);
      msg.setTypeIsAbstractReq(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.Type.GetSupertype.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSupertype.Req.deserializeBinaryFromReader);
      msg.setTypeGetSupertypeReq(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.Type.SetSupertype.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.SetSupertype.Req.deserializeBinaryFromReader);
      msg.setTypeSetSupertypeReq(value);
      break;
    case 105:
      var value = new proto.typedb.protocol.Type.GetSupertypes.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSupertypes.Req.deserializeBinaryFromReader);
      msg.setTypeGetSupertypesReq(value);
      break;
    case 106:
      var value = new proto.typedb.protocol.Type.GetSubtypes.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSubtypes.Req.deserializeBinaryFromReader);
      msg.setTypeGetSubtypesReq(value);
      break;
    case 107:
      var value = new proto.typedb.protocol.Type.GetSubtypesExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSubtypesExplicit.Req.deserializeBinaryFromReader);
      msg.setTypeGetSubtypesExplicitReq(value);
      break;
    case 200:
      var value = new proto.typedb.protocol.RoleType.GetRelationTypes.Req;
      reader.readMessage(value,proto.typedb.protocol.RoleType.GetRelationTypes.Req.deserializeBinaryFromReader);
      msg.setRoleTypeGetRelationTypesReq(value);
      break;
    case 201:
      var value = new proto.typedb.protocol.RoleType.GetPlayers.Req;
      reader.readMessage(value,proto.typedb.protocol.RoleType.GetPlayers.Req.deserializeBinaryFromReader);
      msg.setRoleTypeGetPlayersReq(value);
      break;
    case 300:
      var value = new proto.typedb.protocol.ThingType.GetInstances.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetInstances.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetInstancesReq(value);
      break;
    case 309:
      var value = new proto.typedb.protocol.ThingType.GetInstancesExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetInstancesExplicitReq(value);
      break;
    case 301:
      var value = new proto.typedb.protocol.ThingType.SetAbstract.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetAbstract.Req.deserializeBinaryFromReader);
      msg.setThingTypeSetAbstractReq(value);
      break;
    case 302:
      var value = new proto.typedb.protocol.ThingType.UnsetAbstract.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetAbstract.Req.deserializeBinaryFromReader);
      msg.setThingTypeUnsetAbstractReq(value);
      break;
    case 303:
      var value = new proto.typedb.protocol.ThingType.GetOwns.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwns.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsReq(value);
      break;
    case 310:
      var value = new proto.typedb.protocol.ThingType.GetOwnsExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsExplicitReq(value);
      break;
    case 311:
      var value = new proto.typedb.protocol.ThingType.GetOwnsOverridden.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsOverriddenReq(value);
      break;
    case 304:
      var value = new proto.typedb.protocol.ThingType.SetOwns.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetOwns.Req.deserializeBinaryFromReader);
      msg.setThingTypeSetOwnsReq(value);
      break;
    case 305:
      var value = new proto.typedb.protocol.ThingType.UnsetOwns.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetOwns.Req.deserializeBinaryFromReader);
      msg.setThingTypeUnsetOwnsReq(value);
      break;
    case 306:
      var value = new proto.typedb.protocol.ThingType.GetPlays.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlays.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysReq(value);
      break;
    case 312:
      var value = new proto.typedb.protocol.ThingType.GetPlaysExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysExplicitReq(value);
      break;
    case 313:
      var value = new proto.typedb.protocol.ThingType.GetPlaysOverridden.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysOverriddenReq(value);
      break;
    case 307:
      var value = new proto.typedb.protocol.ThingType.SetPlays.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetPlays.Req.deserializeBinaryFromReader);
      msg.setThingTypeSetPlaysReq(value);
      break;
    case 308:
      var value = new proto.typedb.protocol.ThingType.UnsetPlays.Req;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetPlays.Req.deserializeBinaryFromReader);
      msg.setThingTypeUnsetPlaysReq(value);
      break;
    case 400:
      var value = new proto.typedb.protocol.EntityType.Create.Req;
      reader.readMessage(value,proto.typedb.protocol.EntityType.Create.Req.deserializeBinaryFromReader);
      msg.setEntityTypeCreateReq(value);
      break;
    case 500:
      var value = new proto.typedb.protocol.RelationType.Create.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.Create.Req.deserializeBinaryFromReader);
      msg.setRelationTypeCreateReq(value);
      break;
    case 502:
      var value = new proto.typedb.protocol.RelationType.GetRelates.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelates.Req.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesReq(value);
      break;
    case 505:
      var value = new proto.typedb.protocol.RelationType.GetRelatesExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesExplicitReq(value);
      break;
    case 501:
      var value = new proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesForRoleLabelReq(value);
      break;
    case 506:
      var value = new proto.typedb.protocol.RelationType.GetRelatesOverridden.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesOverriddenReq(value);
      break;
    case 503:
      var value = new proto.typedb.protocol.RelationType.SetRelates.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.SetRelates.Req.deserializeBinaryFromReader);
      msg.setRelationTypeSetRelatesReq(value);
      break;
    case 504:
      var value = new proto.typedb.protocol.RelationType.UnsetRelates.Req;
      reader.readMessage(value,proto.typedb.protocol.RelationType.UnsetRelates.Req.deserializeBinaryFromReader);
      msg.setRelationTypeUnsetRelatesReq(value);
      break;
    case 600:
      var value = new proto.typedb.protocol.AttributeType.Put.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.Put.Req.deserializeBinaryFromReader);
      msg.setAttributeTypePutReq(value);
      break;
    case 601:
      var value = new proto.typedb.protocol.AttributeType.Get.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.Get.Req.deserializeBinaryFromReader);
      msg.setAttributeTypeGetReq(value);
      break;
    case 602:
      var value = new proto.typedb.protocol.AttributeType.GetRegex.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetRegex.Req.deserializeBinaryFromReader);
      msg.setAttributeTypeGetRegexReq(value);
      break;
    case 603:
      var value = new proto.typedb.protocol.AttributeType.SetRegex.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.SetRegex.Req.deserializeBinaryFromReader);
      msg.setAttributeTypeSetRegexReq(value);
      break;
    case 604:
      var value = new proto.typedb.protocol.AttributeType.GetOwners.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetOwners.Req.deserializeBinaryFromReader);
      msg.setAttributeTypeGetOwnersReq(value);
      break;
    case 605:
      var value = new proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.deserializeBinaryFromReader);
      msg.setAttributeTypeGetOwnersExplicitReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTypeDeleteReq();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Type.Delete.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeSetLabelReq();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Type.SetLabel.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeIsAbstractReq();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Type.IsAbstract.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSupertypeReq();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.Type.GetSupertype.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeSetSupertypeReq();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.Type.SetSupertype.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSupertypesReq();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.typedb.protocol.Type.GetSupertypes.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSubtypesReq();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.typedb.protocol.Type.GetSubtypes.Req.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSubtypesExplicitReq();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.typedb.protocol.Type.GetSubtypesExplicit.Req.serializeBinaryToWriter
    );
  }
  f = message.getRoleTypeGetRelationTypesReq();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.typedb.protocol.RoleType.GetRelationTypes.Req.serializeBinaryToWriter
    );
  }
  f = message.getRoleTypeGetPlayersReq();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.typedb.protocol.RoleType.GetPlayers.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetInstancesReq();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.typedb.protocol.ThingType.GetInstances.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetInstancesExplicitReq();
  if (f != null) {
    writer.writeMessage(
      309,
      f,
      proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetAbstractReq();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.typedb.protocol.ThingType.SetAbstract.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetAbstractReq();
  if (f != null) {
    writer.writeMessage(
      302,
      f,
      proto.typedb.protocol.ThingType.UnsetAbstract.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsReq();
  if (f != null) {
    writer.writeMessage(
      303,
      f,
      proto.typedb.protocol.ThingType.GetOwns.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsExplicitReq();
  if (f != null) {
    writer.writeMessage(
      310,
      f,
      proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsOverriddenReq();
  if (f != null) {
    writer.writeMessage(
      311,
      f,
      proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetOwnsReq();
  if (f != null) {
    writer.writeMessage(
      304,
      f,
      proto.typedb.protocol.ThingType.SetOwns.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetOwnsReq();
  if (f != null) {
    writer.writeMessage(
      305,
      f,
      proto.typedb.protocol.ThingType.UnsetOwns.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysReq();
  if (f != null) {
    writer.writeMessage(
      306,
      f,
      proto.typedb.protocol.ThingType.GetPlays.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysExplicitReq();
  if (f != null) {
    writer.writeMessage(
      312,
      f,
      proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysOverriddenReq();
  if (f != null) {
    writer.writeMessage(
      313,
      f,
      proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetPlaysReq();
  if (f != null) {
    writer.writeMessage(
      307,
      f,
      proto.typedb.protocol.ThingType.SetPlays.Req.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetPlaysReq();
  if (f != null) {
    writer.writeMessage(
      308,
      f,
      proto.typedb.protocol.ThingType.UnsetPlays.Req.serializeBinaryToWriter
    );
  }
  f = message.getEntityTypeCreateReq();
  if (f != null) {
    writer.writeMessage(
      400,
      f,
      proto.typedb.protocol.EntityType.Create.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeCreateReq();
  if (f != null) {
    writer.writeMessage(
      500,
      f,
      proto.typedb.protocol.RelationType.Create.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesReq();
  if (f != null) {
    writer.writeMessage(
      502,
      f,
      proto.typedb.protocol.RelationType.GetRelates.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesExplicitReq();
  if (f != null) {
    writer.writeMessage(
      505,
      f,
      proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesForRoleLabelReq();
  if (f != null) {
    writer.writeMessage(
      501,
      f,
      proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesOverriddenReq();
  if (f != null) {
    writer.writeMessage(
      506,
      f,
      proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeSetRelatesReq();
  if (f != null) {
    writer.writeMessage(
      503,
      f,
      proto.typedb.protocol.RelationType.SetRelates.Req.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeUnsetRelatesReq();
  if (f != null) {
    writer.writeMessage(
      504,
      f,
      proto.typedb.protocol.RelationType.UnsetRelates.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypePutReq();
  if (f != null) {
    writer.writeMessage(
      600,
      f,
      proto.typedb.protocol.AttributeType.Put.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetReq();
  if (f != null) {
    writer.writeMessage(
      601,
      f,
      proto.typedb.protocol.AttributeType.Get.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetRegexReq();
  if (f != null) {
    writer.writeMessage(
      602,
      f,
      proto.typedb.protocol.AttributeType.GetRegex.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeSetRegexReq();
  if (f != null) {
    writer.writeMessage(
      603,
      f,
      proto.typedb.protocol.AttributeType.SetRegex.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetOwnersReq();
  if (f != null) {
    writer.writeMessage(
      604,
      f,
      proto.typedb.protocol.AttributeType.GetOwners.Req.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetOwnersExplicitReq();
  if (f != null) {
    writer.writeMessage(
      605,
      f,
      proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Type.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.typedb.protocol.Type.Req.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Delete.Req type_delete_req = 100;
 * @return {?proto.typedb.protocol.Type.Delete.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeDeleteReq = function() {
  return /** @type{?proto.typedb.protocol.Type.Delete.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.Delete.Req, 100));
};


/**
 * @param {?proto.typedb.protocol.Type.Delete.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeDeleteReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeDeleteReq = function() {
  return this.setTypeDeleteReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeDeleteReq = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SetLabel.Req type_set_label_req = 101;
 * @return {?proto.typedb.protocol.Type.SetLabel.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeSetLabelReq = function() {
  return /** @type{?proto.typedb.protocol.Type.SetLabel.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.SetLabel.Req, 101));
};


/**
 * @param {?proto.typedb.protocol.Type.SetLabel.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeSetLabelReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeSetLabelReq = function() {
  return this.setTypeSetLabelReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeSetLabelReq = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional IsAbstract.Req type_is_abstract_req = 102;
 * @return {?proto.typedb.protocol.Type.IsAbstract.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeIsAbstractReq = function() {
  return /** @type{?proto.typedb.protocol.Type.IsAbstract.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.IsAbstract.Req, 102));
};


/**
 * @param {?proto.typedb.protocol.Type.IsAbstract.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeIsAbstractReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeIsAbstractReq = function() {
  return this.setTypeIsAbstractReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeIsAbstractReq = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional GetSupertype.Req type_get_supertype_req = 103;
 * @return {?proto.typedb.protocol.Type.GetSupertype.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeGetSupertypeReq = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSupertype.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSupertype.Req, 103));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSupertype.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeGetSupertypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeGetSupertypeReq = function() {
  return this.setTypeGetSupertypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeGetSupertypeReq = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional SetSupertype.Req type_set_supertype_req = 104;
 * @return {?proto.typedb.protocol.Type.SetSupertype.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeSetSupertypeReq = function() {
  return /** @type{?proto.typedb.protocol.Type.SetSupertype.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.SetSupertype.Req, 104));
};


/**
 * @param {?proto.typedb.protocol.Type.SetSupertype.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeSetSupertypeReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeSetSupertypeReq = function() {
  return this.setTypeSetSupertypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeSetSupertypeReq = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional GetSupertypes.Req type_get_supertypes_req = 105;
 * @return {?proto.typedb.protocol.Type.GetSupertypes.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeGetSupertypesReq = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSupertypes.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSupertypes.Req, 105));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSupertypes.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeGetSupertypesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeGetSupertypesReq = function() {
  return this.setTypeGetSupertypesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeGetSupertypesReq = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional GetSubtypes.Req type_get_subtypes_req = 106;
 * @return {?proto.typedb.protocol.Type.GetSubtypes.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeGetSubtypesReq = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSubtypes.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSubtypes.Req, 106));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSubtypes.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeGetSubtypesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeGetSubtypesReq = function() {
  return this.setTypeGetSubtypesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeGetSubtypesReq = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional GetSubtypesExplicit.Req type_get_subtypes_explicit_req = 107;
 * @return {?proto.typedb.protocol.Type.GetSubtypesExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getTypeGetSubtypesExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSubtypesExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSubtypesExplicit.Req, 107));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSubtypesExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setTypeGetSubtypesExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 107, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearTypeGetSubtypesExplicitReq = function() {
  return this.setTypeGetSubtypesExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasTypeGetSubtypesExplicitReq = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional RoleType.GetRelationTypes.Req role_type_get_relation_types_req = 200;
 * @return {?proto.typedb.protocol.RoleType.GetRelationTypes.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRoleTypeGetRelationTypesReq = function() {
  return /** @type{?proto.typedb.protocol.RoleType.GetRelationTypes.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RoleType.GetRelationTypes.Req, 200));
};


/**
 * @param {?proto.typedb.protocol.RoleType.GetRelationTypes.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRoleTypeGetRelationTypesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRoleTypeGetRelationTypesReq = function() {
  return this.setRoleTypeGetRelationTypesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRoleTypeGetRelationTypesReq = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional RoleType.GetPlayers.Req role_type_get_players_req = 201;
 * @return {?proto.typedb.protocol.RoleType.GetPlayers.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRoleTypeGetPlayersReq = function() {
  return /** @type{?proto.typedb.protocol.RoleType.GetPlayers.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RoleType.GetPlayers.Req, 201));
};


/**
 * @param {?proto.typedb.protocol.RoleType.GetPlayers.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRoleTypeGetPlayersReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 201, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRoleTypeGetPlayersReq = function() {
  return this.setRoleTypeGetPlayersReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRoleTypeGetPlayersReq = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional ThingType.GetInstances.Req thing_type_get_instances_req = 300;
 * @return {?proto.typedb.protocol.ThingType.GetInstances.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetInstancesReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetInstances.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetInstances.Req, 300));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetInstances.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetInstancesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 300, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetInstancesReq = function() {
  return this.setThingTypeGetInstancesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetInstancesReq = function() {
  return jspb.Message.getField(this, 300) != null;
};


/**
 * optional ThingType.GetInstancesExplicit.Req thing_type_get_instances_explicit_req = 309;
 * @return {?proto.typedb.protocol.ThingType.GetInstancesExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetInstancesExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetInstancesExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetInstancesExplicit.Req, 309));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetInstancesExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetInstancesExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 309, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetInstancesExplicitReq = function() {
  return this.setThingTypeGetInstancesExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetInstancesExplicitReq = function() {
  return jspb.Message.getField(this, 309) != null;
};


/**
 * optional ThingType.SetAbstract.Req thing_type_set_abstract_req = 301;
 * @return {?proto.typedb.protocol.ThingType.SetAbstract.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeSetAbstractReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetAbstract.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetAbstract.Req, 301));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetAbstract.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeSetAbstractReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 301, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeSetAbstractReq = function() {
  return this.setThingTypeSetAbstractReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeSetAbstractReq = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional ThingType.UnsetAbstract.Req thing_type_unset_abstract_req = 302;
 * @return {?proto.typedb.protocol.ThingType.UnsetAbstract.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeUnsetAbstractReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetAbstract.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetAbstract.Req, 302));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetAbstract.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeUnsetAbstractReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 302, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeUnsetAbstractReq = function() {
  return this.setThingTypeUnsetAbstractReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeUnsetAbstractReq = function() {
  return jspb.Message.getField(this, 302) != null;
};


/**
 * optional ThingType.GetOwns.Req thing_type_get_owns_req = 303;
 * @return {?proto.typedb.protocol.ThingType.GetOwns.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetOwnsReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwns.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwns.Req, 303));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwns.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetOwnsReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 303, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetOwnsReq = function() {
  return this.setThingTypeGetOwnsReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetOwnsReq = function() {
  return jspb.Message.getField(this, 303) != null;
};


/**
 * optional ThingType.GetOwnsExplicit.Req thing_type_get_owns_explicit_req = 310;
 * @return {?proto.typedb.protocol.ThingType.GetOwnsExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetOwnsExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwnsExplicit.Req, 310));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwnsExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetOwnsExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 310, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetOwnsExplicitReq = function() {
  return this.setThingTypeGetOwnsExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetOwnsExplicitReq = function() {
  return jspb.Message.getField(this, 310) != null;
};


/**
 * optional ThingType.GetOwnsOverridden.Req thing_type_get_owns_overridden_req = 311;
 * @return {?proto.typedb.protocol.ThingType.GetOwnsOverridden.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetOwnsOverriddenReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwnsOverridden.Req, 311));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwnsOverridden.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetOwnsOverriddenReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 311, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetOwnsOverriddenReq = function() {
  return this.setThingTypeGetOwnsOverriddenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetOwnsOverriddenReq = function() {
  return jspb.Message.getField(this, 311) != null;
};


/**
 * optional ThingType.SetOwns.Req thing_type_set_owns_req = 304;
 * @return {?proto.typedb.protocol.ThingType.SetOwns.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeSetOwnsReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetOwns.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetOwns.Req, 304));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetOwns.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeSetOwnsReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 304, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeSetOwnsReq = function() {
  return this.setThingTypeSetOwnsReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeSetOwnsReq = function() {
  return jspb.Message.getField(this, 304) != null;
};


/**
 * optional ThingType.UnsetOwns.Req thing_type_unset_owns_req = 305;
 * @return {?proto.typedb.protocol.ThingType.UnsetOwns.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeUnsetOwnsReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetOwns.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetOwns.Req, 305));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetOwns.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeUnsetOwnsReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 305, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeUnsetOwnsReq = function() {
  return this.setThingTypeUnsetOwnsReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeUnsetOwnsReq = function() {
  return jspb.Message.getField(this, 305) != null;
};


/**
 * optional ThingType.GetPlays.Req thing_type_get_plays_req = 306;
 * @return {?proto.typedb.protocol.ThingType.GetPlays.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetPlaysReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlays.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlays.Req, 306));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlays.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetPlaysReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 306, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetPlaysReq = function() {
  return this.setThingTypeGetPlaysReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetPlaysReq = function() {
  return jspb.Message.getField(this, 306) != null;
};


/**
 * optional ThingType.GetPlaysExplicit.Req thing_type_get_plays_explicit_req = 312;
 * @return {?proto.typedb.protocol.ThingType.GetPlaysExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetPlaysExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlaysExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlaysExplicit.Req, 312));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlaysExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetPlaysExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 312, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetPlaysExplicitReq = function() {
  return this.setThingTypeGetPlaysExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetPlaysExplicitReq = function() {
  return jspb.Message.getField(this, 312) != null;
};


/**
 * optional ThingType.GetPlaysOverridden.Req thing_type_get_plays_overridden_req = 313;
 * @return {?proto.typedb.protocol.ThingType.GetPlaysOverridden.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeGetPlaysOverriddenReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlaysOverridden.Req, 313));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlaysOverridden.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeGetPlaysOverriddenReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 313, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeGetPlaysOverriddenReq = function() {
  return this.setThingTypeGetPlaysOverriddenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeGetPlaysOverriddenReq = function() {
  return jspb.Message.getField(this, 313) != null;
};


/**
 * optional ThingType.SetPlays.Req thing_type_set_plays_req = 307;
 * @return {?proto.typedb.protocol.ThingType.SetPlays.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeSetPlaysReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetPlays.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetPlays.Req, 307));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetPlays.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeSetPlaysReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 307, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeSetPlaysReq = function() {
  return this.setThingTypeSetPlaysReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeSetPlaysReq = function() {
  return jspb.Message.getField(this, 307) != null;
};


/**
 * optional ThingType.UnsetPlays.Req thing_type_unset_plays_req = 308;
 * @return {?proto.typedb.protocol.ThingType.UnsetPlays.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getThingTypeUnsetPlaysReq = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetPlays.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetPlays.Req, 308));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetPlays.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setThingTypeUnsetPlaysReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 308, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearThingTypeUnsetPlaysReq = function() {
  return this.setThingTypeUnsetPlaysReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasThingTypeUnsetPlaysReq = function() {
  return jspb.Message.getField(this, 308) != null;
};


/**
 * optional EntityType.Create.Req entity_type_create_req = 400;
 * @return {?proto.typedb.protocol.EntityType.Create.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getEntityTypeCreateReq = function() {
  return /** @type{?proto.typedb.protocol.EntityType.Create.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.EntityType.Create.Req, 400));
};


/**
 * @param {?proto.typedb.protocol.EntityType.Create.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setEntityTypeCreateReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 400, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearEntityTypeCreateReq = function() {
  return this.setEntityTypeCreateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasEntityTypeCreateReq = function() {
  return jspb.Message.getField(this, 400) != null;
};


/**
 * optional RelationType.Create.Req relation_type_create_req = 500;
 * @return {?proto.typedb.protocol.RelationType.Create.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeCreateReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.Create.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.Create.Req, 500));
};


/**
 * @param {?proto.typedb.protocol.RelationType.Create.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeCreateReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 500, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeCreateReq = function() {
  return this.setRelationTypeCreateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeCreateReq = function() {
  return jspb.Message.getField(this, 500) != null;
};


/**
 * optional RelationType.GetRelates.Req relation_type_get_relates_req = 502;
 * @return {?proto.typedb.protocol.RelationType.GetRelates.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeGetRelatesReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelates.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelates.Req, 502));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelates.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeGetRelatesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 502, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeGetRelatesReq = function() {
  return this.setRelationTypeGetRelatesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeGetRelatesReq = function() {
  return jspb.Message.getField(this, 502) != null;
};


/**
 * optional RelationType.GetRelatesExplicit.Req relation_type_get_relates_explicit_req = 505;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeGetRelatesExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesExplicit.Req, 505));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeGetRelatesExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 505, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeGetRelatesExplicitReq = function() {
  return this.setRelationTypeGetRelatesExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeGetRelatesExplicitReq = function() {
  return jspb.Message.getField(this, 505) != null;
};


/**
 * optional RelationType.GetRelatesForRoleLabel.Req relation_type_get_relates_for_role_label_req = 501;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeGetRelatesForRoleLabelReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req, 501));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeGetRelatesForRoleLabelReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 501, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeGetRelatesForRoleLabelReq = function() {
  return this.setRelationTypeGetRelatesForRoleLabelReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeGetRelatesForRoleLabelReq = function() {
  return jspb.Message.getField(this, 501) != null;
};


/**
 * optional RelationType.GetRelatesOverridden.Req relation_type_get_relates_overridden_req = 506;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesOverridden.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeGetRelatesOverriddenReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesOverridden.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesOverridden.Req, 506));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesOverridden.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeGetRelatesOverriddenReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 506, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeGetRelatesOverriddenReq = function() {
  return this.setRelationTypeGetRelatesOverriddenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeGetRelatesOverriddenReq = function() {
  return jspb.Message.getField(this, 506) != null;
};


/**
 * optional RelationType.SetRelates.Req relation_type_set_relates_req = 503;
 * @return {?proto.typedb.protocol.RelationType.SetRelates.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeSetRelatesReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.SetRelates.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.SetRelates.Req, 503));
};


/**
 * @param {?proto.typedb.protocol.RelationType.SetRelates.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeSetRelatesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 503, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeSetRelatesReq = function() {
  return this.setRelationTypeSetRelatesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeSetRelatesReq = function() {
  return jspb.Message.getField(this, 503) != null;
};


/**
 * optional RelationType.UnsetRelates.Req relation_type_unset_relates_req = 504;
 * @return {?proto.typedb.protocol.RelationType.UnsetRelates.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getRelationTypeUnsetRelatesReq = function() {
  return /** @type{?proto.typedb.protocol.RelationType.UnsetRelates.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.UnsetRelates.Req, 504));
};


/**
 * @param {?proto.typedb.protocol.RelationType.UnsetRelates.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setRelationTypeUnsetRelatesReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 504, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearRelationTypeUnsetRelatesReq = function() {
  return this.setRelationTypeUnsetRelatesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasRelationTypeUnsetRelatesReq = function() {
  return jspb.Message.getField(this, 504) != null;
};


/**
 * optional AttributeType.Put.Req attribute_type_put_req = 600;
 * @return {?proto.typedb.protocol.AttributeType.Put.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypePutReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.Put.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.Put.Req, 600));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.Put.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypePutReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 600, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypePutReq = function() {
  return this.setAttributeTypePutReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypePutReq = function() {
  return jspb.Message.getField(this, 600) != null;
};


/**
 * optional AttributeType.Get.Req attribute_type_get_req = 601;
 * @return {?proto.typedb.protocol.AttributeType.Get.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypeGetReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.Get.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.Get.Req, 601));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.Get.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypeGetReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 601, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypeGetReq = function() {
  return this.setAttributeTypeGetReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypeGetReq = function() {
  return jspb.Message.getField(this, 601) != null;
};


/**
 * optional AttributeType.GetRegex.Req attribute_type_get_regex_req = 602;
 * @return {?proto.typedb.protocol.AttributeType.GetRegex.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypeGetRegexReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetRegex.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetRegex.Req, 602));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetRegex.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypeGetRegexReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 602, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypeGetRegexReq = function() {
  return this.setAttributeTypeGetRegexReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypeGetRegexReq = function() {
  return jspb.Message.getField(this, 602) != null;
};


/**
 * optional AttributeType.SetRegex.Req attribute_type_set_regex_req = 603;
 * @return {?proto.typedb.protocol.AttributeType.SetRegex.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypeSetRegexReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.SetRegex.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.SetRegex.Req, 603));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.SetRegex.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypeSetRegexReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 603, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypeSetRegexReq = function() {
  return this.setAttributeTypeSetRegexReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypeSetRegexReq = function() {
  return jspb.Message.getField(this, 603) != null;
};


/**
 * optional AttributeType.GetOwners.Req attribute_type_get_owners_req = 604;
 * @return {?proto.typedb.protocol.AttributeType.GetOwners.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypeGetOwnersReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetOwners.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetOwners.Req, 604));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetOwners.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypeGetOwnersReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 604, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypeGetOwnersReq = function() {
  return this.setAttributeTypeGetOwnersReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypeGetOwnersReq = function() {
  return jspb.Message.getField(this, 604) != null;
};


/**
 * optional AttributeType.GetOwnersExplicit.Req attribute_type_get_owners_explicit_req = 605;
 * @return {?proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req}
 */
proto.typedb.protocol.Type.Req.prototype.getAttributeTypeGetOwnersExplicitReq = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req, 605));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req|undefined} value
 * @return {!proto.typedb.protocol.Type.Req} returns this
*/
proto.typedb.protocol.Type.Req.prototype.setAttributeTypeGetOwnersExplicitReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 605, proto.typedb.protocol.Type.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Req} returns this
 */
proto.typedb.protocol.Type.Req.prototype.clearAttributeTypeGetOwnersExplicitReq = function() {
  return this.setAttributeTypeGetOwnersExplicitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Req.prototype.hasAttributeTypeGetOwnersExplicitReq = function() {
  return jspb.Message.getField(this, 605) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Type.Res.oneofGroups_ = [[100,101,102,103,104,300,301,306,302,303,307,304,305,400,500,501,504,502,503,600,601,602,603]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Type.Res.ResCase = {
  RES_NOT_SET: 0,
  TYPE_DELETE_RES: 100,
  TYPE_SET_LABEL_RES: 101,
  TYPE_IS_ABSTRACT_RES: 102,
  TYPE_GET_SUPERTYPE_RES: 103,
  TYPE_SET_SUPERTYPE_RES: 104,
  THING_TYPE_SET_ABSTRACT_RES: 300,
  THING_TYPE_UNSET_ABSTRACT_RES: 301,
  THING_TYPE_GET_OWNS_OVERRIDDEN_RES: 306,
  THING_TYPE_SET_OWNS_RES: 302,
  THING_TYPE_UNSET_OWNS_RES: 303,
  THING_TYPE_GET_PLAYS_OVERRIDDEN_RES: 307,
  THING_TYPE_SET_PLAYS_RES: 304,
  THING_TYPE_UNSET_PLAYS_RES: 305,
  ENTITY_TYPE_CREATE_RES: 400,
  RELATION_TYPE_CREATE_RES: 500,
  RELATION_TYPE_GET_RELATES_FOR_ROLE_LABEL_RES: 501,
  RELATION_TYPE_GET_RELATES_OVERRIDDEN_RES: 504,
  RELATION_TYPE_SET_RELATES_RES: 502,
  RELATION_TYPE_UNSET_RELATES_RES: 503,
  ATTRIBUTE_TYPE_PUT_RES: 600,
  ATTRIBUTE_TYPE_GET_RES: 601,
  ATTRIBUTE_TYPE_GET_REGEX_RES: 602,
  ATTRIBUTE_TYPE_SET_REGEX_RES: 603
};

/**
 * @return {proto.typedb.protocol.Type.Res.ResCase}
 */
proto.typedb.protocol.Type.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Type.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Type.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeDeleteRes: (f = msg.getTypeDeleteRes()) && proto.typedb.protocol.Type.Delete.Res.toObject(includeInstance, f),
    typeSetLabelRes: (f = msg.getTypeSetLabelRes()) && proto.typedb.protocol.Type.SetLabel.Res.toObject(includeInstance, f),
    typeIsAbstractRes: (f = msg.getTypeIsAbstractRes()) && proto.typedb.protocol.Type.IsAbstract.Res.toObject(includeInstance, f),
    typeGetSupertypeRes: (f = msg.getTypeGetSupertypeRes()) && proto.typedb.protocol.Type.GetSupertype.Res.toObject(includeInstance, f),
    typeSetSupertypeRes: (f = msg.getTypeSetSupertypeRes()) && proto.typedb.protocol.Type.SetSupertype.Res.toObject(includeInstance, f),
    thingTypeSetAbstractRes: (f = msg.getThingTypeSetAbstractRes()) && proto.typedb.protocol.ThingType.SetAbstract.Res.toObject(includeInstance, f),
    thingTypeUnsetAbstractRes: (f = msg.getThingTypeUnsetAbstractRes()) && proto.typedb.protocol.ThingType.UnsetAbstract.Res.toObject(includeInstance, f),
    thingTypeGetOwnsOverriddenRes: (f = msg.getThingTypeGetOwnsOverriddenRes()) && proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.toObject(includeInstance, f),
    thingTypeSetOwnsRes: (f = msg.getThingTypeSetOwnsRes()) && proto.typedb.protocol.ThingType.SetOwns.Res.toObject(includeInstance, f),
    thingTypeUnsetOwnsRes: (f = msg.getThingTypeUnsetOwnsRes()) && proto.typedb.protocol.ThingType.UnsetOwns.Res.toObject(includeInstance, f),
    thingTypeGetPlaysOverriddenRes: (f = msg.getThingTypeGetPlaysOverriddenRes()) && proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.toObject(includeInstance, f),
    thingTypeSetPlaysRes: (f = msg.getThingTypeSetPlaysRes()) && proto.typedb.protocol.ThingType.SetPlays.Res.toObject(includeInstance, f),
    thingTypeUnsetPlaysRes: (f = msg.getThingTypeUnsetPlaysRes()) && proto.typedb.protocol.ThingType.UnsetPlays.Res.toObject(includeInstance, f),
    entityTypeCreateRes: (f = msg.getEntityTypeCreateRes()) && proto.typedb.protocol.EntityType.Create.Res.toObject(includeInstance, f),
    relationTypeCreateRes: (f = msg.getRelationTypeCreateRes()) && proto.typedb.protocol.RelationType.Create.Res.toObject(includeInstance, f),
    relationTypeGetRelatesForRoleLabelRes: (f = msg.getRelationTypeGetRelatesForRoleLabelRes()) && proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.toObject(includeInstance, f),
    relationTypeGetRelatesOverriddenRes: (f = msg.getRelationTypeGetRelatesOverriddenRes()) && proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.toObject(includeInstance, f),
    relationTypeSetRelatesRes: (f = msg.getRelationTypeSetRelatesRes()) && proto.typedb.protocol.RelationType.SetRelates.Res.toObject(includeInstance, f),
    relationTypeUnsetRelatesRes: (f = msg.getRelationTypeUnsetRelatesRes()) && proto.typedb.protocol.RelationType.UnsetRelates.Res.toObject(includeInstance, f),
    attributeTypePutRes: (f = msg.getAttributeTypePutRes()) && proto.typedb.protocol.AttributeType.Put.Res.toObject(includeInstance, f),
    attributeTypeGetRes: (f = msg.getAttributeTypeGetRes()) && proto.typedb.protocol.AttributeType.Get.Res.toObject(includeInstance, f),
    attributeTypeGetRegexRes: (f = msg.getAttributeTypeGetRegexRes()) && proto.typedb.protocol.AttributeType.GetRegex.Res.toObject(includeInstance, f),
    attributeTypeSetRegexRes: (f = msg.getAttributeTypeSetRegexRes()) && proto.typedb.protocol.AttributeType.SetRegex.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.Res}
 */
proto.typedb.protocol.Type.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.Res;
  return proto.typedb.protocol.Type.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.Res}
 */
proto.typedb.protocol.Type.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.Type.Delete.Res;
      reader.readMessage(value,proto.typedb.protocol.Type.Delete.Res.deserializeBinaryFromReader);
      msg.setTypeDeleteRes(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Type.SetLabel.Res;
      reader.readMessage(value,proto.typedb.protocol.Type.SetLabel.Res.deserializeBinaryFromReader);
      msg.setTypeSetLabelRes(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Type.IsAbstract.Res;
      reader.readMessage(value,proto.typedb.protocol.Type.IsAbstract.Res.deserializeBinaryFromReader);
      msg.setTypeIsAbstractRes(value);
      break;
    case 103:
      var value = new proto.typedb.protocol.Type.GetSupertype.Res;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSupertype.Res.deserializeBinaryFromReader);
      msg.setTypeGetSupertypeRes(value);
      break;
    case 104:
      var value = new proto.typedb.protocol.Type.SetSupertype.Res;
      reader.readMessage(value,proto.typedb.protocol.Type.SetSupertype.Res.deserializeBinaryFromReader);
      msg.setTypeSetSupertypeRes(value);
      break;
    case 300:
      var value = new proto.typedb.protocol.ThingType.SetAbstract.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetAbstract.Res.deserializeBinaryFromReader);
      msg.setThingTypeSetAbstractRes(value);
      break;
    case 301:
      var value = new proto.typedb.protocol.ThingType.UnsetAbstract.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetAbstract.Res.deserializeBinaryFromReader);
      msg.setThingTypeUnsetAbstractRes(value);
      break;
    case 306:
      var value = new proto.typedb.protocol.ThingType.GetOwnsOverridden.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsOverriddenRes(value);
      break;
    case 302:
      var value = new proto.typedb.protocol.ThingType.SetOwns.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetOwns.Res.deserializeBinaryFromReader);
      msg.setThingTypeSetOwnsRes(value);
      break;
    case 303:
      var value = new proto.typedb.protocol.ThingType.UnsetOwns.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetOwns.Res.deserializeBinaryFromReader);
      msg.setThingTypeUnsetOwnsRes(value);
      break;
    case 307:
      var value = new proto.typedb.protocol.ThingType.GetPlaysOverridden.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysOverriddenRes(value);
      break;
    case 304:
      var value = new proto.typedb.protocol.ThingType.SetPlays.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.SetPlays.Res.deserializeBinaryFromReader);
      msg.setThingTypeSetPlaysRes(value);
      break;
    case 305:
      var value = new proto.typedb.protocol.ThingType.UnsetPlays.Res;
      reader.readMessage(value,proto.typedb.protocol.ThingType.UnsetPlays.Res.deserializeBinaryFromReader);
      msg.setThingTypeUnsetPlaysRes(value);
      break;
    case 400:
      var value = new proto.typedb.protocol.EntityType.Create.Res;
      reader.readMessage(value,proto.typedb.protocol.EntityType.Create.Res.deserializeBinaryFromReader);
      msg.setEntityTypeCreateRes(value);
      break;
    case 500:
      var value = new proto.typedb.protocol.RelationType.Create.Res;
      reader.readMessage(value,proto.typedb.protocol.RelationType.Create.Res.deserializeBinaryFromReader);
      msg.setRelationTypeCreateRes(value);
      break;
    case 501:
      var value = new proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesForRoleLabelRes(value);
      break;
    case 504:
      var value = new proto.typedb.protocol.RelationType.GetRelatesOverridden.Res;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesOverriddenRes(value);
      break;
    case 502:
      var value = new proto.typedb.protocol.RelationType.SetRelates.Res;
      reader.readMessage(value,proto.typedb.protocol.RelationType.SetRelates.Res.deserializeBinaryFromReader);
      msg.setRelationTypeSetRelatesRes(value);
      break;
    case 503:
      var value = new proto.typedb.protocol.RelationType.UnsetRelates.Res;
      reader.readMessage(value,proto.typedb.protocol.RelationType.UnsetRelates.Res.deserializeBinaryFromReader);
      msg.setRelationTypeUnsetRelatesRes(value);
      break;
    case 600:
      var value = new proto.typedb.protocol.AttributeType.Put.Res;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.Put.Res.deserializeBinaryFromReader);
      msg.setAttributeTypePutRes(value);
      break;
    case 601:
      var value = new proto.typedb.protocol.AttributeType.Get.Res;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.Get.Res.deserializeBinaryFromReader);
      msg.setAttributeTypeGetRes(value);
      break;
    case 602:
      var value = new proto.typedb.protocol.AttributeType.GetRegex.Res;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetRegex.Res.deserializeBinaryFromReader);
      msg.setAttributeTypeGetRegexRes(value);
      break;
    case 603:
      var value = new proto.typedb.protocol.AttributeType.SetRegex.Res;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.SetRegex.Res.deserializeBinaryFromReader);
      msg.setAttributeTypeSetRegexRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeDeleteRes();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Type.Delete.Res.serializeBinaryToWriter
    );
  }
  f = message.getTypeSetLabelRes();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Type.SetLabel.Res.serializeBinaryToWriter
    );
  }
  f = message.getTypeIsAbstractRes();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Type.IsAbstract.Res.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSupertypeRes();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.typedb.protocol.Type.GetSupertype.Res.serializeBinaryToWriter
    );
  }
  f = message.getTypeSetSupertypeRes();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.typedb.protocol.Type.SetSupertype.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetAbstractRes();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.typedb.protocol.ThingType.SetAbstract.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetAbstractRes();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.typedb.protocol.ThingType.UnsetAbstract.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsOverriddenRes();
  if (f != null) {
    writer.writeMessage(
      306,
      f,
      proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetOwnsRes();
  if (f != null) {
    writer.writeMessage(
      302,
      f,
      proto.typedb.protocol.ThingType.SetOwns.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetOwnsRes();
  if (f != null) {
    writer.writeMessage(
      303,
      f,
      proto.typedb.protocol.ThingType.UnsetOwns.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysOverriddenRes();
  if (f != null) {
    writer.writeMessage(
      307,
      f,
      proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeSetPlaysRes();
  if (f != null) {
    writer.writeMessage(
      304,
      f,
      proto.typedb.protocol.ThingType.SetPlays.Res.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeUnsetPlaysRes();
  if (f != null) {
    writer.writeMessage(
      305,
      f,
      proto.typedb.protocol.ThingType.UnsetPlays.Res.serializeBinaryToWriter
    );
  }
  f = message.getEntityTypeCreateRes();
  if (f != null) {
    writer.writeMessage(
      400,
      f,
      proto.typedb.protocol.EntityType.Create.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeCreateRes();
  if (f != null) {
    writer.writeMessage(
      500,
      f,
      proto.typedb.protocol.RelationType.Create.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesForRoleLabelRes();
  if (f != null) {
    writer.writeMessage(
      501,
      f,
      proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesOverriddenRes();
  if (f != null) {
    writer.writeMessage(
      504,
      f,
      proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeSetRelatesRes();
  if (f != null) {
    writer.writeMessage(
      502,
      f,
      proto.typedb.protocol.RelationType.SetRelates.Res.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeUnsetRelatesRes();
  if (f != null) {
    writer.writeMessage(
      503,
      f,
      proto.typedb.protocol.RelationType.UnsetRelates.Res.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypePutRes();
  if (f != null) {
    writer.writeMessage(
      600,
      f,
      proto.typedb.protocol.AttributeType.Put.Res.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetRes();
  if (f != null) {
    writer.writeMessage(
      601,
      f,
      proto.typedb.protocol.AttributeType.Get.Res.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetRegexRes();
  if (f != null) {
    writer.writeMessage(
      602,
      f,
      proto.typedb.protocol.AttributeType.GetRegex.Res.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeSetRegexRes();
  if (f != null) {
    writer.writeMessage(
      603,
      f,
      proto.typedb.protocol.AttributeType.SetRegex.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Delete.Res type_delete_res = 100;
 * @return {?proto.typedb.protocol.Type.Delete.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getTypeDeleteRes = function() {
  return /** @type{?proto.typedb.protocol.Type.Delete.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.Delete.Res, 100));
};


/**
 * @param {?proto.typedb.protocol.Type.Delete.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setTypeDeleteRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearTypeDeleteRes = function() {
  return this.setTypeDeleteRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasTypeDeleteRes = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional SetLabel.Res type_set_label_res = 101;
 * @return {?proto.typedb.protocol.Type.SetLabel.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getTypeSetLabelRes = function() {
  return /** @type{?proto.typedb.protocol.Type.SetLabel.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.SetLabel.Res, 101));
};


/**
 * @param {?proto.typedb.protocol.Type.SetLabel.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setTypeSetLabelRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearTypeSetLabelRes = function() {
  return this.setTypeSetLabelRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasTypeSetLabelRes = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional IsAbstract.Res type_is_abstract_res = 102;
 * @return {?proto.typedb.protocol.Type.IsAbstract.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getTypeIsAbstractRes = function() {
  return /** @type{?proto.typedb.protocol.Type.IsAbstract.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.IsAbstract.Res, 102));
};


/**
 * @param {?proto.typedb.protocol.Type.IsAbstract.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setTypeIsAbstractRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearTypeIsAbstractRes = function() {
  return this.setTypeIsAbstractRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasTypeIsAbstractRes = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional GetSupertype.Res type_get_supertype_res = 103;
 * @return {?proto.typedb.protocol.Type.GetSupertype.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getTypeGetSupertypeRes = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSupertype.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSupertype.Res, 103));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSupertype.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setTypeGetSupertypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearTypeGetSupertypeRes = function() {
  return this.setTypeGetSupertypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasTypeGetSupertypeRes = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional SetSupertype.Res type_set_supertype_res = 104;
 * @return {?proto.typedb.protocol.Type.SetSupertype.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getTypeSetSupertypeRes = function() {
  return /** @type{?proto.typedb.protocol.Type.SetSupertype.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.SetSupertype.Res, 104));
};


/**
 * @param {?proto.typedb.protocol.Type.SetSupertype.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setTypeSetSupertypeRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearTypeSetSupertypeRes = function() {
  return this.setTypeSetSupertypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasTypeSetSupertypeRes = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ThingType.SetAbstract.Res thing_type_set_abstract_res = 300;
 * @return {?proto.typedb.protocol.ThingType.SetAbstract.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeSetAbstractRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetAbstract.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetAbstract.Res, 300));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetAbstract.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeSetAbstractRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 300, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeSetAbstractRes = function() {
  return this.setThingTypeSetAbstractRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeSetAbstractRes = function() {
  return jspb.Message.getField(this, 300) != null;
};


/**
 * optional ThingType.UnsetAbstract.Res thing_type_unset_abstract_res = 301;
 * @return {?proto.typedb.protocol.ThingType.UnsetAbstract.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeUnsetAbstractRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetAbstract.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetAbstract.Res, 301));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetAbstract.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeUnsetAbstractRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 301, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeUnsetAbstractRes = function() {
  return this.setThingTypeUnsetAbstractRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeUnsetAbstractRes = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional ThingType.GetOwnsOverridden.Res thing_type_get_owns_overridden_res = 306;
 * @return {?proto.typedb.protocol.ThingType.GetOwnsOverridden.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeGetOwnsOverriddenRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwnsOverridden.Res, 306));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwnsOverridden.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeGetOwnsOverriddenRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 306, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeGetOwnsOverriddenRes = function() {
  return this.setThingTypeGetOwnsOverriddenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeGetOwnsOverriddenRes = function() {
  return jspb.Message.getField(this, 306) != null;
};


/**
 * optional ThingType.SetOwns.Res thing_type_set_owns_res = 302;
 * @return {?proto.typedb.protocol.ThingType.SetOwns.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeSetOwnsRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetOwns.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetOwns.Res, 302));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetOwns.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeSetOwnsRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 302, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeSetOwnsRes = function() {
  return this.setThingTypeSetOwnsRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeSetOwnsRes = function() {
  return jspb.Message.getField(this, 302) != null;
};


/**
 * optional ThingType.UnsetOwns.Res thing_type_unset_owns_res = 303;
 * @return {?proto.typedb.protocol.ThingType.UnsetOwns.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeUnsetOwnsRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetOwns.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetOwns.Res, 303));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetOwns.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeUnsetOwnsRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 303, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeUnsetOwnsRes = function() {
  return this.setThingTypeUnsetOwnsRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeUnsetOwnsRes = function() {
  return jspb.Message.getField(this, 303) != null;
};


/**
 * optional ThingType.GetPlaysOverridden.Res thing_type_get_plays_overridden_res = 307;
 * @return {?proto.typedb.protocol.ThingType.GetPlaysOverridden.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeGetPlaysOverriddenRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlaysOverridden.Res, 307));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlaysOverridden.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeGetPlaysOverriddenRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 307, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeGetPlaysOverriddenRes = function() {
  return this.setThingTypeGetPlaysOverriddenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeGetPlaysOverriddenRes = function() {
  return jspb.Message.getField(this, 307) != null;
};


/**
 * optional ThingType.SetPlays.Res thing_type_set_plays_res = 304;
 * @return {?proto.typedb.protocol.ThingType.SetPlays.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeSetPlaysRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.SetPlays.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.SetPlays.Res, 304));
};


/**
 * @param {?proto.typedb.protocol.ThingType.SetPlays.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeSetPlaysRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 304, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeSetPlaysRes = function() {
  return this.setThingTypeSetPlaysRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeSetPlaysRes = function() {
  return jspb.Message.getField(this, 304) != null;
};


/**
 * optional ThingType.UnsetPlays.Res thing_type_unset_plays_res = 305;
 * @return {?proto.typedb.protocol.ThingType.UnsetPlays.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getThingTypeUnsetPlaysRes = function() {
  return /** @type{?proto.typedb.protocol.ThingType.UnsetPlays.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.UnsetPlays.Res, 305));
};


/**
 * @param {?proto.typedb.protocol.ThingType.UnsetPlays.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setThingTypeUnsetPlaysRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 305, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearThingTypeUnsetPlaysRes = function() {
  return this.setThingTypeUnsetPlaysRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasThingTypeUnsetPlaysRes = function() {
  return jspb.Message.getField(this, 305) != null;
};


/**
 * optional EntityType.Create.Res entity_type_create_res = 400;
 * @return {?proto.typedb.protocol.EntityType.Create.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getEntityTypeCreateRes = function() {
  return /** @type{?proto.typedb.protocol.EntityType.Create.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.EntityType.Create.Res, 400));
};


/**
 * @param {?proto.typedb.protocol.EntityType.Create.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setEntityTypeCreateRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 400, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearEntityTypeCreateRes = function() {
  return this.setEntityTypeCreateRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasEntityTypeCreateRes = function() {
  return jspb.Message.getField(this, 400) != null;
};


/**
 * optional RelationType.Create.Res relation_type_create_res = 500;
 * @return {?proto.typedb.protocol.RelationType.Create.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getRelationTypeCreateRes = function() {
  return /** @type{?proto.typedb.protocol.RelationType.Create.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.Create.Res, 500));
};


/**
 * @param {?proto.typedb.protocol.RelationType.Create.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setRelationTypeCreateRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 500, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearRelationTypeCreateRes = function() {
  return this.setRelationTypeCreateRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasRelationTypeCreateRes = function() {
  return jspb.Message.getField(this, 500) != null;
};


/**
 * optional RelationType.GetRelatesForRoleLabel.Res relation_type_get_relates_for_role_label_res = 501;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getRelationTypeGetRelatesForRoleLabelRes = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res, 501));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setRelationTypeGetRelatesForRoleLabelRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 501, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearRelationTypeGetRelatesForRoleLabelRes = function() {
  return this.setRelationTypeGetRelatesForRoleLabelRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasRelationTypeGetRelatesForRoleLabelRes = function() {
  return jspb.Message.getField(this, 501) != null;
};


/**
 * optional RelationType.GetRelatesOverridden.Res relation_type_get_relates_overridden_res = 504;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesOverridden.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getRelationTypeGetRelatesOverriddenRes = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesOverridden.Res, 504));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesOverridden.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setRelationTypeGetRelatesOverriddenRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 504, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearRelationTypeGetRelatesOverriddenRes = function() {
  return this.setRelationTypeGetRelatesOverriddenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasRelationTypeGetRelatesOverriddenRes = function() {
  return jspb.Message.getField(this, 504) != null;
};


/**
 * optional RelationType.SetRelates.Res relation_type_set_relates_res = 502;
 * @return {?proto.typedb.protocol.RelationType.SetRelates.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getRelationTypeSetRelatesRes = function() {
  return /** @type{?proto.typedb.protocol.RelationType.SetRelates.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.SetRelates.Res, 502));
};


/**
 * @param {?proto.typedb.protocol.RelationType.SetRelates.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setRelationTypeSetRelatesRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 502, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearRelationTypeSetRelatesRes = function() {
  return this.setRelationTypeSetRelatesRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasRelationTypeSetRelatesRes = function() {
  return jspb.Message.getField(this, 502) != null;
};


/**
 * optional RelationType.UnsetRelates.Res relation_type_unset_relates_res = 503;
 * @return {?proto.typedb.protocol.RelationType.UnsetRelates.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getRelationTypeUnsetRelatesRes = function() {
  return /** @type{?proto.typedb.protocol.RelationType.UnsetRelates.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.UnsetRelates.Res, 503));
};


/**
 * @param {?proto.typedb.protocol.RelationType.UnsetRelates.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setRelationTypeUnsetRelatesRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 503, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearRelationTypeUnsetRelatesRes = function() {
  return this.setRelationTypeUnsetRelatesRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasRelationTypeUnsetRelatesRes = function() {
  return jspb.Message.getField(this, 503) != null;
};


/**
 * optional AttributeType.Put.Res attribute_type_put_res = 600;
 * @return {?proto.typedb.protocol.AttributeType.Put.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getAttributeTypePutRes = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.Put.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.Put.Res, 600));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.Put.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setAttributeTypePutRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 600, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearAttributeTypePutRes = function() {
  return this.setAttributeTypePutRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasAttributeTypePutRes = function() {
  return jspb.Message.getField(this, 600) != null;
};


/**
 * optional AttributeType.Get.Res attribute_type_get_res = 601;
 * @return {?proto.typedb.protocol.AttributeType.Get.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getAttributeTypeGetRes = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.Get.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.Get.Res, 601));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.Get.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setAttributeTypeGetRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 601, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearAttributeTypeGetRes = function() {
  return this.setAttributeTypeGetRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasAttributeTypeGetRes = function() {
  return jspb.Message.getField(this, 601) != null;
};


/**
 * optional AttributeType.GetRegex.Res attribute_type_get_regex_res = 602;
 * @return {?proto.typedb.protocol.AttributeType.GetRegex.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getAttributeTypeGetRegexRes = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetRegex.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetRegex.Res, 602));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetRegex.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setAttributeTypeGetRegexRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 602, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearAttributeTypeGetRegexRes = function() {
  return this.setAttributeTypeGetRegexRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasAttributeTypeGetRegexRes = function() {
  return jspb.Message.getField(this, 602) != null;
};


/**
 * optional AttributeType.SetRegex.Res attribute_type_set_regex_res = 603;
 * @return {?proto.typedb.protocol.AttributeType.SetRegex.Res}
 */
proto.typedb.protocol.Type.Res.prototype.getAttributeTypeSetRegexRes = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.SetRegex.Res} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.SetRegex.Res, 603));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.SetRegex.Res|undefined} value
 * @return {!proto.typedb.protocol.Type.Res} returns this
*/
proto.typedb.protocol.Type.Res.prototype.setAttributeTypeSetRegexRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 603, proto.typedb.protocol.Type.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.Res} returns this
 */
proto.typedb.protocol.Type.Res.prototype.clearAttributeTypeSetRegexRes = function() {
  return this.setAttributeTypeSetRegexRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.Res.prototype.hasAttributeTypeSetRegexRes = function() {
  return jspb.Message.getField(this, 603) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Type.ResPart.oneofGroups_ = [[100,101,102,200,201,300,303,301,304,302,305,500,501,600,601]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Type.ResPart.ResCase = {
  RES_NOT_SET: 0,
  TYPE_GET_SUPERTYPES_RES_PART: 100,
  TYPE_GET_SUBTYPES_RES_PART: 101,
  TYPE_GET_SUBTYPES_EXPLICIT_RES_PART: 102,
  ROLE_TYPE_GET_RELATION_TYPES_RES_PART: 200,
  ROLE_TYPE_GET_PLAYERS_RES_PART: 201,
  THING_TYPE_GET_INSTANCES_RES_PART: 300,
  THING_TYPE_GET_INSTANCES_EXPLICIT_RES_PART: 303,
  THING_TYPE_GET_OWNS_RES_PART: 301,
  THING_TYPE_GET_OWNS_EXPLICIT_RES_PART: 304,
  THING_TYPE_GET_PLAYS_RES_PART: 302,
  THING_TYPE_GET_PLAYS_EXPLICIT_RES_PART: 305,
  RELATION_TYPE_GET_RELATES_RES_PART: 500,
  RELATION_TYPE_GET_RELATES_EXPLICIT_RES_PART: 501,
  ATTRIBUTE_TYPE_GET_OWNERS_RES_PART: 600,
  ATTRIBUTE_TYPE_GET_OWNERS_EXPLICIT_RES_PART: 601
};

/**
 * @return {proto.typedb.protocol.Type.ResPart.ResCase}
 */
proto.typedb.protocol.Type.ResPart.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Type.ResPart.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Type.ResPart.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeGetSupertypesResPart: (f = msg.getTypeGetSupertypesResPart()) && proto.typedb.protocol.Type.GetSupertypes.ResPart.toObject(includeInstance, f),
    typeGetSubtypesResPart: (f = msg.getTypeGetSubtypesResPart()) && proto.typedb.protocol.Type.GetSubtypes.ResPart.toObject(includeInstance, f),
    typeGetSubtypesExplicitResPart: (f = msg.getTypeGetSubtypesExplicitResPart()) && proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.toObject(includeInstance, f),
    roleTypeGetRelationTypesResPart: (f = msg.getRoleTypeGetRelationTypesResPart()) && proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.toObject(includeInstance, f),
    roleTypeGetPlayersResPart: (f = msg.getRoleTypeGetPlayersResPart()) && proto.typedb.protocol.RoleType.GetPlayers.ResPart.toObject(includeInstance, f),
    thingTypeGetInstancesResPart: (f = msg.getThingTypeGetInstancesResPart()) && proto.typedb.protocol.ThingType.GetInstances.ResPart.toObject(includeInstance, f),
    thingTypeGetInstancesExplicitResPart: (f = msg.getThingTypeGetInstancesExplicitResPart()) && proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.toObject(includeInstance, f),
    thingTypeGetOwnsResPart: (f = msg.getThingTypeGetOwnsResPart()) && proto.typedb.protocol.ThingType.GetOwns.ResPart.toObject(includeInstance, f),
    thingTypeGetOwnsExplicitResPart: (f = msg.getThingTypeGetOwnsExplicitResPart()) && proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.toObject(includeInstance, f),
    thingTypeGetPlaysResPart: (f = msg.getThingTypeGetPlaysResPart()) && proto.typedb.protocol.ThingType.GetPlays.ResPart.toObject(includeInstance, f),
    thingTypeGetPlaysExplicitResPart: (f = msg.getThingTypeGetPlaysExplicitResPart()) && proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.toObject(includeInstance, f),
    relationTypeGetRelatesResPart: (f = msg.getRelationTypeGetRelatesResPart()) && proto.typedb.protocol.RelationType.GetRelates.ResPart.toObject(includeInstance, f),
    relationTypeGetRelatesExplicitResPart: (f = msg.getRelationTypeGetRelatesExplicitResPart()) && proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.toObject(includeInstance, f),
    attributeTypeGetOwnersResPart: (f = msg.getAttributeTypeGetOwnersResPart()) && proto.typedb.protocol.AttributeType.GetOwners.ResPart.toObject(includeInstance, f),
    attributeTypeGetOwnersExplicitResPart: (f = msg.getAttributeTypeGetOwnersExplicitResPart()) && proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.ResPart}
 */
proto.typedb.protocol.Type.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.ResPart;
  return proto.typedb.protocol.Type.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.ResPart}
 */
proto.typedb.protocol.Type.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.typedb.protocol.Type.GetSupertypes.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSupertypes.ResPart.deserializeBinaryFromReader);
      msg.setTypeGetSupertypesResPart(value);
      break;
    case 101:
      var value = new proto.typedb.protocol.Type.GetSubtypes.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSubtypes.ResPart.deserializeBinaryFromReader);
      msg.setTypeGetSubtypesResPart(value);
      break;
    case 102:
      var value = new proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.deserializeBinaryFromReader);
      msg.setTypeGetSubtypesExplicitResPart(value);
      break;
    case 200:
      var value = new proto.typedb.protocol.RoleType.GetRelationTypes.ResPart;
      reader.readMessage(value,proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.deserializeBinaryFromReader);
      msg.setRoleTypeGetRelationTypesResPart(value);
      break;
    case 201:
      var value = new proto.typedb.protocol.RoleType.GetPlayers.ResPart;
      reader.readMessage(value,proto.typedb.protocol.RoleType.GetPlayers.ResPart.deserializeBinaryFromReader);
      msg.setRoleTypeGetPlayersResPart(value);
      break;
    case 300:
      var value = new proto.typedb.protocol.ThingType.GetInstances.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetInstances.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetInstancesResPart(value);
      break;
    case 303:
      var value = new proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetInstancesExplicitResPart(value);
      break;
    case 301:
      var value = new proto.typedb.protocol.ThingType.GetOwns.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwns.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsResPart(value);
      break;
    case 304:
      var value = new proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetOwnsExplicitResPart(value);
      break;
    case 302:
      var value = new proto.typedb.protocol.ThingType.GetPlays.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlays.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysResPart(value);
      break;
    case 305:
      var value = new proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.deserializeBinaryFromReader);
      msg.setThingTypeGetPlaysExplicitResPart(value);
      break;
    case 500:
      var value = new proto.typedb.protocol.RelationType.GetRelates.ResPart;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelates.ResPart.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesResPart(value);
      break;
    case 501:
      var value = new proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.deserializeBinaryFromReader);
      msg.setRelationTypeGetRelatesExplicitResPart(value);
      break;
    case 600:
      var value = new proto.typedb.protocol.AttributeType.GetOwners.ResPart;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetOwners.ResPart.deserializeBinaryFromReader);
      msg.setAttributeTypeGetOwnersResPart(value);
      break;
    case 601:
      var value = new proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart;
      reader.readMessage(value,proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.deserializeBinaryFromReader);
      msg.setAttributeTypeGetOwnersExplicitResPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeGetSupertypesResPart();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.typedb.protocol.Type.GetSupertypes.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSubtypesResPart();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.typedb.protocol.Type.GetSubtypes.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getTypeGetSubtypesExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRoleTypeGetRelationTypesResPart();
  if (f != null) {
    writer.writeMessage(
      200,
      f,
      proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRoleTypeGetPlayersResPart();
  if (f != null) {
    writer.writeMessage(
      201,
      f,
      proto.typedb.protocol.RoleType.GetPlayers.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetInstancesResPart();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.typedb.protocol.ThingType.GetInstances.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetInstancesExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      303,
      f,
      proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsResPart();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.typedb.protocol.ThingType.GetOwns.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetOwnsExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      304,
      f,
      proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysResPart();
  if (f != null) {
    writer.writeMessage(
      302,
      f,
      proto.typedb.protocol.ThingType.GetPlays.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getThingTypeGetPlaysExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      305,
      f,
      proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesResPart();
  if (f != null) {
    writer.writeMessage(
      500,
      f,
      proto.typedb.protocol.RelationType.GetRelates.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getRelationTypeGetRelatesExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      501,
      f,
      proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetOwnersResPart();
  if (f != null) {
    writer.writeMessage(
      600,
      f,
      proto.typedb.protocol.AttributeType.GetOwners.ResPart.serializeBinaryToWriter
    );
  }
  f = message.getAttributeTypeGetOwnersExplicitResPart();
  if (f != null) {
    writer.writeMessage(
      601,
      f,
      proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.serializeBinaryToWriter
    );
  }
};


/**
 * optional GetSupertypes.ResPart type_get_supertypes_res_part = 100;
 * @return {?proto.typedb.protocol.Type.GetSupertypes.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getTypeGetSupertypesResPart = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSupertypes.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSupertypes.ResPart, 100));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSupertypes.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setTypeGetSupertypesResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 100, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearTypeGetSupertypesResPart = function() {
  return this.setTypeGetSupertypesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasTypeGetSupertypesResPart = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional GetSubtypes.ResPart type_get_subtypes_res_part = 101;
 * @return {?proto.typedb.protocol.Type.GetSubtypes.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getTypeGetSubtypesResPart = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSubtypes.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSubtypes.ResPart, 101));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSubtypes.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setTypeGetSubtypesResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearTypeGetSubtypesResPart = function() {
  return this.setTypeGetSubtypesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasTypeGetSubtypesResPart = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional GetSubtypesExplicit.ResPart type_get_subtypes_explicit_res_part = 102;
 * @return {?proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getTypeGetSubtypesExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart, 102));
};


/**
 * @param {?proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setTypeGetSubtypesExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearTypeGetSubtypesExplicitResPart = function() {
  return this.setTypeGetSubtypesExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasTypeGetSubtypesExplicitResPart = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional RoleType.GetRelationTypes.ResPart role_type_get_relation_types_res_part = 200;
 * @return {?proto.typedb.protocol.RoleType.GetRelationTypes.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getRoleTypeGetRelationTypesResPart = function() {
  return /** @type{?proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RoleType.GetRelationTypes.ResPart, 200));
};


/**
 * @param {?proto.typedb.protocol.RoleType.GetRelationTypes.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setRoleTypeGetRelationTypesResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 200, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearRoleTypeGetRelationTypesResPart = function() {
  return this.setRoleTypeGetRelationTypesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasRoleTypeGetRelationTypesResPart = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional RoleType.GetPlayers.ResPart role_type_get_players_res_part = 201;
 * @return {?proto.typedb.protocol.RoleType.GetPlayers.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getRoleTypeGetPlayersResPart = function() {
  return /** @type{?proto.typedb.protocol.RoleType.GetPlayers.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RoleType.GetPlayers.ResPart, 201));
};


/**
 * @param {?proto.typedb.protocol.RoleType.GetPlayers.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setRoleTypeGetPlayersResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 201, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearRoleTypeGetPlayersResPart = function() {
  return this.setRoleTypeGetPlayersResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasRoleTypeGetPlayersResPart = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional ThingType.GetInstances.ResPart thing_type_get_instances_res_part = 300;
 * @return {?proto.typedb.protocol.ThingType.GetInstances.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetInstancesResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetInstances.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetInstances.ResPart, 300));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetInstances.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetInstancesResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 300, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetInstancesResPart = function() {
  return this.setThingTypeGetInstancesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetInstancesResPart = function() {
  return jspb.Message.getField(this, 300) != null;
};


/**
 * optional ThingType.GetInstancesExplicit.ResPart thing_type_get_instances_explicit_res_part = 303;
 * @return {?proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetInstancesExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart, 303));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetInstancesExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 303, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetInstancesExplicitResPart = function() {
  return this.setThingTypeGetInstancesExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetInstancesExplicitResPart = function() {
  return jspb.Message.getField(this, 303) != null;
};


/**
 * optional ThingType.GetOwns.ResPart thing_type_get_owns_res_part = 301;
 * @return {?proto.typedb.protocol.ThingType.GetOwns.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetOwnsResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwns.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwns.ResPart, 301));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwns.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetOwnsResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 301, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetOwnsResPart = function() {
  return this.setThingTypeGetOwnsResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetOwnsResPart = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional ThingType.GetOwnsExplicit.ResPart thing_type_get_owns_explicit_res_part = 304;
 * @return {?proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetOwnsExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart, 304));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetOwnsExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 304, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetOwnsExplicitResPart = function() {
  return this.setThingTypeGetOwnsExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetOwnsExplicitResPart = function() {
  return jspb.Message.getField(this, 304) != null;
};


/**
 * optional ThingType.GetPlays.ResPart thing_type_get_plays_res_part = 302;
 * @return {?proto.typedb.protocol.ThingType.GetPlays.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetPlaysResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlays.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlays.ResPart, 302));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlays.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetPlaysResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 302, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetPlaysResPart = function() {
  return this.setThingTypeGetPlaysResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetPlaysResPart = function() {
  return jspb.Message.getField(this, 302) != null;
};


/**
 * optional ThingType.GetPlaysExplicit.ResPart thing_type_get_plays_explicit_res_part = 305;
 * @return {?proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getThingTypeGetPlaysExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart, 305));
};


/**
 * @param {?proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setThingTypeGetPlaysExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 305, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearThingTypeGetPlaysExplicitResPart = function() {
  return this.setThingTypeGetPlaysExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasThingTypeGetPlaysExplicitResPart = function() {
  return jspb.Message.getField(this, 305) != null;
};


/**
 * optional RelationType.GetRelates.ResPart relation_type_get_relates_res_part = 500;
 * @return {?proto.typedb.protocol.RelationType.GetRelates.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getRelationTypeGetRelatesResPart = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelates.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelates.ResPart, 500));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelates.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setRelationTypeGetRelatesResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 500, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearRelationTypeGetRelatesResPart = function() {
  return this.setRelationTypeGetRelatesResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasRelationTypeGetRelatesResPart = function() {
  return jspb.Message.getField(this, 500) != null;
};


/**
 * optional RelationType.GetRelatesExplicit.ResPart relation_type_get_relates_explicit_res_part = 501;
 * @return {?proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getRelationTypeGetRelatesExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart, 501));
};


/**
 * @param {?proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setRelationTypeGetRelatesExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 501, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearRelationTypeGetRelatesExplicitResPart = function() {
  return this.setRelationTypeGetRelatesExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasRelationTypeGetRelatesExplicitResPart = function() {
  return jspb.Message.getField(this, 501) != null;
};


/**
 * optional AttributeType.GetOwners.ResPart attribute_type_get_owners_res_part = 600;
 * @return {?proto.typedb.protocol.AttributeType.GetOwners.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getAttributeTypeGetOwnersResPart = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetOwners.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetOwners.ResPart, 600));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetOwners.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setAttributeTypeGetOwnersResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 600, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearAttributeTypeGetOwnersResPart = function() {
  return this.setAttributeTypeGetOwnersResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasAttributeTypeGetOwnersResPart = function() {
  return jspb.Message.getField(this, 600) != null;
};


/**
 * optional AttributeType.GetOwnersExplicit.ResPart attribute_type_get_owners_explicit_res_part = 601;
 * @return {?proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart}
 */
proto.typedb.protocol.Type.ResPart.prototype.getAttributeTypeGetOwnersExplicitResPart = function() {
  return /** @type{?proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart, 601));
};


/**
 * @param {?proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart|undefined} value
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
*/
proto.typedb.protocol.Type.ResPart.prototype.setAttributeTypeGetOwnersExplicitResPart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 601, proto.typedb.protocol.Type.ResPart.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.ResPart} returns this
 */
proto.typedb.protocol.Type.ResPart.prototype.clearAttributeTypeGetOwnersExplicitResPart = function() {
  return this.setAttributeTypeGetOwnersExplicitResPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.ResPart.prototype.hasAttributeTypeGetOwnersExplicitResPart = function() {
  return jspb.Message.getField(this, 601) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.Delete.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.Delete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.Delete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.Delete}
 */
proto.typedb.protocol.Type.Delete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.Delete;
  return proto.typedb.protocol.Type.Delete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.Delete}
 */
proto.typedb.protocol.Type.Delete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.Delete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.Delete.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.Delete.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.Delete.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.Delete.Req}
 */
proto.typedb.protocol.Type.Delete.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.Delete.Req;
  return proto.typedb.protocol.Type.Delete.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.Delete.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.Delete.Req}
 */
proto.typedb.protocol.Type.Delete.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.Delete.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.Delete.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.Delete.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.Delete.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.Delete.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.Delete.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.Delete.Res}
 */
proto.typedb.protocol.Type.Delete.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.Delete.Res;
  return proto.typedb.protocol.Type.Delete.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.Delete.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.Delete.Res}
 */
proto.typedb.protocol.Type.Delete.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.Delete.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.Delete.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.Delete.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.Delete.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetLabel.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetLabel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetLabel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetLabel}
 */
proto.typedb.protocol.Type.SetLabel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetLabel;
  return proto.typedb.protocol.Type.SetLabel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetLabel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetLabel}
 */
proto.typedb.protocol.Type.SetLabel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetLabel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetLabel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetLabel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetLabel.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetLabel.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetLabel.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetLabel.Req}
 */
proto.typedb.protocol.Type.SetLabel.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetLabel.Req;
  return proto.typedb.protocol.Type.SetLabel.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetLabel.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetLabel.Req}
 */
proto.typedb.protocol.Type.SetLabel.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetLabel.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetLabel.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetLabel.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Type.SetLabel.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Type.SetLabel.Req} returns this
 */
proto.typedb.protocol.Type.SetLabel.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetLabel.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetLabel.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetLabel.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetLabel.Res}
 */
proto.typedb.protocol.Type.SetLabel.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetLabel.Res;
  return proto.typedb.protocol.Type.SetLabel.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetLabel.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetLabel.Res}
 */
proto.typedb.protocol.Type.SetLabel.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetLabel.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetLabel.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetLabel.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetLabel.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.IsAbstract.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.IsAbstract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.IsAbstract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.IsAbstract}
 */
proto.typedb.protocol.Type.IsAbstract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.IsAbstract;
  return proto.typedb.protocol.Type.IsAbstract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.IsAbstract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.IsAbstract}
 */
proto.typedb.protocol.Type.IsAbstract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.IsAbstract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.IsAbstract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.IsAbstract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.IsAbstract.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.IsAbstract.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.IsAbstract.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.IsAbstract.Req}
 */
proto.typedb.protocol.Type.IsAbstract.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.IsAbstract.Req;
  return proto.typedb.protocol.Type.IsAbstract.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.IsAbstract.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.IsAbstract.Req}
 */
proto.typedb.protocol.Type.IsAbstract.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.IsAbstract.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.IsAbstract.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.IsAbstract.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.IsAbstract.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.IsAbstract.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.IsAbstract.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_abstract: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.IsAbstract.Res}
 */
proto.typedb.protocol.Type.IsAbstract.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.IsAbstract.Res;
  return proto.typedb.protocol.Type.IsAbstract.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.IsAbstract.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.IsAbstract.Res}
 */
proto.typedb.protocol.Type.IsAbstract.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAbstract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.IsAbstract.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.IsAbstract.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.IsAbstract.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.IsAbstract.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbstract();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool abstract = 1;
 * @return {boolean}
 */
proto.typedb.protocol.Type.IsAbstract.Res.prototype.getAbstract = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Type.IsAbstract.Res} returns this
 */
proto.typedb.protocol.Type.IsAbstract.Res.prototype.setAbstract = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertype.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertype.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertype} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertype}
 */
proto.typedb.protocol.Type.GetSupertype.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertype;
  return proto.typedb.protocol.Type.GetSupertype.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertype} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertype}
 */
proto.typedb.protocol.Type.GetSupertype.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertype.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertype.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertype} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertype.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertype.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertype.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertype.Req}
 */
proto.typedb.protocol.Type.GetSupertype.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertype.Req;
  return proto.typedb.protocol.Type.GetSupertype.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertype.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertype.Req}
 */
proto.typedb.protocol.Type.GetSupertype.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertype.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertype.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertype.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.Type.GetSupertype.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.Type.GetSupertype.Res.ResCase = {
  RES_NOT_SET: 0,
  TYPE: 1
};

/**
 * @return {proto.typedb.protocol.Type.GetSupertype.Res.ResCase}
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.Type.GetSupertype.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.Type.GetSupertype.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertype.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertype.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertype.Res}
 */
proto.typedb.protocol.Type.GetSupertype.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertype.Res;
  return proto.typedb.protocol.Type.GetSupertype.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertype.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertype.Res}
 */
proto.typedb.protocol.Type.GetSupertype.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertype.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertype.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertype.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.getType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Type.GetSupertype.Res} returns this
*/
proto.typedb.protocol.Type.GetSupertype.Res.prototype.setType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.Type.GetSupertype.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.GetSupertype.Res} returns this
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.GetSupertype.Res.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetSupertype.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetSupertype.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetSupertype} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetSupertype}
 */
proto.typedb.protocol.Type.SetSupertype.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetSupertype;
  return proto.typedb.protocol.Type.SetSupertype.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetSupertype} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetSupertype}
 */
proto.typedb.protocol.Type.SetSupertype.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetSupertype.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetSupertype.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetSupertype} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetSupertype.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetSupertype.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetSupertype.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetSupertype.Req}
 */
proto.typedb.protocol.Type.SetSupertype.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetSupertype.Req;
  return proto.typedb.protocol.Type.SetSupertype.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetSupertype.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetSupertype.Req}
 */
proto.typedb.protocol.Type.SetSupertype.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetSupertype.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetSupertype.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetSupertype.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.SetSupertype.Req.prototype.getType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.Type.SetSupertype.Req} returns this
*/
proto.typedb.protocol.Type.SetSupertype.Req.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.Type.SetSupertype.Req} returns this
 */
proto.typedb.protocol.Type.SetSupertype.Req.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.Type.SetSupertype.Req.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.SetSupertype.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.SetSupertype.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.SetSupertype.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.SetSupertype.Res}
 */
proto.typedb.protocol.Type.SetSupertype.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.SetSupertype.Res;
  return proto.typedb.protocol.Type.SetSupertype.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.SetSupertype.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.SetSupertype.Res}
 */
proto.typedb.protocol.Type.SetSupertype.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.SetSupertype.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.SetSupertype.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.SetSupertype.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.SetSupertype.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertypes.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertypes}
 */
proto.typedb.protocol.Type.GetSupertypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertypes;
  return proto.typedb.protocol.Type.GetSupertypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertypes}
 */
proto.typedb.protocol.Type.GetSupertypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertypes.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertypes.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertypes.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertypes.Req}
 */
proto.typedb.protocol.Type.GetSupertypes.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertypes.Req;
  return proto.typedb.protocol.Type.GetSupertypes.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertypes.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertypes.Req}
 */
proto.typedb.protocol.Type.GetSupertypes.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertypes.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertypes.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertypes.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSupertypes.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSupertypes.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSupertypes.ResPart}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSupertypes.ResPart;
  return proto.typedb.protocol.Type.GetSupertypes.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSupertypes.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSupertypes.ResPart}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSupertypes.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSupertypes.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Type.GetSupertypes.ResPart} returns this
*/
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Type.GetSupertypes.ResPart} returns this
 */
proto.typedb.protocol.Type.GetSupertypes.ResPart.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypes.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypes}
 */
proto.typedb.protocol.Type.GetSubtypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypes;
  return proto.typedb.protocol.Type.GetSubtypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypes}
 */
proto.typedb.protocol.Type.GetSubtypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypes.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypes.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypes.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypes.Req}
 */
proto.typedb.protocol.Type.GetSubtypes.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypes.Req;
  return proto.typedb.protocol.Type.GetSubtypes.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypes.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypes.Req}
 */
proto.typedb.protocol.Type.GetSubtypes.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypes.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypes.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypes.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypes.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypes.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypes.ResPart}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypes.ResPart;
  return proto.typedb.protocol.Type.GetSubtypes.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypes.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypes.ResPart}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypes.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypes.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Type.GetSubtypes.ResPart} returns this
*/
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Type.GetSubtypes.ResPart} returns this
 */
proto.typedb.protocol.Type.GetSubtypes.ResPart.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypesExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypesExplicit;
  return proto.typedb.protocol.Type.GetSubtypesExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypesExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypesExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.Req}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypesExplicit.Req;
  return proto.typedb.protocol.Type.GetSubtypesExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.Req}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypesExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    typesList: jspb.Message.toObjectList(msg.getTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart;
  return proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.getTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} returns this
*/
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.setTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.addTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart} returns this
 */
proto.typedb.protocol.Type.GetSubtypesExplicit.ResPart.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.Type.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Type} returns this
 */
proto.typedb.protocol.Type.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.typedb.protocol.Type.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.Type} returns this
 */
proto.typedb.protocol.Type.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Encoding encoding = 3;
 * @return {!proto.typedb.protocol.Type.Encoding}
 */
proto.typedb.protocol.Type.prototype.getEncoding = function() {
  return /** @type {!proto.typedb.protocol.Type.Encoding} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.typedb.protocol.Type.Encoding} value
 * @return {!proto.typedb.protocol.Type} returns this
 */
proto.typedb.protocol.Type.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional AttributeType.ValueType value_type = 4;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.Type.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.Type} returns this
 */
proto.typedb.protocol.Type.prototype.setValueType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool root = 5;
 * @return {boolean}
 */
proto.typedb.protocol.Type.prototype.getRoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.Type} returns this
 */
proto.typedb.protocol.Type.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType}
 */
proto.typedb.protocol.RoleType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType;
  return proto.typedb.protocol.RoleType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType}
 */
proto.typedb.protocol.RoleType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetRelationTypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetRelationTypes;
  return proto.typedb.protocol.RoleType.GetRelationTypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetRelationTypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetRelationTypes.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.Req}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetRelationTypes.Req;
  return proto.typedb.protocol.RoleType.GetRelationTypes.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.Req}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetRelationTypes.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationTypesList: jspb.Message.toObjectList(msg.getRelationTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetRelationTypes.ResPart;
  return proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRelationTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type relation_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.getRelationTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} returns this
*/
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.setRelationTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.addRelationTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.RoleType.GetRelationTypes.ResPart} returns this
 */
proto.typedb.protocol.RoleType.GetRelationTypes.ResPart.prototype.clearRelationTypesList = function() {
  return this.setRelationTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetPlayers.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetPlayers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetPlayers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers}
 */
proto.typedb.protocol.RoleType.GetPlayers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetPlayers;
  return proto.typedb.protocol.RoleType.GetPlayers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers}
 */
proto.typedb.protocol.RoleType.GetPlayers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetPlayers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetPlayers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetPlayers.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.Req}
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetPlayers.Req;
  return proto.typedb.protocol.RoleType.GetPlayers.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.Req}
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetPlayers.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RoleType.GetPlayers.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingTypesList: jspb.Message.toObjectList(msg.getThingTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.ResPart}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RoleType.GetPlayers.ResPart;
  return proto.typedb.protocol.RoleType.GetPlayers.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.ResPart}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addThingTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RoleType.GetPlayers.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RoleType.GetPlayers.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type thing_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.getThingTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.ResPart} returns this
*/
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.setThingTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.addThingTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.RoleType.GetPlayers.ResPart} returns this
 */
proto.typedb.protocol.RoleType.GetPlayers.ResPart.prototype.clearThingTypesList = function() {
  return this.setThingTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType}
 */
proto.typedb.protocol.ThingType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType;
  return proto.typedb.protocol.ThingType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType}
 */
proto.typedb.protocol.ThingType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetAbstract.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetAbstract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetAbstract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract}
 */
proto.typedb.protocol.ThingType.SetAbstract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetAbstract;
  return proto.typedb.protocol.ThingType.SetAbstract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract}
 */
proto.typedb.protocol.ThingType.SetAbstract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetAbstract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetAbstract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetAbstract.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract.Req}
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetAbstract.Req;
  return proto.typedb.protocol.ThingType.SetAbstract.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract.Req}
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetAbstract.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetAbstract.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract.Res}
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetAbstract.Res;
  return proto.typedb.protocol.ThingType.SetAbstract.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetAbstract.Res}
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetAbstract.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetAbstract.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetAbstract.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetAbstract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetAbstract;
  return proto.typedb.protocol.ThingType.UnsetAbstract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetAbstract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetAbstract.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract.Req}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetAbstract.Req;
  return proto.typedb.protocol.ThingType.UnsetAbstract.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract.Req}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetAbstract.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetAbstract.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract.Res}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetAbstract.Res;
  return proto.typedb.protocol.ThingType.UnsetAbstract.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetAbstract.Res}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetAbstract.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetAbstract.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetAbstract.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstances.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstances}
 */
proto.typedb.protocol.ThingType.GetInstances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstances;
  return proto.typedb.protocol.ThingType.GetInstances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstances}
 */
proto.typedb.protocol.ThingType.GetInstances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstances.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstances.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstances.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstances.Req}
 */
proto.typedb.protocol.ThingType.GetInstances.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstances.Req;
  return proto.typedb.protocol.ThingType.GetInstances.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstances.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstances.Req}
 */
proto.typedb.protocol.ThingType.GetInstances.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstances.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstances.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstances.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstances.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstances.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstances.ResPart}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstances.ResPart;
  return proto.typedb.protocol.ThingType.GetInstances.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstances.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstances.ResPart}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstances.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstances.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing things = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.ThingType.GetInstances.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.setThingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetInstances.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetInstances.ResPart.prototype.clearThingsList = function() {
  return this.setThingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstancesExplicit;
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstancesExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstancesExplicit.Req;
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingsList: jspb.Message.toObjectList(msg.getThingsList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart;
  return proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addThings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing things = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.getThingsList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.setThingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.addThings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetInstancesExplicit.ResPart.prototype.clearThingsList = function() {
  return this.setThingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwns.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwns}
 */
proto.typedb.protocol.ThingType.GetOwns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwns;
  return proto.typedb.protocol.ThingType.GetOwns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwns}
 */
proto.typedb.protocol.ThingType.GetOwns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.GetOwns.Req.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.FilterCase = {
  FILTER_NOT_SET: 0,
  VALUE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.ThingType.GetOwns.Req.FilterCase}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.getFilterCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.GetOwns.Req.FilterCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.GetOwns.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwns.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwns.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keysOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.Req}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwns.Req;
  return proto.typedb.protocol.ThingType.GetOwns.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwns.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.Req}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwns.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwns.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional AttributeType.ValueType value_type = 1;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.ThingType.GetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.setValueType = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.ThingType.GetOwns.Req.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.clearValueType = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.ThingType.GetOwns.Req.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool keys_only = 3;
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.ThingType.GetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwns.Req.prototype.setKeysOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwns.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwns.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeTypesList: jspb.Message.toObjectList(msg.getAttributeTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.ResPart}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwns.ResPart;
  return proto.typedb.protocol.ThingType.GetOwns.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwns.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.ResPart}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addAttributeTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwns.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwns.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type attribute_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.getAttributeTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.ThingType.GetOwns.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.addAttributeTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetOwns.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetOwns.ResPart.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsExplicit;
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.FilterCase = {
  FILTER_NOT_SET: 0,
  VALUE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.FilterCase}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.getFilterCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.FilterCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keysOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsExplicit.Req;
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeysOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeysOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional AttributeType.ValueType value_type = 1;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.setValueType = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.clearValueType = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool keys_only = 3;
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.getKeysOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.Req.prototype.setKeysOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeTypesList: jspb.Message.toObjectList(msg.getAttributeTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart;
  return proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addAttributeTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type attribute_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.getAttributeTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.addAttributeTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsExplicit.ResPart.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsOverridden;
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsOverridden.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeType: (f = msg.getAttributeType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsOverridden.Req;
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setAttributeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type attribute_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.getAttributeType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} returns this
*/
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.setAttributeType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Req} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.clearAttributeType = function() {
  return this.setAttributeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Req.prototype.hasAttributeType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.ResCase = {
  RES_NOT_SET: 0,
  ATTRIBUTE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.ResCase}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeType: (f = msg.getAttributeType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetOwnsOverridden.Res;
  return proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setAttributeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type attribute_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.getAttributeType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} returns this
*/
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.setAttributeType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetOwnsOverridden.Res} returns this
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.clearAttributeType = function() {
  return this.setAttributeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetOwnsOverridden.Res.prototype.hasAttributeType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetOwns.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetOwns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetOwns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetOwns}
 */
proto.typedb.protocol.ThingType.SetOwns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetOwns;
  return proto.typedb.protocol.ThingType.SetOwns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetOwns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetOwns}
 */
proto.typedb.protocol.ThingType.SetOwns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetOwns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetOwns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetOwns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.SetOwns.Req.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.OverriddenCase = {
  OVERRIDDEN_NOT_SET: 0,
  OVERRIDDEN_TYPE: 2
};

/**
 * @return {proto.typedb.protocol.ThingType.SetOwns.Req.OverriddenCase}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.getOverriddenCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.SetOwns.Req.OverriddenCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.SetOwns.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetOwns.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeType: (f = msg.getAttributeType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    overriddenType: (f = msg.getOverriddenType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    isKey: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetOwns.Req;
  return proto.typedb.protocol.ThingType.SetOwns.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setAttributeType(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setOverriddenType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetOwns.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getOverriddenType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getIsKey();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Type attribute_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.getAttributeType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req} returns this
*/
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.setAttributeType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.clearAttributeType = function() {
  return this.setAttributeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.hasAttributeType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type overridden_type = 2;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.getOverriddenType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 2));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req} returns this
*/
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.setOverriddenType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.ThingType.SetOwns.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.clearOverriddenType = function() {
  return this.setOverriddenType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.hasOverriddenType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_key = 3;
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.getIsKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.SetOwns.Req.prototype.setIsKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetOwns.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetOwns.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Res}
 */
proto.typedb.protocol.ThingType.SetOwns.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetOwns.Res;
  return proto.typedb.protocol.ThingType.SetOwns.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetOwns.Res}
 */
proto.typedb.protocol.ThingType.SetOwns.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetOwns.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetOwns.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetOwns.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetOwns.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetOwns.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetOwns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns}
 */
proto.typedb.protocol.ThingType.UnsetOwns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetOwns;
  return proto.typedb.protocol.ThingType.UnsetOwns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns}
 */
proto.typedb.protocol.ThingType.UnsetOwns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetOwns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetOwns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetOwns.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeType: (f = msg.getAttributeType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Req}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetOwns.Req;
  return proto.typedb.protocol.ThingType.UnsetOwns.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Req}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setAttributeType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetOwns.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type attribute_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.getAttributeType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Req} returns this
*/
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.setAttributeType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Req} returns this
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.clearAttributeType = function() {
  return this.setAttributeType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Req.prototype.hasAttributeType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetOwns.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Res}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetOwns.Res;
  return proto.typedb.protocol.ThingType.UnsetOwns.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetOwns.Res}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetOwns.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetOwns.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetOwns.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlays.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlays.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlays} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlays}
 */
proto.typedb.protocol.ThingType.GetPlays.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlays;
  return proto.typedb.protocol.ThingType.GetPlays.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlays}
 */
proto.typedb.protocol.ThingType.GetPlays.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlays.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlays.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlays.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlays.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlays.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlays.Req}
 */
proto.typedb.protocol.ThingType.GetPlays.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlays.Req;
  return proto.typedb.protocol.ThingType.GetPlays.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlays.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlays.Req}
 */
proto.typedb.protocol.ThingType.GetPlays.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlays.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlays.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlays.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlays.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlays.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlays.ResPart}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlays.ResPart;
  return proto.typedb.protocol.ThingType.GetPlays.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlays.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlays.ResPart}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlays.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlays.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.ThingType.GetPlays.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetPlays.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetPlays.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysExplicit;
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysExplicit.Req;
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.Req}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart;
  return proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} returns this
*/
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart} returns this
 */
proto.typedb.protocol.ThingType.GetPlaysExplicit.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysOverridden;
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysOverridden.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysOverridden.Req;
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} returns this
*/
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Req} returns this
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Req.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.ResCase = {
  RES_NOT_SET: 0,
  ROLE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.ResCase}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.GetPlaysOverridden.Res;
  return proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} returns this
*/
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.setRoleType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.GetPlaysOverridden.Res} returns this
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.GetPlaysOverridden.Res.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetPlays.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetPlays.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetPlays} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetPlays}
 */
proto.typedb.protocol.ThingType.SetPlays.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetPlays;
  return proto.typedb.protocol.ThingType.SetPlays.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetPlays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetPlays}
 */
proto.typedb.protocol.ThingType.SetPlays.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetPlays.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetPlays.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetPlays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.ThingType.SetPlays.Req.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.OverriddenCase = {
  OVERRIDDEN_NOT_SET: 0,
  OVERRIDDEN_TYPE: 2
};

/**
 * @return {proto.typedb.protocol.ThingType.SetPlays.Req.OverriddenCase}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.getOverriddenCase = function() {
  return /** @type {proto.typedb.protocol.ThingType.SetPlays.Req.OverriddenCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.ThingType.SetPlays.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetPlays.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f),
    overriddenType: (f = msg.getOverriddenType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetPlays.Req;
  return proto.typedb.protocol.ThingType.SetPlays.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    case 2:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setOverriddenType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetPlays.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
  f = message.getOverriddenType();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req} returns this
*/
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req} returns this
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Type overridden_type = 2;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.getOverriddenType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 2));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req} returns this
*/
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.setOverriddenType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.typedb.protocol.ThingType.SetPlays.Req.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Req} returns this
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.clearOverriddenType = function() {
  return this.setOverriddenType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.SetPlays.Req.prototype.hasOverriddenType = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.SetPlays.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.SetPlays.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Res}
 */
proto.typedb.protocol.ThingType.SetPlays.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.SetPlays.Res;
  return proto.typedb.protocol.ThingType.SetPlays.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.SetPlays.Res}
 */
proto.typedb.protocol.ThingType.SetPlays.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.SetPlays.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.SetPlays.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.SetPlays.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.SetPlays.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetPlays.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetPlays.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays}
 */
proto.typedb.protocol.ThingType.UnsetPlays.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetPlays;
  return proto.typedb.protocol.ThingType.UnsetPlays.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays}
 */
proto.typedb.protocol.ThingType.UnsetPlays.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetPlays.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetPlays.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetPlays.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Req}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetPlays.Req;
  return proto.typedb.protocol.ThingType.UnsetPlays.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Req}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetPlays.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Req} returns this
*/
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.setRoleType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Req} returns this
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Req.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.ThingType.UnsetPlays.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Res}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.ThingType.UnsetPlays.Res;
  return proto.typedb.protocol.ThingType.UnsetPlays.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.ThingType.UnsetPlays.Res}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.ThingType.UnsetPlays.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.ThingType.UnsetPlays.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.ThingType.UnsetPlays.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.EntityType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.EntityType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.EntityType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.EntityType}
 */
proto.typedb.protocol.EntityType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.EntityType;
  return proto.typedb.protocol.EntityType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.EntityType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.EntityType}
 */
proto.typedb.protocol.EntityType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.EntityType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.EntityType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.EntityType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.EntityType.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.EntityType.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.EntityType.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.EntityType.Create}
 */
proto.typedb.protocol.EntityType.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.EntityType.Create;
  return proto.typedb.protocol.EntityType.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.EntityType.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.EntityType.Create}
 */
proto.typedb.protocol.EntityType.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.EntityType.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.EntityType.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.EntityType.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.EntityType.Create.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.EntityType.Create.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.EntityType.Create.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.EntityType.Create.Req}
 */
proto.typedb.protocol.EntityType.Create.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.EntityType.Create.Req;
  return proto.typedb.protocol.EntityType.Create.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.EntityType.Create.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.EntityType.Create.Req}
 */
proto.typedb.protocol.EntityType.Create.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.EntityType.Create.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.EntityType.Create.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.EntityType.Create.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.EntityType.Create.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.EntityType.Create.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.EntityType.Create.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    entity: (f = msg.getEntity()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.EntityType.Create.Res}
 */
proto.typedb.protocol.EntityType.Create.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.EntityType.Create.Res;
  return proto.typedb.protocol.EntityType.Create.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.EntityType.Create.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.EntityType.Create.Res}
 */
proto.typedb.protocol.EntityType.Create.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setEntity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.EntityType.Create.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.EntityType.Create.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.EntityType.Create.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.EntityType.Create.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing entity = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.EntityType.Create.Res.prototype.getEntity = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.EntityType.Create.Res} returns this
*/
proto.typedb.protocol.EntityType.Create.Res.prototype.setEntity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.EntityType.Create.Res} returns this
 */
proto.typedb.protocol.EntityType.Create.Res.prototype.clearEntity = function() {
  return this.setEntity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.EntityType.Create.Res.prototype.hasEntity = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType}
 */
proto.typedb.protocol.RelationType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType;
  return proto.typedb.protocol.RelationType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType}
 */
proto.typedb.protocol.RelationType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.Create.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.Create.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.Create} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.Create}
 */
proto.typedb.protocol.RelationType.Create.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.Create;
  return proto.typedb.protocol.RelationType.Create.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.Create}
 */
proto.typedb.protocol.RelationType.Create.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.Create.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.Create.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.Create.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.Create.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.Create.Req}
 */
proto.typedb.protocol.RelationType.Create.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.Create.Req;
  return proto.typedb.protocol.RelationType.Create.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.Create.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.Create.Req}
 */
proto.typedb.protocol.RelationType.Create.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.Create.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.Create.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.Create.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.Create.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.Create.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.Create.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    relation: (f = msg.getRelation()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.Create.Res}
 */
proto.typedb.protocol.RelationType.Create.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.Create.Res;
  return proto.typedb.protocol.RelationType.Create.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.Create.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.Create.Res}
 */
proto.typedb.protocol.RelationType.Create.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setRelation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.Create.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.Create.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.Create.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.Create.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing relation = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.RelationType.Create.Res.prototype.getRelation = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.RelationType.Create.Res} returns this
*/
proto.typedb.protocol.RelationType.Create.Res.prototype.setRelation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.RelationType.Create.Res} returns this
 */
proto.typedb.protocol.RelationType.Create.Res.prototype.clearRelation = function() {
  return this.setRelation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.RelationType.Create.Res.prototype.hasRelation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelates.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelates}
 */
proto.typedb.protocol.RelationType.GetRelates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelates;
  return proto.typedb.protocol.RelationType.GetRelates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelates}
 */
proto.typedb.protocol.RelationType.GetRelates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelates.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelates.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelates.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelates.Req}
 */
proto.typedb.protocol.RelationType.GetRelates.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelates.Req;
  return proto.typedb.protocol.RelationType.GetRelates.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelates.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelates.Req}
 */
proto.typedb.protocol.RelationType.GetRelates.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelates.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelates.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelates.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelates.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelates.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelates.ResPart}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelates.ResPart;
  return proto.typedb.protocol.RelationType.GetRelates.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelates.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelates.ResPart}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelates.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelates.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.RelationType.GetRelates.ResPart} returns this
*/
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.RelationType.GetRelates.ResPart} returns this
 */
proto.typedb.protocol.RelationType.GetRelates.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesExplicit;
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesExplicit.Req;
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleTypesList: jspb.Message.toObjectList(msg.getRoleTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart;
  return proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addRoleTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type role_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.getRoleTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} returns this
*/
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.setRoleTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.addRoleTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart} returns this
 */
proto.typedb.protocol.RelationType.GetRelatesExplicit.ResPart.prototype.clearRoleTypesList = function() {
  return this.setRoleTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesForRoleLabel;
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req;
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req} returns this
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.RoleCase = {
  ROLE_NOT_SET: 0,
  ROLE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.RoleCase}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.getRoleCase = function() {
  return /** @type {proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.RoleCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res;
  return proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} returns this
*/
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.setRoleType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res} returns this
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.RelationType.GetRelatesForRoleLabel.Res.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesOverridden;
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesOverridden.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesOverridden.Req;
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Req} returns this
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.ResCase = {
  RES_NOT_SET: 0,
  ROLE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.ResCase}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleType: (f = msg.getRoleType()) && proto.typedb.protocol.Type.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.GetRelatesOverridden.Res;
  return proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.setRoleType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type role_type = 1;
 * @return {?proto.typedb.protocol.Type}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.getRoleType = function() {
  return /** @type{?proto.typedb.protocol.Type} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {?proto.typedb.protocol.Type|undefined} value
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} returns this
*/
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.setRoleType = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.RelationType.GetRelatesOverridden.Res} returns this
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.clearRoleType = function() {
  return this.setRoleType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.RelationType.GetRelatesOverridden.Res.prototype.hasRoleType = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.SetRelates.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.SetRelates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.SetRelates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.SetRelates}
 */
proto.typedb.protocol.RelationType.SetRelates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.SetRelates;
  return proto.typedb.protocol.RelationType.SetRelates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.SetRelates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.SetRelates}
 */
proto.typedb.protocol.RelationType.SetRelates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.SetRelates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.SetRelates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.SetRelates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.RelationType.SetRelates.Req.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.OverriddenCase = {
  OVERRIDDEN_NOT_SET: 0,
  OVERRIDDEN_LABEL: 2
};

/**
 * @return {proto.typedb.protocol.RelationType.SetRelates.Req.OverriddenCase}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.getOverriddenCase = function() {
  return /** @type {proto.typedb.protocol.RelationType.SetRelates.Req.OverriddenCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.RelationType.SetRelates.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.SetRelates.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    overriddenLabel: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Req}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.SetRelates.Req;
  return proto.typedb.protocol.RelationType.SetRelates.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Req}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverriddenLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.SetRelates.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Req} returns this
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string overridden_label = 2;
 * @return {string}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.getOverriddenLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Req} returns this
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.setOverriddenLabel = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.RelationType.SetRelates.Req.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Req} returns this
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.clearOverriddenLabel = function() {
  return jspb.Message.setOneofField(this, 2, proto.typedb.protocol.RelationType.SetRelates.Req.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.RelationType.SetRelates.Req.prototype.hasOverriddenLabel = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.SetRelates.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.SetRelates.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Res}
 */
proto.typedb.protocol.RelationType.SetRelates.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.SetRelates.Res;
  return proto.typedb.protocol.RelationType.SetRelates.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.SetRelates.Res}
 */
proto.typedb.protocol.RelationType.SetRelates.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.SetRelates.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.SetRelates.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.SetRelates.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.SetRelates.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.UnsetRelates.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.UnsetRelates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates}
 */
proto.typedb.protocol.RelationType.UnsetRelates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.UnsetRelates;
  return proto.typedb.protocol.RelationType.UnsetRelates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates}
 */
proto.typedb.protocol.RelationType.UnsetRelates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.UnsetRelates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.UnsetRelates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.UnsetRelates.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates.Req}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.UnsetRelates.Req;
  return proto.typedb.protocol.RelationType.UnsetRelates.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates.Req}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.UnsetRelates.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates.Req} returns this
 */
proto.typedb.protocol.RelationType.UnsetRelates.Req.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.RelationType.UnsetRelates.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates.Res}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.RelationType.UnsetRelates.Res;
  return proto.typedb.protocol.RelationType.UnsetRelates.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.RelationType.UnsetRelates.Res}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.RelationType.UnsetRelates.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.RelationType.UnsetRelates.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.RelationType.UnsetRelates.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType}
 */
proto.typedb.protocol.AttributeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType;
  return proto.typedb.protocol.AttributeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType}
 */
proto.typedb.protocol.AttributeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.typedb.protocol.AttributeType.ValueType = {
  OBJECT: 0,
  BOOLEAN: 1,
  LONG: 2,
  DOUBLE: 3,
  STRING: 4,
  DATETIME: 5
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Put.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Put.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Put} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Put}
 */
proto.typedb.protocol.AttributeType.Put.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Put;
  return proto.typedb.protocol.AttributeType.Put.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Put} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Put}
 */
proto.typedb.protocol.AttributeType.Put.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Put.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Put.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Put} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Put.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Put.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Put.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.typedb.protocol.Attribute.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Put.Req}
 */
proto.typedb.protocol.AttributeType.Put.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Put.Req;
  return proto.typedb.protocol.AttributeType.Put.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Put.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Put.Req}
 */
proto.typedb.protocol.AttributeType.Put.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Attribute.Value;
      reader.readMessage(value,proto.typedb.protocol.Attribute.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Put.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Put.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Put.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Attribute.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Attribute.Value value = 1;
 * @return {?proto.typedb.protocol.Attribute.Value}
 */
proto.typedb.protocol.AttributeType.Put.Req.prototype.getValue = function() {
  return /** @type{?proto.typedb.protocol.Attribute.Value} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Attribute.Value, 1));
};


/**
 * @param {?proto.typedb.protocol.Attribute.Value|undefined} value
 * @return {!proto.typedb.protocol.AttributeType.Put.Req} returns this
*/
proto.typedb.protocol.AttributeType.Put.Req.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.Put.Req} returns this
 */
proto.typedb.protocol.AttributeType.Put.Req.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.Put.Req.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Put.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Put.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Put.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: (f = msg.getAttribute()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Put.Res}
 */
proto.typedb.protocol.AttributeType.Put.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Put.Res;
  return proto.typedb.protocol.AttributeType.Put.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Put.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Put.Res}
 */
proto.typedb.protocol.AttributeType.Put.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Put.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Put.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Put.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Put.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing attribute = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.AttributeType.Put.Res.prototype.getAttribute = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.AttributeType.Put.Res} returns this
*/
proto.typedb.protocol.AttributeType.Put.Res.prototype.setAttribute = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.Put.Res} returns this
 */
proto.typedb.protocol.AttributeType.Put.Res.prototype.clearAttribute = function() {
  return this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.Put.Res.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Get}
 */
proto.typedb.protocol.AttributeType.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Get;
  return proto.typedb.protocol.AttributeType.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Get}
 */
proto.typedb.protocol.AttributeType.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Get.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Get.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Get.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.typedb.protocol.Attribute.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Get.Req}
 */
proto.typedb.protocol.AttributeType.Get.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Get.Req;
  return proto.typedb.protocol.AttributeType.Get.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Get.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Get.Req}
 */
proto.typedb.protocol.AttributeType.Get.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Attribute.Value;
      reader.readMessage(value,proto.typedb.protocol.Attribute.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Get.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Get.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Get.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Attribute.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Attribute.Value value = 1;
 * @return {?proto.typedb.protocol.Attribute.Value}
 */
proto.typedb.protocol.AttributeType.Get.Req.prototype.getValue = function() {
  return /** @type{?proto.typedb.protocol.Attribute.Value} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Attribute.Value, 1));
};


/**
 * @param {?proto.typedb.protocol.Attribute.Value|undefined} value
 * @return {!proto.typedb.protocol.AttributeType.Get.Req} returns this
*/
proto.typedb.protocol.AttributeType.Get.Req.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.Get.Req} returns this
 */
proto.typedb.protocol.AttributeType.Get.Req.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.Get.Req.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.AttributeType.Get.Res.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.AttributeType.Get.Res.ResCase = {
  RES_NOT_SET: 0,
  ATTRIBUTE: 1
};

/**
 * @return {proto.typedb.protocol.AttributeType.Get.Res.ResCase}
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.getResCase = function() {
  return /** @type {proto.typedb.protocol.AttributeType.Get.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.AttributeType.Get.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.Get.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.Get.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: (f = msg.getAttribute()) && proto.typedb.protocol.Thing.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.Get.Res}
 */
proto.typedb.protocol.AttributeType.Get.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.Get.Res;
  return proto.typedb.protocol.AttributeType.Get.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.Get.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.Get.Res}
 */
proto.typedb.protocol.AttributeType.Get.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.Get.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.Get.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.Get.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * optional Thing attribute = 1;
 * @return {?proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.getAttribute = function() {
  return /** @type{?proto.typedb.protocol.Thing} */ (
    jspb.Message.getWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {?proto.typedb.protocol.Thing|undefined} value
 * @return {!proto.typedb.protocol.AttributeType.Get.Res} returns this
*/
proto.typedb.protocol.AttributeType.Get.Res.prototype.setAttribute = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.typedb.protocol.AttributeType.Get.Res.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.Get.Res} returns this
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.clearAttribute = function() {
  return this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.Get.Res.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwners.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwners.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwners} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners}
 */
proto.typedb.protocol.AttributeType.GetOwners.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwners;
  return proto.typedb.protocol.AttributeType.GetOwners.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners}
 */
proto.typedb.protocol.AttributeType.GetOwners.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwners.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwners.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwners.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    onlyKey: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.Req}
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwners.Req;
  return proto.typedb.protocol.AttributeType.GetOwners.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.Req}
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwners.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnlyKey();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool only_key = 1;
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.prototype.getOnlyKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetOwners.Req.prototype.setOnlyKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwners.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingTypesList: jspb.Message.toObjectList(msg.getThingTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.ResPart}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwners.ResPart;
  return proto.typedb.protocol.AttributeType.GetOwners.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.ResPart}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addThingTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwners.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwners.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type thing_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.getThingTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.ResPart} returns this
*/
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.setThingTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.addThingTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.AttributeType.GetOwners.ResPart} returns this
 */
proto.typedb.protocol.AttributeType.GetOwners.ResPart.prototype.clearThingTypesList = function() {
  return this.setThingTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwnersExplicit;
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    onlyKey: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req;
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnlyKey();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool only_key = 1;
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.prototype.getOnlyKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.Req.prototype.setOnlyKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingTypesList: jspb.Message.toObjectList(msg.getThingTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart;
  return proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addThingTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type thing_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.getThingTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} returns this
*/
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.setThingTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.addThingTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart} returns this
 */
proto.typedb.protocol.AttributeType.GetOwnersExplicit.ResPart.prototype.clearThingTypesList = function() {
  return this.setThingTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetRegex.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetRegex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetRegex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex}
 */
proto.typedb.protocol.AttributeType.GetRegex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetRegex;
  return proto.typedb.protocol.AttributeType.GetRegex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex}
 */
proto.typedb.protocol.AttributeType.GetRegex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetRegex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetRegex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetRegex.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex.Req}
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetRegex.Req;
  return proto.typedb.protocol.AttributeType.GetRegex.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex.Req}
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetRegex.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetRegex.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex.Res}
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetRegex.Res;
  return proto.typedb.protocol.AttributeType.GetRegex.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetRegex.Res}
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetRegex.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetRegex.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string regex = 1;
 * @return {string}
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.AttributeType.GetRegex.Res} returns this
 */
proto.typedb.protocol.AttributeType.GetRegex.Res.prototype.setRegex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.SetRegex.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.SetRegex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.SetRegex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex}
 */
proto.typedb.protocol.AttributeType.SetRegex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.SetRegex;
  return proto.typedb.protocol.AttributeType.SetRegex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex}
 */
proto.typedb.protocol.AttributeType.SetRegex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.SetRegex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.SetRegex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.SetRegex.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    regex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex.Req}
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.SetRegex.Req;
  return proto.typedb.protocol.AttributeType.SetRegex.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex.Req}
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.SetRegex.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string regex = 1;
 * @return {string}
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.prototype.getRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.typedb.protocol.AttributeType.SetRegex.Req} returns this
 */
proto.typedb.protocol.AttributeType.SetRegex.Req.prototype.setRegex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.SetRegex.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex.Res}
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.SetRegex.Res;
  return proto.typedb.protocol.AttributeType.SetRegex.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.SetRegex.Res}
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.SetRegex.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.SetRegex.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.SetRegex.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetSubtypes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetSubtypes;
  return proto.typedb.protocol.AttributeType.GetSubtypes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetSubtypes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.ReqCase = {
  REQ_NOT_SET: 0,
  VALUE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.AttributeType.GetSubtypes.Req.ReqCase}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.AttributeType.GetSubtypes.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.AttributeType.GetSubtypes.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetSubtypes.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.Req}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetSubtypes.Req;
  return proto.typedb.protocol.AttributeType.GetSubtypes.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.Req}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetSubtypes.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ValueType value_type = 1;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.setValueType = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.AttributeType.GetSubtypes.Req.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.clearValueType = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.AttributeType.GetSubtypes.Req.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.Req.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributeTypesList: jspb.Message.toObjectList(msg.getAttributeTypesList(),
    proto.typedb.protocol.Type.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetSubtypes.ResPart;
  return proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Type;
      reader.readMessage(value,proto.typedb.protocol.Type.deserializeBinaryFromReader);
      msg.addAttributeTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributeTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Type.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Type attribute_types = 1;
 * @return {!Array<!proto.typedb.protocol.Type>}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.getAttributeTypesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Type>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Type, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Type>} value
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart} returns this
*/
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.setAttributeTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Type}
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.addAttributeTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Type, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.AttributeType.GetSubtypes.ResPart} returns this
 */
proto.typedb.protocol.AttributeType.GetSubtypes.ResPart.prototype.clearAttributeTypesList = function() {
  return this.setAttributeTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetInstances.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetInstances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetInstances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances}
 */
proto.typedb.protocol.AttributeType.GetInstances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetInstances;
  return proto.typedb.protocol.AttributeType.GetInstances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances}
 */
proto.typedb.protocol.AttributeType.GetInstances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetInstances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetInstances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.ReqCase = {
  REQ_NOT_SET: 0,
  VALUE_TYPE: 1
};

/**
 * @return {proto.typedb.protocol.AttributeType.GetInstances.Req.ReqCase}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.getReqCase = function() {
  return /** @type {proto.typedb.protocol.AttributeType.GetInstances.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.typedb.protocol.AttributeType.GetInstances.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetInstances.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.Req}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetInstances.Req;
  return proto.typedb.protocol.AttributeType.GetInstances.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.Req}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (reader.readEnum());
      msg.setValueType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetInstances.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ValueType value_type = 1;
 * @return {!proto.typedb.protocol.AttributeType.ValueType}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.getValueType = function() {
  return /** @type {!proto.typedb.protocol.AttributeType.ValueType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.typedb.protocol.AttributeType.ValueType} value
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.setValueType = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.AttributeType.GetInstances.Req.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.Req} returns this
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.clearValueType = function() {
  return jspb.Message.setOneofField(this, 1, proto.typedb.protocol.AttributeType.GetInstances.Req.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.typedb.protocol.AttributeType.GetInstances.Req.prototype.hasValueType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.toObject = function(opt_includeInstance) {
  return proto.typedb.protocol.AttributeType.GetInstances.ResPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.ResPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.typedb.protocol.Thing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.ResPart}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.typedb.protocol.AttributeType.GetInstances.ResPart;
  return proto.typedb.protocol.AttributeType.GetInstances.ResPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.ResPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.ResPart}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.typedb.protocol.Thing;
      reader.readMessage(value,proto.typedb.protocol.Thing.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.typedb.protocol.AttributeType.GetInstances.ResPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.typedb.protocol.AttributeType.GetInstances.ResPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.typedb.protocol.Thing.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Thing attributes = 1;
 * @return {!Array<!proto.typedb.protocol.Thing>}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.typedb.protocol.Thing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.typedb.protocol.Thing, 1));
};


/**
 * @param {!Array<!proto.typedb.protocol.Thing>} value
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.ResPart} returns this
*/
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.typedb.protocol.Thing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.typedb.protocol.Thing}
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.typedb.protocol.Thing, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.typedb.protocol.AttributeType.GetInstances.ResPart} returns this
 */
proto.typedb.protocol.AttributeType.GetInstances.ResPart.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


goog.object.extend(exports, proto.typedb.protocol);
