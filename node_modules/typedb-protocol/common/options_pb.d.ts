// package: typedb.protocol
// file: common/options.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class Options extends jspb.Message { 

    hasInfer(): boolean;
    clearInfer(): void;
    getInfer(): boolean;
    setInfer(value: boolean): Options;

    hasTraceInference(): boolean;
    clearTraceInference(): void;
    getTraceInference(): boolean;
    setTraceInference(value: boolean): Options;

    hasExplain(): boolean;
    clearExplain(): void;
    getExplain(): boolean;
    setExplain(value: boolean): Options;

    hasParallel(): boolean;
    clearParallel(): void;
    getParallel(): boolean;
    setParallel(value: boolean): Options;

    hasPrefetchSize(): boolean;
    clearPrefetchSize(): void;
    getPrefetchSize(): number;
    setPrefetchSize(value: number): Options;

    hasPrefetch(): boolean;
    clearPrefetch(): void;
    getPrefetch(): boolean;
    setPrefetch(value: boolean): Options;

    hasSessionIdleTimeoutMillis(): boolean;
    clearSessionIdleTimeoutMillis(): void;
    getSessionIdleTimeoutMillis(): number;
    setSessionIdleTimeoutMillis(value: number): Options;

    hasTransactionTimeoutMillis(): boolean;
    clearTransactionTimeoutMillis(): void;
    getTransactionTimeoutMillis(): number;
    setTransactionTimeoutMillis(value: number): Options;

    hasSchemaLockAcquireTimeoutMillis(): boolean;
    clearSchemaLockAcquireTimeoutMillis(): void;
    getSchemaLockAcquireTimeoutMillis(): number;
    setSchemaLockAcquireTimeoutMillis(value: number): Options;

    hasReadAnyReplica(): boolean;
    clearReadAnyReplica(): void;
    getReadAnyReplica(): boolean;
    setReadAnyReplica(value: boolean): Options;

    getInferOptCase(): Options.InferOptCase;
    getTraceInferenceOptCase(): Options.TraceInferenceOptCase;
    getExplainOptCase(): Options.ExplainOptCase;
    getParallelOptCase(): Options.ParallelOptCase;
    getPrefetchSizeOptCase(): Options.PrefetchSizeOptCase;
    getPrefetchOptCase(): Options.PrefetchOptCase;
    getSessionIdleTimeoutOptCase(): Options.SessionIdleTimeoutOptCase;
    getTransactionTimeoutOptCase(): Options.TransactionTimeoutOptCase;
    getSchemaLockAcquireTimeoutOptCase(): Options.SchemaLockAcquireTimeoutOptCase;
    getReadAnyReplicaOptCase(): Options.ReadAnyReplicaOptCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Options.AsObject;
    static toObject(includeInstance: boolean, msg: Options): Options.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Options, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Options;
    static deserializeBinaryFromReader(message: Options, reader: jspb.BinaryReader): Options;
}

export namespace Options {
    export type AsObject = {
        infer: boolean,
        traceInference: boolean,
        explain: boolean,
        parallel: boolean,
        prefetchSize: number,
        prefetch: boolean,
        sessionIdleTimeoutMillis: number,
        transactionTimeoutMillis: number,
        schemaLockAcquireTimeoutMillis: number,
        readAnyReplica: boolean,
    }

    export enum InferOptCase {
        INFER_OPT_NOT_SET = 0,
        INFER = 1,
    }

    export enum TraceInferenceOptCase {
        TRACE_INFERENCE_OPT_NOT_SET = 0,
        TRACE_INFERENCE = 2,
    }

    export enum ExplainOptCase {
        EXPLAIN_OPT_NOT_SET = 0,
        EXPLAIN = 3,
    }

    export enum ParallelOptCase {
        PARALLEL_OPT_NOT_SET = 0,
        PARALLEL = 4,
    }

    export enum PrefetchSizeOptCase {
        PREFETCH_SIZE_OPT_NOT_SET = 0,
        PREFETCH_SIZE = 5,
    }

    export enum PrefetchOptCase {
        PREFETCH_OPT_NOT_SET = 0,
        PREFETCH = 6,
    }

    export enum SessionIdleTimeoutOptCase {
        SESSION_IDLE_TIMEOUT_OPT_NOT_SET = 0,
        SESSION_IDLE_TIMEOUT_MILLIS = 7,
    }

    export enum TransactionTimeoutOptCase {
        TRANSACTION_TIMEOUT_OPT_NOT_SET = 0,
        TRANSACTION_TIMEOUT_MILLIS = 8,
    }

    export enum SchemaLockAcquireTimeoutOptCase {
        SCHEMA_LOCK_ACQUIRE_TIMEOUT_OPT_NOT_SET = 0,
        SCHEMA_LOCK_ACQUIRE_TIMEOUT_MILLIS = 9,
    }

    export enum ReadAnyReplicaOptCase {
        READ_ANY_REPLICA_OPT_NOT_SET = 0,
        READ_ANY_REPLICA = 10,
    }

}
