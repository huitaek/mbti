// package: typedb.protocol
// file: core/core_service.proto

/* tslint:disable */
/* eslint-disable */

import * as grpc from "@grpc/grpc-js";
import * as core_core_service_pb from "../core/core_service_pb";
import * as core_core_database_pb from "../core/core_database_pb";
import * as common_session_pb from "../common/session_pb";
import * as common_transaction_pb from "../common/transaction_pb";

interface ITypeDBService extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
    databases_contains: ITypeDBService_Idatabases_contains;
    databases_create: ITypeDBService_Idatabases_create;
    databases_all: ITypeDBService_Idatabases_all;
    database_schema: ITypeDBService_Idatabase_schema;
    database_type_schema: ITypeDBService_Idatabase_type_schema;
    database_rule_schema: ITypeDBService_Idatabase_rule_schema;
    database_delete: ITypeDBService_Idatabase_delete;
    session_open: ITypeDBService_Isession_open;
    session_close: ITypeDBService_Isession_close;
    session_pulse: ITypeDBService_Isession_pulse;
    transaction: ITypeDBService_Itransaction;
}

interface ITypeDBService_Idatabases_contains extends grpc.MethodDefinition<core_core_database_pb.CoreDatabaseManager.Contains.Req, core_core_database_pb.CoreDatabaseManager.Contains.Res> {
    path: "/typedb.protocol.TypeDB/databases_contains";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.Contains.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.Contains.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.Contains.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.Contains.Res>;
}
interface ITypeDBService_Idatabases_create extends grpc.MethodDefinition<core_core_database_pb.CoreDatabaseManager.Create.Req, core_core_database_pb.CoreDatabaseManager.Create.Res> {
    path: "/typedb.protocol.TypeDB/databases_create";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.Create.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.Create.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.Create.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.Create.Res>;
}
interface ITypeDBService_Idatabases_all extends grpc.MethodDefinition<core_core_database_pb.CoreDatabaseManager.All.Req, core_core_database_pb.CoreDatabaseManager.All.Res> {
    path: "/typedb.protocol.TypeDB/databases_all";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.All.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.All.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabaseManager.All.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabaseManager.All.Res>;
}
interface ITypeDBService_Idatabase_schema extends grpc.MethodDefinition<core_core_database_pb.CoreDatabase.Schema.Req, core_core_database_pb.CoreDatabase.Schema.Res> {
    path: "/typedb.protocol.TypeDB/database_schema";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.Schema.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.Schema.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.Schema.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.Schema.Res>;
}
interface ITypeDBService_Idatabase_type_schema extends grpc.MethodDefinition<core_core_database_pb.CoreDatabase.TypeSchema.Req, core_core_database_pb.CoreDatabase.TypeSchema.Res> {
    path: "/typedb.protocol.TypeDB/database_type_schema";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.TypeSchema.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.TypeSchema.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.TypeSchema.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.TypeSchema.Res>;
}
interface ITypeDBService_Idatabase_rule_schema extends grpc.MethodDefinition<core_core_database_pb.CoreDatabase.RuleSchema.Req, core_core_database_pb.CoreDatabase.RuleSchema.Res> {
    path: "/typedb.protocol.TypeDB/database_rule_schema";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.RuleSchema.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.RuleSchema.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.RuleSchema.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.RuleSchema.Res>;
}
interface ITypeDBService_Idatabase_delete extends grpc.MethodDefinition<core_core_database_pb.CoreDatabase.Delete.Req, core_core_database_pb.CoreDatabase.Delete.Res> {
    path: "/typedb.protocol.TypeDB/database_delete";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.Delete.Req>;
    requestDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.Delete.Req>;
    responseSerialize: grpc.serialize<core_core_database_pb.CoreDatabase.Delete.Res>;
    responseDeserialize: grpc.deserialize<core_core_database_pb.CoreDatabase.Delete.Res>;
}
interface ITypeDBService_Isession_open extends grpc.MethodDefinition<common_session_pb.Session.Open.Req, common_session_pb.Session.Open.Res> {
    path: "/typedb.protocol.TypeDB/session_open";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<common_session_pb.Session.Open.Req>;
    requestDeserialize: grpc.deserialize<common_session_pb.Session.Open.Req>;
    responseSerialize: grpc.serialize<common_session_pb.Session.Open.Res>;
    responseDeserialize: grpc.deserialize<common_session_pb.Session.Open.Res>;
}
interface ITypeDBService_Isession_close extends grpc.MethodDefinition<common_session_pb.Session.Close.Req, common_session_pb.Session.Close.Res> {
    path: "/typedb.protocol.TypeDB/session_close";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<common_session_pb.Session.Close.Req>;
    requestDeserialize: grpc.deserialize<common_session_pb.Session.Close.Req>;
    responseSerialize: grpc.serialize<common_session_pb.Session.Close.Res>;
    responseDeserialize: grpc.deserialize<common_session_pb.Session.Close.Res>;
}
interface ITypeDBService_Isession_pulse extends grpc.MethodDefinition<common_session_pb.Session.Pulse.Req, common_session_pb.Session.Pulse.Res> {
    path: "/typedb.protocol.TypeDB/session_pulse";
    requestStream: false;
    responseStream: false;
    requestSerialize: grpc.serialize<common_session_pb.Session.Pulse.Req>;
    requestDeserialize: grpc.deserialize<common_session_pb.Session.Pulse.Req>;
    responseSerialize: grpc.serialize<common_session_pb.Session.Pulse.Res>;
    responseDeserialize: grpc.deserialize<common_session_pb.Session.Pulse.Res>;
}
interface ITypeDBService_Itransaction extends grpc.MethodDefinition<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server> {
    path: "/typedb.protocol.TypeDB/transaction";
    requestStream: true;
    responseStream: true;
    requestSerialize: grpc.serialize<common_transaction_pb.Transaction.Client>;
    requestDeserialize: grpc.deserialize<common_transaction_pb.Transaction.Client>;
    responseSerialize: grpc.serialize<common_transaction_pb.Transaction.Server>;
    responseDeserialize: grpc.deserialize<common_transaction_pb.Transaction.Server>;
}

export const TypeDBService: ITypeDBService;

export interface ITypeDBServer extends grpc.UntypedServiceImplementation {
    databases_contains: grpc.handleUnaryCall<core_core_database_pb.CoreDatabaseManager.Contains.Req, core_core_database_pb.CoreDatabaseManager.Contains.Res>;
    databases_create: grpc.handleUnaryCall<core_core_database_pb.CoreDatabaseManager.Create.Req, core_core_database_pb.CoreDatabaseManager.Create.Res>;
    databases_all: grpc.handleUnaryCall<core_core_database_pb.CoreDatabaseManager.All.Req, core_core_database_pb.CoreDatabaseManager.All.Res>;
    database_schema: grpc.handleUnaryCall<core_core_database_pb.CoreDatabase.Schema.Req, core_core_database_pb.CoreDatabase.Schema.Res>;
    database_type_schema: grpc.handleUnaryCall<core_core_database_pb.CoreDatabase.TypeSchema.Req, core_core_database_pb.CoreDatabase.TypeSchema.Res>;
    database_rule_schema: grpc.handleUnaryCall<core_core_database_pb.CoreDatabase.RuleSchema.Req, core_core_database_pb.CoreDatabase.RuleSchema.Res>;
    database_delete: grpc.handleUnaryCall<core_core_database_pb.CoreDatabase.Delete.Req, core_core_database_pb.CoreDatabase.Delete.Res>;
    session_open: grpc.handleUnaryCall<common_session_pb.Session.Open.Req, common_session_pb.Session.Open.Res>;
    session_close: grpc.handleUnaryCall<common_session_pb.Session.Close.Req, common_session_pb.Session.Close.Res>;
    session_pulse: grpc.handleUnaryCall<common_session_pb.Session.Pulse.Req, common_session_pb.Session.Pulse.Res>;
    transaction: grpc.handleBidiStreamingCall<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
}

export interface ITypeDBClient {
    databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    session_open(request: common_session_pb.Session.Open.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    session_open(request: common_session_pb.Session.Open.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    session_open(request: common_session_pb.Session.Open.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    session_close(request: common_session_pb.Session.Close.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    session_close(request: common_session_pb.Session.Close.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    session_close(request: common_session_pb.Session.Close.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    session_pulse(request: common_session_pb.Session.Pulse.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    session_pulse(request: common_session_pb.Session.Pulse.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    session_pulse(request: common_session_pb.Session.Pulse.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    transaction(): grpc.ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
    transaction(options: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
    transaction(metadata: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
}

export class TypeDBClient extends grpc.Client implements ITypeDBClient {
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: Partial<grpc.ClientOptions>);
    public databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    public databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    public databases_contains(request: core_core_database_pb.CoreDatabaseManager.Contains.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Contains.Res) => void): grpc.ClientUnaryCall;
    public databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    public databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    public databases_create(request: core_core_database_pb.CoreDatabaseManager.Create.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.Create.Res) => void): grpc.ClientUnaryCall;
    public databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    public databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    public databases_all(request: core_core_database_pb.CoreDatabaseManager.All.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabaseManager.All.Res) => void): grpc.ClientUnaryCall;
    public database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    public database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    public database_schema(request: core_core_database_pb.CoreDatabase.Schema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Schema.Res) => void): grpc.ClientUnaryCall;
    public database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    public database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    public database_type_schema(request: core_core_database_pb.CoreDatabase.TypeSchema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.TypeSchema.Res) => void): grpc.ClientUnaryCall;
    public database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    public database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    public database_rule_schema(request: core_core_database_pb.CoreDatabase.RuleSchema.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.RuleSchema.Res) => void): grpc.ClientUnaryCall;
    public database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    public database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    public database_delete(request: core_core_database_pb.CoreDatabase.Delete.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: core_core_database_pb.CoreDatabase.Delete.Res) => void): grpc.ClientUnaryCall;
    public session_open(request: common_session_pb.Session.Open.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    public session_open(request: common_session_pb.Session.Open.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    public session_open(request: common_session_pb.Session.Open.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Open.Res) => void): grpc.ClientUnaryCall;
    public session_close(request: common_session_pb.Session.Close.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    public session_close(request: common_session_pb.Session.Close.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    public session_close(request: common_session_pb.Session.Close.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Close.Res) => void): grpc.ClientUnaryCall;
    public session_pulse(request: common_session_pb.Session.Pulse.Req, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    public session_pulse(request: common_session_pb.Session.Pulse.Req, metadata: grpc.Metadata, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    public session_pulse(request: common_session_pb.Session.Pulse.Req, metadata: grpc.Metadata, options: Partial<grpc.CallOptions>, callback: (error: grpc.ServiceError | null, response: common_session_pb.Session.Pulse.Res) => void): grpc.ClientUnaryCall;
    public transaction(options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
    public transaction(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<common_transaction_pb.Transaction.Client, common_transaction_pb.Transaction.Server>;
}
