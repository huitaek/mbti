// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
//
// Copyright (C) 2021 Vaticle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//
'use strict';
var grpc = require('@grpc/grpc-js');
var core_core_database_pb = require('../core/core_database_pb.js');
var common_session_pb = require('../common/session_pb.js');
var common_transaction_pb = require('../common/transaction_pb.js');

function serialize_typedb_protocol_CoreDatabase_Delete_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.Delete.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.Delete.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_Delete_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabase.Delete.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_Delete_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.Delete.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.Delete.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_Delete_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabase.Delete.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_RuleSchema_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.RuleSchema.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.RuleSchema.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_RuleSchema_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabase.RuleSchema.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_RuleSchema_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.RuleSchema.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.RuleSchema.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_RuleSchema_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabase.RuleSchema.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_Schema_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.Schema.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.Schema.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_Schema_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabase.Schema.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_Schema_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.Schema.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.Schema.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_Schema_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabase.Schema.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_TypeSchema_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.TypeSchema.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.TypeSchema.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_TypeSchema_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabase.TypeSchema.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabase_TypeSchema_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabase.TypeSchema.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabase.TypeSchema.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabase_TypeSchema_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabase.TypeSchema.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_All_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.All.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.All.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_All_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.All.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_All_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.All.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.All.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_All_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.All.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_Contains_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.Contains.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.Contains.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_Contains_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.Contains.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_Contains_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.Contains.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.Contains.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_Contains_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.Contains.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_Create_Req(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.Create.Req)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.Create.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_Create_Req(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.Create.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_CoreDatabaseManager_Create_Res(arg) {
  if (!(arg instanceof core_core_database_pb.CoreDatabaseManager.Create.Res)) {
    throw new Error('Expected argument of type typedb.protocol.CoreDatabaseManager.Create.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_CoreDatabaseManager_Create_Res(buffer_arg) {
  return core_core_database_pb.CoreDatabaseManager.Create.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Close_Req(arg) {
  if (!(arg instanceof common_session_pb.Session.Close.Req)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Close.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Close_Req(buffer_arg) {
  return common_session_pb.Session.Close.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Close_Res(arg) {
  if (!(arg instanceof common_session_pb.Session.Close.Res)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Close.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Close_Res(buffer_arg) {
  return common_session_pb.Session.Close.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Open_Req(arg) {
  if (!(arg instanceof common_session_pb.Session.Open.Req)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Open.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Open_Req(buffer_arg) {
  return common_session_pb.Session.Open.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Open_Res(arg) {
  if (!(arg instanceof common_session_pb.Session.Open.Res)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Open.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Open_Res(buffer_arg) {
  return common_session_pb.Session.Open.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Pulse_Req(arg) {
  if (!(arg instanceof common_session_pb.Session.Pulse.Req)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Pulse.Req');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Pulse_Req(buffer_arg) {
  return common_session_pb.Session.Pulse.Req.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Session_Pulse_Res(arg) {
  if (!(arg instanceof common_session_pb.Session.Pulse.Res)) {
    throw new Error('Expected argument of type typedb.protocol.Session.Pulse.Res');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Session_Pulse_Res(buffer_arg) {
  return common_session_pb.Session.Pulse.Res.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Transaction_Client(arg) {
  if (!(arg instanceof common_transaction_pb.Transaction.Client)) {
    throw new Error('Expected argument of type typedb.protocol.Transaction.Client');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Transaction_Client(buffer_arg) {
  return common_transaction_pb.Transaction.Client.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_typedb_protocol_Transaction_Server(arg) {
  if (!(arg instanceof common_transaction_pb.Transaction.Server)) {
    throw new Error('Expected argument of type typedb.protocol.Transaction.Server');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_typedb_protocol_Transaction_Server(buffer_arg) {
  return common_transaction_pb.Transaction.Server.deserializeBinary(new Uint8Array(buffer_arg));
}


var TypeDBService = exports.TypeDBService = {
  // Database Manager API
databases_contains: {
    path: '/typedb.protocol.TypeDB/databases_contains',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabaseManager.Contains.Req,
    responseType: core_core_database_pb.CoreDatabaseManager.Contains.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabaseManager_Contains_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_Contains_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabaseManager_Contains_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_Contains_Res,
  },
  databases_create: {
    path: '/typedb.protocol.TypeDB/databases_create',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabaseManager.Create.Req,
    responseType: core_core_database_pb.CoreDatabaseManager.Create.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabaseManager_Create_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_Create_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabaseManager_Create_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_Create_Res,
  },
  databases_all: {
    path: '/typedb.protocol.TypeDB/databases_all',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabaseManager.All.Req,
    responseType: core_core_database_pb.CoreDatabaseManager.All.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabaseManager_All_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_All_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabaseManager_All_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabaseManager_All_Res,
  },
  // Database API
database_schema: {
    path: '/typedb.protocol.TypeDB/database_schema',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabase.Schema.Req,
    responseType: core_core_database_pb.CoreDatabase.Schema.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabase_Schema_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabase_Schema_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabase_Schema_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabase_Schema_Res,
  },
  database_type_schema: {
    path: '/typedb.protocol.TypeDB/database_type_schema',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabase.TypeSchema.Req,
    responseType: core_core_database_pb.CoreDatabase.TypeSchema.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabase_TypeSchema_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabase_TypeSchema_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabase_TypeSchema_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabase_TypeSchema_Res,
  },
  database_rule_schema: {
    path: '/typedb.protocol.TypeDB/database_rule_schema',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabase.RuleSchema.Req,
    responseType: core_core_database_pb.CoreDatabase.RuleSchema.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabase_RuleSchema_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabase_RuleSchema_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabase_RuleSchema_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabase_RuleSchema_Res,
  },
  database_delete: {
    path: '/typedb.protocol.TypeDB/database_delete',
    requestStream: false,
    responseStream: false,
    requestType: core_core_database_pb.CoreDatabase.Delete.Req,
    responseType: core_core_database_pb.CoreDatabase.Delete.Res,
    requestSerialize: serialize_typedb_protocol_CoreDatabase_Delete_Req,
    requestDeserialize: deserialize_typedb_protocol_CoreDatabase_Delete_Req,
    responseSerialize: serialize_typedb_protocol_CoreDatabase_Delete_Res,
    responseDeserialize: deserialize_typedb_protocol_CoreDatabase_Delete_Res,
  },
  // Session API
session_open: {
    path: '/typedb.protocol.TypeDB/session_open',
    requestStream: false,
    responseStream: false,
    requestType: common_session_pb.Session.Open.Req,
    responseType: common_session_pb.Session.Open.Res,
    requestSerialize: serialize_typedb_protocol_Session_Open_Req,
    requestDeserialize: deserialize_typedb_protocol_Session_Open_Req,
    responseSerialize: serialize_typedb_protocol_Session_Open_Res,
    responseDeserialize: deserialize_typedb_protocol_Session_Open_Res,
  },
  session_close: {
    path: '/typedb.protocol.TypeDB/session_close',
    requestStream: false,
    responseStream: false,
    requestType: common_session_pb.Session.Close.Req,
    responseType: common_session_pb.Session.Close.Res,
    requestSerialize: serialize_typedb_protocol_Session_Close_Req,
    requestDeserialize: deserialize_typedb_protocol_Session_Close_Req,
    responseSerialize: serialize_typedb_protocol_Session_Close_Res,
    responseDeserialize: deserialize_typedb_protocol_Session_Close_Res,
  },
  // Checks with the server that the session is still alive, and informs it that it should be kept alive.
session_pulse: {
    path: '/typedb.protocol.TypeDB/session_pulse',
    requestStream: false,
    responseStream: false,
    requestType: common_session_pb.Session.Pulse.Req,
    responseType: common_session_pb.Session.Pulse.Res,
    requestSerialize: serialize_typedb_protocol_Session_Pulse_Req,
    requestDeserialize: deserialize_typedb_protocol_Session_Pulse_Req,
    responseSerialize: serialize_typedb_protocol_Session_Pulse_Res,
    responseDeserialize: deserialize_typedb_protocol_Session_Pulse_Res,
  },
  // Transaction Streaming API
// Opens a bi-directional stream representing a stateful transaction, streaming
// requests and responses back-and-forth. The first transaction client message must
// be {Transaction.Open.Req}. Closing the stream closes the transaction.
transaction: {
    path: '/typedb.protocol.TypeDB/transaction',
    requestStream: true,
    responseStream: true,
    requestType: common_transaction_pb.Transaction.Client,
    responseType: common_transaction_pb.Transaction.Server,
    requestSerialize: serialize_typedb_protocol_Transaction_Client,
    requestDeserialize: deserialize_typedb_protocol_Transaction_Client,
    responseSerialize: serialize_typedb_protocol_Transaction_Server,
    responseDeserialize: deserialize_typedb_protocol_Transaction_Server,
  },
};

exports.TypeDBClient = grpc.makeGenericClientConstructor(TypeDBService);
